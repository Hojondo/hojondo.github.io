<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Static Site Generator</title>
      <link href="/2021/08/14/za-tan-static-site-generator/"/>
      <url>/2021/08/14/za-tan-static-site-generator/</url>
      
        <content type="html"><![CDATA[<h1 id="静态网站生成器"><a href="#静态网站生成器" class="headerlink" title="静态网站生成器"></a>静态网站生成器</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://segmentfault.com/a/1190000019734486">丢掉烂大街的Hexo吧，用Vuepress搭建专属你的博客吧</a><br><a href="https://vuepress.vuejs.org/">VuePress</a><br><a href="https://vitepress.vuejs.org/">VitePress</a>  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模版引擎 </tag>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cypress</title>
      <link href="/2021/08/14/bi-ji-cypress/"/>
      <url>/2021/08/14/bi-ji-cypress/</url>
      
        <content type="html"><![CDATA[<p>一个 js 测试框架<br><a href="https://www.cypress.io/">https://www.cypress.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记-huse源码解析</title>
      <link href="/2021/08/13/bi-ji-huse-yuan-ma-jie-xi/"/>
      <url>/2021/08/13/bi-ji-huse-yuan-ma-jie-xi/</url>
      
        <content type="html"><![CDATA[<p>开坑</p><p><a href="https://github.com/ecomfe/react-hooks">https://github.com/ecomfe/react-hooks</a></p><p>一个react hook库。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-GC</title>
      <link href="/2021/08/10/bi-ji-js-gc/"/>
      <url>/2021/08/10/bi-ji-js-gc/</url>
      
        <content type="html"><![CDATA[<h2 id="一个由-作用域、闭包引发的内存分配问题考究"><a href="#一个由-作用域、闭包引发的内存分配问题考究" class="headerlink" title="一个由 作用域、闭包引发的内存分配问题考究"></a>一个由 作用域、闭包引发的内存分配问题考究</h2><h2 id="GC机制"><a href="#GC机制" class="headerlink" title="GC机制"></a>GC机制</h2><p>JavaScript 在定义变量时完成内存分配。<br>有些函数调用结果是分配对象内存。<br>使用值的过程实际上是对分配内存进行读取与写入的操作，这意味着可以写入一个变量或者一个对象的属性值，甚至传递函数的参数。</p><p>JavaScript 具有自动垃圾回收机制（GC:Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://www.kancloud.cn/kancloud/web_performance_optimization/81015">作用域链与闭包优化</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management">MDN-内存管理</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yeoman - 开发脚手架工具</title>
      <link href="/2021/07/19/bi-ji-yeoman/"/>
      <url>/2021/07/19/bi-ji-yeoman/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重学vue3</title>
      <link href="/2021/07/09/bi-ji-vue3/"/>
      <url>/2021/07/09/bi-ji-vue3/</url>
      
        <content type="html"><![CDATA[<p>emmmm</p><h1 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h1><p><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="生命周期"></p><h1 id="模版语法"><a href="#模版语法" class="headerlink" title="模版语法"></a>模版语法</h1><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><p><code>&#123;&#123;xxx&#125;&#125;</code><br><code>v-bind:attr</code><br>接受js表达式</p><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><p><code>v-html</code><br><code>v-once</code></p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>v-bind:[attributeName]=&quot;url&quot;</code></p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>指出一个指令应该以特殊方式绑定。<br>…</p><h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><p>v-bind:attr 缩写 <code>:attr</code><br>v-on:event 缩写 <code>@event</code></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记-docker</title>
      <link href="/2021/06/08/bi-ji-docker/"/>
      <url>/2021/06/08/bi-ji-docker/</url>
      
        <content type="html"><![CDATA[<p>Docker 彻底释放了计算虚拟化的威力，极大提高了应用的维护效率，降低了云计算应用开发的成本！<br>让应用的部署、测试和分发都变得前所未有的高效和轻松。</p><p><strong>Docker</strong> 使用 <code>Google</code> 公司推出的 <a href="https://golang.google.cn/">Go 语言</a> 进行开发实现，基于 <code>Linux</code> 内核的 <a href="https://zh.wikipedia.org/wiki/Cgroups">cgroup</a>，<a href="https://en.wikipedia.org/wiki/Linux_namespaces">namespace</a>，以及 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/">OverlayFS</a> 类的 <a href="https://en.wikipedia.org/wiki/Union_mount">Union FS</a> 等技术，对进程进行封装隔离，属于 <a href="https://en.wikipedia.org/wiki/Operating-system-level_virtualization">操作系统层面的虚拟化技术</a>。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。最初实现是基于 <a href="https://linuxcontainers.org/lxc/introduction/">LXC</a>，从 <code>0.7</code> 版本以后开始去除 <code>LXC</code>，转而使用自行开发的 <a href="https://github.com/docker/libcontainer">libcontainer</a>，从 <code>1.11</code> 版本开始，则进一步演进为使用 <a href="https://github.com/opencontainers/runc">runC</a> 和 <a href="https://github.com/containerd/containerd">containerd</a>。</p><p><strong>Docker 和 传统虚拟化方式的不同</strong></p><ul><li>传统虚拟机技术是<strong>虚拟出一套硬件</strong>后，在其上运行一个<strong>完整操作系统</strong>，再在该<strong>系统上运行所需应用进程</strong>；</li><li>而容器内的<strong>应用进程直接运行于宿主的内核</strong>，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</li></ul><p>优点：</p><ol><li>更高效利用系统资源。容器不需要进行硬件虚拟以及运行完整操作系统等额外开销，<code>Docker</code> 对系统资源的利用率更高</li><li>更快启动时间。由于直接运行于宿主内核，无需启动完整的操作系统，因此可以做到秒级、甚至毫秒级的启动时间</li><li>一致的运行环境。<code>Docker</code> 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性</li><li>持续交付和部署。对开发和运维（<a href="https://zh.wikipedia.org/wiki/DevOps">DevOps</a>）人员来说，最好的就是一次创建/配置，任意地方运行。<code>Docker</code> 可以定制应用镜像，开发人员通过 <a href="">Dockerfile</a> 来进行透明化镜像构建</li><li>更轻松的迁移。<code>Docker</code> 确保了执行环境的一致性</li><li>更轻松的维护和扩展。使用的分层存储以及镜像的技术，使得应用重复部分的复用更为容易，也使得应用的维护更新更加简单，基于基础镜像进一步扩展镜像也变得非常简单，同时docker官方维护了一大批高质量的 <a href="https://hub.docker.com/search/?type=image&image_filter=official">官方镜像</a></li></ol><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="镜像-Image"><a href="#镜像-Image" class="headerlink" title="镜像 Image"></a>镜像 Image</h3><p>操作系统分为 <strong>内核</strong> 和 <strong>用户空间</strong>。<strong>Docker 镜像</strong>（<code>Image</code>），就相当于是一个 文件系统 提供用户空间支持。</p><p>除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 <strong>不包含</strong> 任何动态数据，其内容在构建之后也不会被改变。</p><p>镜像只是一个虚拟的概念，其实际体现是由一组文件系统组成。镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</p><p>分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像</p><h3 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器 Container"></a>容器 Container</h3><p><code>镜像</code>和<code>容器</code>，可以理解成面向对象程序设计中的 <code>类</code> 和 <code>实例</code> 一样的实例。容器可以被<strong>创建</strong>、<strong>启动</strong>、<strong>停止</strong>、<strong>删除</strong>、<strong>暂停</strong>。</p><p>容器的实质是进程，不同于直接在宿主执行的进程，容器进程运行于自己独立的命名空间。</p><p>容器也是使用的分层存储。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为 <strong>容器存储层</strong>。</p><p>容器存储层的生存周期和容器保持一致，最佳实践的标准，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。文件的写入操作建议应该使用 <a href="https://yeasy.gitbook.io/docker_practice/data_management/volume">数据卷（Volume）</a>、或者 <a href="https://yeasy.gitbook.io/docker_practice/data_management/bind-mounts">绑定宿主目录</a>，在这些位置的读写会跳过容器存储层，<strong>直接对宿主</strong>（或网络存储）发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，使用volumn后，容器删除不会直接导致数据丢失。</p><h3 id="仓库-Repository"><a href="#仓库-Repository" class="headerlink" title="仓库 Repository"></a>仓库 Repository</h3><p>一个 <strong>Docker Registry</strong> 中可以包含多个 <strong>仓库</strong>（<code>Repository</code>）：</p><p>每个仓库可以包含多个 <strong>标签</strong><code>Tag</code><em>（通常，一个仓库会包含同一个软件不同版本的镜像）</em>：</p><p>每个标签对应一个镜像。可以通过 <code>仓库名:标签</code> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。<em>IMAGE ID是一个镜像的唯一标示。不排除一个镜像可以对应多个标签。</em></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p><code>$ docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]</code></p><ul><li>地址默认Docker Hub(docker.io)</li><li>docker.io的仓库名是两段式名称，<code>&lt;用户名&gt;/&lt;软件名&gt;</code> 用户名默认library官方<h3 id="运行-启动一个ubuntu-18-04容器"><a href="#运行-启动一个ubuntu-18-04容器" class="headerlink" title="运行 启动一个ubuntu:18.04容器"></a>运行 启动一个ubuntu:18.04容器</h3><code>docker run -it --rm ubuntu:18.04 bash</code><h3 id="列出镜像"><a href="#列出镜像" class="headerlink" title="列出镜像"></a>列出镜像</h3><code>docker image ls</code><br>所有镜像实际硬盘消耗 &lt;= 列表中的镜像体积总和。因为 Docker 镜像是多层存储结构，可以继承、复用。因此不同镜像可能会因为使用相同的基础镜像，从而拥有共同的层。而Docker 使用 Union FS，相同的层只需要保存一份即可。</li></ul><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><p><code>docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; ...]</code></p><p>其中，<code>&lt;镜像&gt;</code> 可以是 <code>镜像短 ID</code>一般取前3个字符即可、<code>镜像长 ID</code>、<code>镜像名&lt;仓库名&gt;:&lt;标签&gt;</code> 或者 <code>镜像摘要DIGEST</code>。<br>删除行为分为两类，一类是 Untagged，另一类是 Deleted。<br>使用上面命令删除镜像的时候，实际上是在要求删除某个标签的镜像。首先需要做的是将满足我们要求的所有镜像标签都取消。因为一个镜像可以对应多个标签，因此当我们删除了所指定的标签后，可能还有别的标签指向了这个镜像，如果是这种情况，那么 Delete 行为就不会发生。所以并非所有的 docker image rm 都会产生删除镜像的行为。<br>当该镜像所有的标签都被取消了，该镜像很可能会失去了存在的意义，因此会触发删除行为。镜像是多层存储结构，因此在删除的时候也是从上层向基础层方向依次进行判断删除。判断过程中 不会触发删除某层被其他仍在复用的中间层镜像，直到没有任何层依赖当前层时，才会真实的删除当前层。<br>除了镜像依赖以外，还需要注意的是容器对镜像的依赖。当用到这个镜像的容器仍然存在（即使没有运行中）同样不可以删除该镜像。<br><strong>配合docker image ls -q 来批量删除</strong><br><code>docker image rm $(docker image ls -q redis)</code><br>例 删除所有仓库名为 redis 的镜像</p><h3 id="定制一个web服务器"><a href="#定制一个web服务器" class="headerlink" title="定制一个web服务器"></a>定制一个web服务器</h3><p><code>docker run --name webserver -d -p 80:80 nginx</code></p><p>用 <code>nginx</code> 镜像启动一个容器，命名为 <code>webserver</code>，并且映射了 80 端口。</p><p>使用 <code>docker exec</code> 命令进入容器，修改其内容</p><p><code>docker exec -it webserver bash</code></p><p><code>echo &#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39; &gt; /usr/share/nginx/html/index.html</code> &amp; <code>exit</code></p><p>修改了容器的文件，也就是改动了容器的存储层。我们可以通过 <code>docker diff</code> 命令看到具体的改动。<code>docker diff webserver</code></p><p>当运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于<strong>容器存储层</strong>里。而 Docker 提供了一个 <code>docker commit</code> 命令，可以将容器的存储层保存下来成为镜像，即<strong>在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像</strong></p><p><code>docker commit [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</code></p><pre class=" language-bash"><code class="language-bash">docker commit \    --author <span class="token string">"xx &lt;xx@gmail.com>"</span> \    --message <span class="token string">"修改了默认网页"</span> \    webserver \    nginx:v2</code></pre><p>查看镜像的历史commit 记录</p><p><code>docker history nginx:v2</code></p><p>运行刚刚定制的镜像成容器，映射到81端口，打开浏览器访问localhost:81可以看到：</p><p><code>docker run --name web2 -d -p 81:80 nginx:v2</code></p><p>最后，在上例中，即使只改动了一个html文件，因为docker commit 命令的执行，导致很多无直接关系的文件被改动或添加，如果是更复杂的操作只会涉及更多无关内容被添加进来，最后导致镜像极为臃肿；docker commit 所有对镜像的操作都是黑箱操作，除了制作人其他都不知道执行过什么命令，也被称作黑箱镜像。</p><p>所以 不建议用这种方式定制镜像，请改用<code>Dockerfile</code></p><h3 id="使用Dockerfile定制镜像"><a href="#使用Dockerfile定制镜像" class="headerlink" title="使用Dockerfile定制镜像"></a>使用Dockerfile定制镜像</h3><p>相比docker commit的方式，有以下几个问题：</p><p>无法重复、镜像构建透明性的问题、体积臃肿。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的 **指令(Instruction)**，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>一个 <code>Dockerfile</code> 中 <code>FROM</code> 是必备的指令，并且必须是第一条指令，指定 <strong>基础镜像</strong>。</p><p><code>RUN</code> 指令是用来执行命令行命令的。<em>Dockerfile 支持 Shell 类的行尾添加 <code>\</code> 的命令换行方式，以及行首 <code>#</code> 进行注释的格式</em></p><p>… 等命令</p><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><p>在 Dockerfile 文件所在目录执行：<code>docker build -t nginx:v3 .</code><br>指定了最终镜像的名称 -t nginx:v3<br><code>.</code>指定了上下文路径 为当前目录</p><p><code>docker build [选项] &lt;上下文路径/URL/-&gt;</code></p><p><strong><code>docker build</code> 的工作原理</strong>：</p><p>Docker 在运行时分为 <strong>Docker 引擎</strong>（也就是服务端守护进程）和<strong>客户端工具</strong>。</p><p>Docker 的引擎提供了一组 REST API，被称为 <a href="https://docs.docker.com/develop/sdk/">Docker Remote API</a>，而如 <code>docker</code> 命令这样的客户端工具，则是通过这组 API 与 Docker 引擎交互，从而完成各种功能。这种 C/S 设计，让我们操作远程服务器的 Docker 引擎变得轻而易举。</p><p>因此表面上各种的docker命令，其实使用的远程调用形式在服务端（Docker 引擎）完成。而 <code>docker build</code> 命令构建镜像，其实并非在本地构建，而是在服务端，也就是 Docker 引擎中构建的。进而有个问题是：在这种客户端/服务端的架构中，如何才能让服务端获得本地文件呢？引入 上下文的概念——</p><p><code>docker build</code> 命令上下文路径（即该例中的<code>.</code>）后，会将路径下的所有内容打包，然后上传给 Docker 引擎。这样 Docker 引擎收到这个上下文包后，展开就会获得构建镜像所需的一切文件。</p><p><code>COPY ./package.json /app/</code> </p><p>该命令是复制 <strong>上下文（build context）</strong> 目录下的 <code>package.json</code>。因此，<code>COPY</code> 这类指令中的源文件的路径都是<em>相对路径</em>。</p><p>默认情况下，如果不额外指定 <code>Dockerfile</code> 的话，会将上下文目录下的名为 <code>Dockerfile</code> 的文件作为 Dockerfile。一般大家习惯性的会使用默认的文件名 <code>Dockerfile</code>，以及会将其置于镜像构建上下文目录中。</p><h5 id="其他构建镜像的方式"><a href="#其他构建镜像的方式" class="headerlink" title="其他构建镜像的方式"></a>其他构建镜像的方式</h5><ul><li><p>Url: git repo</p><p><code>$ docker build -t hello-world https://github.com/docker-library/hello-world.git#master:amd64/hello-world</code></p><p>命令指定了构建所需的 Git repo，并且指定分支为 <code>master</code>，构建目录为 <code>/amd64/hello-world/</code>，然后 Docker 就会自己去 <code>git clone</code> 这个项目、切换到指定分支、并进入到指定目录后开始构建。</p></li><li><p>Url: 用给定的 tar 压缩包构建</p><p><code>docker build http://server/context.tar.gz</code></p><p>如果所给出的 URL 不是个 Git repo，而是个 <code>tar</code> 压缩包，那么 Docker 引擎会下载这个包，并自动解压缩，以其作为上下文，开始构建。</p></li><li><p>标准输入：文本文件</p><p>如<code>docker build - &lt; Dockerfile</code></p><p>这种形式由于直接从标准输入中读取 Dockerfile 的内容，它没有上下文，因此不可以像其他方法那样可以将本地文件 <code>COPY</code> 进镜像之类的事情</p></li><li><p>标准输入：非文本文件</p><p><code>docker build - &lt; context.tar.gz</code></p><p>如果发现标准输入的文件格式是 <code>gzip</code>、<code>bzip2</code> 以及 <code>xz</code> 的话，将会使其为上下文压缩包，直接将其展开，将里面视为上下文，并开始构建。</p></li></ul><h4 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h4><ul><li><p><strong>FROM</strong> 必填，指定base镜像</p></li><li><p><strong>RUN</strong> </p><p>执行命令行命令</p></li><li><p><strong>CMD</strong></p><p>两种格式：</p><ul><li><code>shell</code> 格式：<code>CMD &lt;命令&gt;</code>，实际的命令会被包装为 <code>sh -c</code> 的参数的形式进行执行。如<code>CMD echo $HOME</code> 等于 <code>CMD [ &quot;sh&quot;, &quot;-c&quot;, &quot;echo $HOME&quot; ]</code></li><li><code>exec</code> 格式：<code>CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;...]</code> 并且必须是双引号 不可单引号。</li><li>参数列表格式：<code>CMD [&quot;参数1&quot;, &quot;参数2&quot;...]</code>。在指定了 <code>ENTRYPOINT</code> 指令后，用 <code>CMD</code> 指定具体的参数</li></ul><p>Docker 不是虚拟机 是个进程：</p><ol><li>CMD指令就是用于指定默认的容器主进程的启动命令的。</li><li>所以容器内没有后台服务的概念，容器中的应用都应该以前台执行。如直接执行 <code>nginx</code> 可执行文件，并且要求以前台形式运行<code>CMD [&quot;nginx&quot;, &quot;-g&quot;, &quot;daemon off;&quot;]</code></li></ol></li><li><p><strong>ENTRYPOINT</strong></p><p>目的和 <code>CMD</code> 一样，都是在指定容器启动程序及参数。当指定了 <code>ENTRYPOINT</code> 后，<code>CMD</code> 的含义就发生了改变，不再是直接的运行其命令，而是将 <code>CMD</code> 的内容作为参数传给 <code>ENTRYPOINT</code> 指令，换句话说实际执行时，将变为：<code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code></p></li></ul><ul><li><p><strong>COPY</strong></p><p>将从构建上下文目录中 <code>&lt;源路径&gt;</code> 的文件/目录复制到新的一层的镜像内的 <code>&lt;目标路径&gt;</code> 位置</p><p><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] &lt;源路径&gt;... &lt;目标路径&gt;</code></p><p><code>COPY [--chown=&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,&quot;&lt;源路径2&gt;&quot;... &quot;&lt;目标路径&gt;&quot;]</code><br><code>源路径</code>可以多个，可以是通配符，其通配符规则要满足 Go 的 <a href="https://golang.org/pkg/path/filepath/#Match"><code>filepath.Match</code></a> 规则。</p><p><code>&lt;目标路径&gt;</code> 可以是容器内的绝对路径，也可以是相对于工作目录的相对路径（工作目录可以用 <code>WORKDIR</code> 指令来指定）</p><p>使用 <code>COPY</code> 指令，源文件的各种元数据都会保留。比如读、写、执行权限、文件变更时间等。使用该指令的时候还可以加上 <code>--chown=&lt;user&gt;:&lt;group&gt;</code> 选项来改变文件的所属用户及所属组。</p><p>例<code>COPY --chown=55:mygroup files* /mydir/</code></p></li><li><p><strong>ADD</strong> </p><p>相比copy增加了一些功能</p><ul><li>源路径可以是<code>url</code>：Docker 引擎会试图去下载这个链接的文件放到 <code>&lt;目标路径&gt;</code> 去。下载后的文件权限自动设置为 <code>600</code>。</li><li>源路径可以是<code>tar</code>压缩文件：压缩格式为 <code>gzip</code>, <code>bzip2</code> 以及 <code>xz</code> 的情况下，<code>ADD</code> 指令将会自动解压缩这个压缩文件到 <code>&lt;目标路径&gt;</code> 去。</li></ul><p>最佳实践中，建议尽可能的使用copy，因为其语义明确，而且add的行为不一定清晰，此外<code>ADD</code> 指令会令镜像构建缓存失效 从而可能会令镜像构建变得比较缓慢。</p><p>例：<code>ADD --chown=10:11 files* /mydir/</code></p></li></ul><ul><li><p><strong>ENV</strong></p></li><li><p><strong>ARG</strong> 构建参数</p></li><li><p><strong>VOLUME</strong> 定义匿名卷</p></li><li><p><strong>EXPOSE</strong> 暴露端口</p></li><li><p><strong>WORKDIR</strong> 指定工作目录</p></li><li><p><strong>USER</strong> 指定当前用户</p></li><li><p><strong>HEALTHCHECK</strong> 健康检查</p></li><li><p><strong>ONBUILD</strong> </p></li><li><p><strong>LABEL</strong> 为镜像添加元数据</p></li><li><p><strong>SHELL</strong></p></li></ul><h1 id="常用命令行Command"><a href="#常用命令行Command" class="headerlink" title="常用命令行Command"></a>常用命令行Command</h1><p><a href="https://docs.docker.com/engine/reference/run/">官方DOC</a></p><ul><li><p>docker pull</p></li><li><p>docker run <image></p></li><li><p>docker image ls    列出已经下载下来的镜像</p></li><li><p>docker image ls -a    默认只显示顶层镜像，加-a显示中间层镜像(无标签的镜像很多都是中间层镜像，是其它镜像所依赖的镜像)在内的所有</p></li><li><p>docker image ls -f since=mongo:3.2 例子 查找在 mongo:3.2 之后建立的镜像</p></li><li><p>docker image ls -q    <code>--filter</code> 配合 <code>-q</code> 产生出指定范围的 ID 列表，然后送给另一个 docker 命令作为参数，从而针对这组实体成批的进行某种操作的做法在 Docker 命令行使用过程中非常常见</p></li><li><p>自定义搜索结果表格格式，用了 <a href="https://gohugo.io/templates/introduction/">Go 的模板语法</a>Go 是特别适合容器微服务架构的语言的原因之一。</p><pre class=" language-bash"><code class="language-bash">docker image <span class="token function">ls</span> --format <span class="token string">"{{.ID}}: {{.Repository}}"</span></code></pre></li><li><p>docker system df    便捷的查看镜像、容器、数据卷所占用的空间</p></li><li><p>docker image prune    删除所有虚悬镜像dangling-image（镜像仓库维护后 已经抛弃的镜像仓库名）</p></li><li><p>docker image rm [选项] &lt;镜像1&gt; [&lt;镜像2&gt; …]    删除本地镜像。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1></li></ul><blockquote><p> <a href="https://yeasy.gitbook.io/docker_practice/">https://yeasy.gitbook.io/docker_practice/</a><br> <a href="https://docs.docker.com/engine/reference/commandline/docker/">docker commands</a><br><a href="https://juejin.cn/post/6844903902807080973">Dockerfile RUN 、 CMD 、 ENTRYPOINT区别</a>  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端网安攻防 详记</title>
      <link href="/2021/06/06/bi-ji-wang-luo-qian-duan-wang-an-gong-ji/"/>
      <url>/2021/06/06/bi-ji-wang-luo-qian-duan-wang-an-gong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="点击劫持（click-Jacking）"><a href="#点击劫持（click-Jacking）" class="headerlink" title="点击劫持（click-Jacking）"></a>点击劫持（click-Jacking）</h1><p><a href="https://zh.wikipedia.org/wiki/%E7%82%B9%E5%87%BB%E5%8A%AB%E6%8C%81">wiki</a></p><p>点击劫持（clickjacking）是一种在网页中将恶意代码等隐藏在看似无害的内容（如按钮）之下，并诱使用户点击的手段。<br>举例来说，如用户收到一封包含一段视频的电子邮件，但其中的“播放”按钮并不会真正播放视频，而是链入一购物网站。这样当用户试图“播放视频”时，实际是被诱骗而进入了一个购物网站。</p><p>todo</p><h1 id="跨站脚本攻击-Cross-site-scripting-XSS"><a href="#跨站脚本攻击-Cross-site-scripting-XSS" class="headerlink" title="跨站脚本攻击 Cross-site scripting (XSS)"></a>跨站脚本攻击 Cross-site scripting (XSS)</h1><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC">wiki</a></p><p>是代码注入 Code injection 的一种。它允许用户将 恶意代码(malicious client-side code) 注入到网页上，其他用户在观看网页时就会受到影响。<br>XSS 攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。<br>被攻击成功的原因 通常是 Web app 没有采用足够的校验或编码 validation or encoding，浏览器无法自行判断该恶意代码是不可信的，所以 gives it access to</p><ul><li>any <strong>cookies</strong>,</li><li><strong>session tokens</strong>,</li><li>or other <strong>sensitive site-specific information</strong>,</li><li>or lets the malicious script <strong>rewrite the HTML content</strong></li></ul><h1 id="跨站请求伪造-Cross-site-request-forgery-CSRF"><a href="#跨站请求伪造-Cross-site-request-forgery-CSRF" class="headerlink" title="跨站请求伪造 Cross-site request forgery (CSRF)"></a>跨站请求伪造 Cross-site request forgery (CSRF)</h1><p><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">wiki</a></p><p>也被称为 one-click attack 或者 session riding，通常缩写为 CSRF 或者 XSRF， 是一种挟制用户在当前已登录的 Web 应用程序上执行非本意的操作的攻击方法。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://owasp.org/www-project-top-ten/2017/Top_10">2017 Top 10 Web app vulnerabilities</a><br><a href="https://segmentfault.com/a/1190000022678120">防范 XSS 实战小结</a><br><a href="https://juejin.cn/post/6844903685122703367">如何防止 XSS 攻击</a><br><a href="https://juejin.cn/post/6844903689702866952">如何防止 CSRF 攻击</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webAPI </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩具 - 爬虫 MDN</title>
      <link href="/2021/05/31/sui-bi-qian-duan-pa-chong-mdn/"/>
      <url>/2021/05/31/sui-bi-qian-duan-pa-chong-mdn/</url>
      
        <content type="html"><![CDATA[<h1 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h1><p>一个 canvas 展示 思维导图，类似 <a href="https://echarts.apache.org/examples/en/editor.html?c=tree-basic">https://echarts.apache.org/examples/en/editor.html?c=tree-basic</a> ，就当他是个 MDN Menu 吧 🤣</p><ul><li>鼠标左键 <code>click</code> node to control collapse &amp; expand</li><li>鼠标右键 <code>contextmenu</code> node to nav to respective page</li></ul><blockquote><p>成品展示 <a href="http://hojondo.com/MDN_MIND_MAPPING/">http://hojondo.com/MDN_MIND_MAPPING/</a><br><em>待完善 + filter + search + nav</em></p></blockquote><h1 id="目标-JSON-格式"><a href="#目标-JSON-格式" class="headerlink" title="目标 JSON 格式"></a>目标 JSON 格式</h1><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">PageNode</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  link<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  childrenPage<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>PageNode<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>例</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">[</span>  <span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Standard built-in objects"</span><span class="token punctuation">,</span>    <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"</span><span class="token punctuation">,</span>    <span class="token property">"childrenPage"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Text processing"</span><span class="token punctuation">,</span>        <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#text_processing"</span><span class="token punctuation">,</span>        <span class="token property">"childrenPage"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"String"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"</span><span class="token punctuation">,</span>            <span class="token property">"childrenPage"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Static properties"</span><span class="token punctuation">,</span>                <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token property">"childrenPage"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Static methods"</span><span class="token punctuation">,</span>                <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token property">"childrenPage"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Instance properties"</span><span class="token punctuation">,</span>                <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token property">"childrenPage"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              <span class="token punctuation">{</span>                <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Instance methods"</span><span class="token punctuation">,</span>                <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token property">"childrenPage"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">{</span>                    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"match"</span><span class="token punctuation">,</span>                    <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">"颗粒度 到 properties // 其实后续可以追加 #parameters #return #examples/特别注意用例，待定。。。"</span>                  <span class="token punctuation">}</span><span class="token punctuation">,</span>                  <span class="token punctuation">{</span><span class="token punctuation">}</span>                <span class="token punctuation">]</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"RegExp"</span><span class="token punctuation">,</span>            <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Keyed collections"</span><span class="token punctuation">,</span>        <span class="token property">"link"</span><span class="token operator">:</span> <span class="token string">"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#keyed_collections"</span><span class="token punctuation">,</span>        <span class="token property">"childrenPage"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          // Map<span class="token punctuation">,</span>          // Set<span class="token punctuation">,</span>          // WeakMap<span class="token punctuation">,</span>          // WeakSet        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>  // https<span class="token operator">:</span>//developer.mozilla.org/en-US/docs/Web/JavaScript/Reference#statements<span class="token punctuation">]</span></code></pre><h1 id="梳理-MDN-每页的-layout-结构"><a href="#梳理-MDN-每页的-layout-结构" class="headerlink" title="梳理 MDN 每页的 layout 结构"></a>梳理 MDN 每页的 layout 结构</h1><p>root 选定 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects</a><br>结构相对统一</p><h2 id="bread-crumb-length-6"><a href="#bread-crumb-length-6" class="headerlink" title="bread-crumb-length === 6"></a>bread-crumb-length === 6</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference</a><br>url 判断依据： <code>(url.match(/(?&lt;=^https\:\/\/).*/)??[&#39;&#39;])[0].split(&#39;/&#39;).length === 6</code></p><pre class=" language-less"><code class="language-less"><span class="token selector">h2 > a</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 指向 bread-crumb-length === 7</span>  <span class="token comment" spellcheck="true">/** 包括   Global_Objects;   statements;   expressions_and_operators;   functions;   additional_reference_pages  */</span><span class="token punctuation">}</span></code></pre><p>只有 5 个 h2，而且 从该入口进的子页面 结构并不一致。<br>暂略</p><h2 id="bread-crumb-length-7"><a href="#bread-crumb-length-7" class="headerlink" title="bread-crumb-length === 7"></a>bread-crumb-length === 7</h2><p>例 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects</a><br>url 判断依据： <code>(url.match(/(?&lt;=^https\:\/\/).*/)??[&#39;&#39;])[0].split(&#39;/&#39;).length === 7</code></p><p>所有 h3 分类 及其 子页面</p><pre class=" language-less"><code class="language-less"><span class="token selector">h3 > a</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 大分类 hash#url 例 #text_processing</span><span class="token punctuation">}</span><span class="token selector">h3 + div li > a</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 大分类 的 子页面</span>  <span class="token comment" spellcheck="true">// TODO: 排除 a 前面带 svg 的(要么 nonstandard 要么 deprecated)</span><span class="token punctuation">}</span></code></pre><p>映射到 nodejs _伪代码_，使用 <code>cheerio as $</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> childNodes <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h3 > a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> childNodesName <span class="token operator">=</span> childNodes<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> childNodesLink <span class="token operator">=</span> childNodes<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// #hash 后续需要拼接当前url+#xx</span><span class="token keyword">const</span> grandChildNodes <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h3 + div li > a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> grandChildNodesName <span class="token operator">=</span> grandChildNodes<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> grandChildNodesLink <span class="token operator">=</span> grandChildNodes<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后续需要拼接'https://developer.mozilla.org' + xx</span></code></pre><h2 id="bread-crumb-length-8"><a href="#bread-crumb-length-8" class="headerlink" title="bread-crumb-length === 8"></a>bread-crumb-length === 8</h2><p>例 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String</a></p><p>url 判断依据： <code>(url.match(/(?&lt;=^https\:\/\/).*/)??[&#39;&#39;])[0]?.split(&#39;/&#39;).length === 8</code></p><pre class=" language-less"><code class="language-less"><span class="token selector">h2 > a</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 大分类 hash#url, 例 #static_methods</span><span class="token punctuation">}</span><span class="token selector">h2 + div dt > a</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 大分类 的 子页面</span>  <span class="token comment" spellcheck="true">// TODO: 排除 a 后面带 svg 的(要么 nonstandard 要么 deprecated)</span><span class="token punctuation">}</span></code></pre><p>映射到 nodejs _伪代码_，使用 <code>cheerio as $</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> childNodes <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h2 > a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> childNodesName <span class="token operator">=</span> childNodes<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> childNodesLink <span class="token operator">=</span> childNodes<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 同上</span><span class="token keyword">const</span> grandChildNodes <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"h2 + div dt > a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> grandChildNodesName <span class="token operator">=</span> grandChildNodes<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> grandChildNodesLink <span class="token operator">=</span> grandChildNodes<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 同上</span></code></pre><h1 id="草稿代码"><a href="#草稿代码" class="headerlink" title="草稿代码"></a>草稿代码</h1><p>需要注意的点：</p><ul><li>可能会通过不同路径拿到同一个 url，需要去重；</li><li>css 选择器 不准确，可能会多拿 非预期的元素，进到 page 大概率会 error</li><li>上述分类标准 非兼容 所有 url，需要排除（如果 root 不从 global_objects 开始的话，<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators</a> 适用于<code>h3 + div dt &gt; a</code><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements</a> 适用于<code>h3 + div dt &gt; a</code><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions</a> … 完全就是类似 string level<br>综上。root 只从 global_objects 开始。<strong>后续考虑分别对 同级不同 root 开始深度爬</strong></li></ul><h2 id="nodejs-拿到-json"><a href="#nodejs-拿到-json" class="headerlink" title="nodejs 拿到 json"></a>nodejs 拿到 json</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"https"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cheerio <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cheerio"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> rootUrl <span class="token operator">=</span>  <span class="token string">"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects"</span><span class="token punctuation">;</span>https  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>rootUrl<span class="token punctuation">,</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> html <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      html <span class="token operator">+</span><span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span><span class="token string">"creawer.txt"</span><span class="token punctuation">,</span> html<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// console.log(html);</span>      <span class="token function">filterHtml</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"crash!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// todo filterHtml into .json</span><span class="token comment" spellcheck="true">// === 7 / 8 ?</span><span class="token comment" spellcheck="true">// 递归</span></code></pre><h2 id="前端-配合-echarts"><a href="#前端-配合-echarts" class="headerlink" title="前端 配合 echarts"></a>前端 配合 echarts</h2><p><a href="https://github.com/Hojondo/MDN_MIND_MAPPING">https://github.com/Hojondo/MDN_MIND_MAPPING</a></p><blockquote><p><a href="https://segmentfault.com/a/1190000014811373">node 爬虫扫盲</a><br><a href="https://imweb.io/topic/5d230c6df7b5692b080f2668">https://imweb.io/topic/5d230c6df7b5692b080f2668</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Symbol详解</title>
      <link href="/2021/05/31/za-tan-js-symbol-xiang-jie/"/>
      <url>/2021/05/31/za-tan-js-symbol-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>Symbol 英文意思为 符号、象征、标记、记号，在 js 中更确切的翻译应该为 <strong>独一无二的值</strong></p><p><code>const s = Symbol(&#39;key用来描述这个symbol值&#39;)</code> <strong>这里的参数 key 其实只是 对 symbol 的描述，可用于调试但不是访问 symbol 本身的途径</strong>。_(因为即使是传入相同的参数，生成的 symbol 值也是不相等的)_<br><em>(需要注意的是通过 Symbol 方法创建值的时候不用使用 new 操作符，原因是通过 new 实例化的结果是一个 object 对象，而不是原始类型的 symbol)</em></p><ul><li><code>Symbol.for(xx)</code>: 检测上下文中是否已经存在使用该方法且相同参数创建的 symbol 值，如果存在则返回已经存在的值，如果不存在则新建。</li><li><code>Symbol.keyFor(Symbol.for(&quot;foo&quot;)) === &quot;foo&quot;</code>: 返回一个使用 Symbol.for 方法创建的 symbol 值的 key</li></ul><h2 id="Symbol-iterator"><a href="#Symbol-iterator" class="headerlink" title="Symbol.iterator"></a>Symbol.iterator</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/iterator">mdn</a> 覆盖定义某个 object 的默认 iterator 迭代方法,Used by <code>for...of</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>obj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">yield</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token keyword">yield</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>iterable1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Array [1, 2, 3]</span></code></pre><h2 id="Symbol-asyncIterator"><a href="#Symbol-asyncIterator" class="headerlink" title="Symbol.asyncIterator"></a>Symbol.asyncIterator</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol/asyncIterator">mdn</a><br>覆盖定义某个 object 的默认 AsyncIterator 迭代方法，Used by**<code>for await...of</code>**</p><h2 id="应用场景："><a href="#应用场景：" class="headerlink" title="应用场景："></a>应用场景：</h2><p>用 Symbol 的最常见场景就是可以用来模拟私有属性或方法了，弥补了 JS 没有 OOP 语言常见的 private、public 这种可见性修饰符的不足。</p><ol><li>维护一个 mapping，<strong>消除魔法字符</strong> 如<code>const tabTypes = &#123;basic: Symbol(),super: Symbol()&#125;</code></li><li>obj 的某个 <code>key</code> 用 <code>symbol</code> 来做，可以<strong>避免失误型二次赋值</strong>。<em>除非 真的要重新赋值就 这样：<code>obj[Symbol.for(&#39;key&#39;)] = xxx</code></em></li><li>利用 Symbol 的唯一性来<strong>模拟 class 的 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/Private_class_fields">private 属性</a></strong> <code>class xx &#123; [Symbol()]()&#123;statement&#125; &#125;</code></li></ol><blockquote><p><a href="https://stackoverflow.com/questions/34587901/difference-between-symbol-and-symbol-for">Symbol 构造函数创建的 local-symbol 和 Symbol.for()创建的 global-symbol 不同</a><br><a href="https://blog.yangerxiao.com/posts/javascript-symbol">https://blog.yangerxiao.com/posts/javascript-symbol</a></p></blockquote><p>。。。todo complete</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Low code &amp; No code</title>
      <link href="/2021/05/26/sui-bi-qian-duan-codeless/"/>
      <url>/2021/05/26/sui-bi-qian-duan-codeless/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>最近几年都在讨论什么呢？<br>云技术、中台、敏捷、大前端、低代码。<br>你会发现上面的几个技术，本质上实际上并不是面向开发者的，而是面向老板，或者说面向资本的。<br>因为可以多快好省，所以才得到吹捧。<br>不论我们是否愿意，一切都会向着更快、成本更低的方向发展。打不过就加入，搞清楚背后的原理。</p><p>low code 和 no code 的概念就像公司内部 架构部门干的 脚手架之类的 + RN 的 ignite 这种代码模版 + 可视化的拖拽组件(有点梦回 dreamweaver) = 手动开发了 80%的 预设 layout 的项目前端代码。剩下 20%再写代码修修改改。<br>像这样，减少了前端 dev 的需求量…<br>前期大量重复的工作量 转移到了一些非技术，比如设计身上（开发的最终目的就是不再需要开发）</p><p>像这种 low code 适用于 埃森哲 IBM 这种， toB 卖解决方案, 如 SAAS 项目、企业信息管理系统（MIS）、内部办公系统（OA）、企业资源计划系统（ERP）、客户关系管理系统（CRM）等。或者这种”人人都是<del>产品经理</del>开发”的<a href="https://powerapps.microsoft.com/en-us/">微软 PowerApps</a> 和 <a href="https://www.wix.com/">wix</a> 还有个用户定制简单 h5 的<a href="https://www.eqxiu.com/">易企秀</a>， 还有个 list<a href="https://gramener.medium.com/best-low-code-development-platforms-10042f3c4940">10 Best Low-Code Development Platforms In 2021</a><br>比如一个花店 餐馆 想买个订单 顾客管理的系统，基本上 layout 大差不差，在相似 80%的基础上商家应该会想要点个性化，那就是剩下的 20%了</p><p>纯代码开发就像使用 photoshop，低代码类似美图秀秀，零代码就是美颜相机。<br><img src="https://i.loli.net/2021/05/26/nuQ7NOZ9rxpLTWD.png" alt="image.png"></p><h1 id="低代码-支撑-微服务"><a href="#低代码-支撑-微服务" class="headerlink" title="低代码 支撑 微服务"></a>低代码 支撑 微服务</h1><p><img src="https://i.loli.net/2021/05/26/E8nDS4RfJYewBCL.png" alt="image.png"></p><h1 id="架构流程"><a href="#架构流程" class="headerlink" title="架构流程"></a>架构流程</h1><ul><li><p>工具-客户端基础设施上。它适合于 快速的 MVP 构建，并且生成的代码还应该方便修改。</p></li><li><p>后端应该包括：</p><ul><li>大量可用地现有服务。身份验证、安全性、推送能力、地图等等</li><li>快速构建出后端服务。比如内部有 Serverless 或者 FaaS 方案</li><li>方便与第三方服务集成</li><li>灵活性。支持多语言等</li></ul><p>前端作为 api 消费者，不可避免要采用装饰器模式，封装后端 API 成统一的方式：比如使用 BFF，对接契约如 swagger，查询语言如 GraphQL</p></li><li><p>模型定义上 需要一个 DSL(Domain special language)，比如用 json，映射 UI 对组件</p></li><li><p>原型设计上 比如一个登录业务，需要考虑的点包括：1. 成功登录。2. 取消登录。3.登录失败。包括一些通用的逻辑处理如 1. 登录成功。保存 Token，并返回历史页面；2.登录失败。弹出一个自定义内容的提示框。</p></li><li><p>前端架构上<br>大致分为 3 块要维护：1. 模版 2. 数据的 CRUD 3. 函数；<br>按组件来分，又有几个例子：</p><ul><li>无限加载 list</li><li>form</li><li>card</li><li>富文本的展示</li><li>常见图标，已有很多成熟的库比如<code>echarts</code>，二次封装成 DSL 语言，mapping 上对应的逻辑代码块</li><li>跨设备的响应式布局。比如移动端使用无限加载 list，correspondingly 大尺寸桌面端使用 pagination</li></ul></li><li><p>后端架构上 微服务颗粒度尽量小，api 规范化统一格式统一权限管理，大量 api 服务，快速集成第三方。</p></li><li><p>推荐的工具库列举：<br>拖拽式 Web 建造工具：<a href="https://grapesjs.com/">https://grapesjs.com/</a><br>基于 Flow 的编程工具：<a href="https://noflojs.org/">https://noflojs.org/</a><br>DSL 布局生成器：<a href="https://github.com/ijzerenhein/autolayout.js/">https://github.com/ijzerenhein/autolayout.js/</a><br>可视化数据流编辑器：<a href="https://github.com/Gregwar/blocks.js">https://github.com/Gregwar/blocks.js</a><br>基于 React 的内容生成器：<a href="https://github.com/vigetlabs/colonel-kurtz">https://github.com/vigetlabs/colonel-kurtz</a></p></li></ul><blockquote><p><a href="https://houbb.github.io/2021/03/09/low-code-01-overview">https://houbb.github.io/2021/03/09/low-code-01-overview</a><br><a href="https://www.techug.com/post/codeless-programming.html">https://www.techug.com/post/codeless-programming.html</a></p></blockquote><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="http://doc.jeecg.com/">JeecgBoot 开发文档</a>  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> codeless </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>localStorage indexDB sessionStorage cookie session token</title>
      <link href="/2021/05/24/za-tan-js-localstorage-indexdb-sessionstorage-cookie-session/"/>
      <url>/2021/05/24/za-tan-js-localstorage-indexdb-sessionstorage-cookie-session/</url>
      
        <content type="html"><![CDATA[<h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">cookie</a></h1><p>HTTP 协议是无状态的，HTTP 协议自身不对<strong>请求和响应之间的通信状态</strong>进行保存。<br>Cookie 指某些网站为了辨别用户身份而储存在用户本地终端上的数据(通常经过加密)。大小限制在 4KB 左右（cookie 每一个 name=value 的 value 值大概在 4KB）<br>Cookie 的本职工作并非本地存储，而是“维持状态”</p><ul><li><p>应用场景</p><ul><li>记住密码，下次自动登录</li><li>购物车功能</li><li>记录用户浏览数据，进行商品（广告）推荐</li></ul></li><li><p>特点<br>cookie 是<strong>服务端生成</strong>，客户端进行维护和存储。<br>把 Cookie 理解为一个存储在浏览器里的一个小小的文本文件，它附着在 HTTP 请求上，在浏览器和服务器之间“飞来飞去”。<br>它可以携带用户信息，当服务器检查 Cookie 的时候，便可以获取到客户端的状态。<br>Cookie 是紧跟域名的。同一个域名下的所有请求，都会携带 同 domain 下的所有 Cookie。(对于静态文件的请求，携带 cookie 信息根本没有用，解决办法是：通过 cdn（存储静态文件的）的域名和主站的域名分开来解决。)<br>由于在 HTTP 请求中的 Cookie 是明文传递的，所以安全性成问题，除非用 HTTPS。</p><p><a href="https://juejin.cn/post/6844903814445662221#heading-6">关于 xss(Cross-site scripting) 攻击</a>: <code>httpOnly</code>禁止 js 访问 cookie；<code>Secure</code> 标记意味着只在协议 https 的请求中携带；<code>samesite</code>规定浏览器不能在跨域请求中携带 cookie,减少 csrf 攻击</p></li><li><p>cookie 的新建和修改：</p><ol><li>xhr 请求的 response header 里的<code>set-cookie</code>如： <code>set-cookie: MONITOR_WEB_ID=0fd86e6c-4e9f-427a-a76f-cf8593b98665; path=/; expires=Tue, 24 Aug 2021 06:14:03 GMT; domain=i.snssdk.com; samesite=none; secure</code><br><a href="https://nodejs.org/dist/latest-v14.x/docs/api/http.html#http_response_setheader_name_value">nodeJs 示例</a></li><li>js<code>log(document.cookie);</code>或<code>document.cookie = xxx</code></li><li>request 的时候通过 request 的 cookie 向服务器传递所有 accessable 字段</li></ol></li><li><p>关键字 attribute</p><ol><li>Expires &amp; Max-Age</li><li>Secure &amp; HttpOnly</li><li>Domain &amp; Path &amp; SameSite &amp; Cookie prefixes</li></ol></li><li><p><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Types_of_attacks">4 种安全攻击（包括 XSS &amp; CSRF）</a></p></li></ul><p>浏览器客户端每次发起请求 都会自动携带在 request-header 中<br><em>除了 cookie 外，本文其他所有存储方式都不会参与 服务端通信</em></p><h1 id="本地存储-Web-Storage"><a href="#本地存储-Web-Storage" class="headerlink" title="本地存储 Web Storage"></a>本地存储 Web Storage</h1><h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage">localStorage</a></h2><ul><li>特点<ol><li>保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。永远不会过期的，使其消失的唯一办法是手动删除</li><li>大小为 5M 左右</li><li>仅在客户端使用，不和服务端进行通信</li><li>接口封装较好，以<code>键值对</code>(<em>只能存储字符串</em>)的形式存在：存：<code>localStorage.setItem(&quot;key&quot;,&quot;value&quot;);</code> 取：<code>var valueLocal = localStorage.getItem(&quot;key&quot;);</code></li><li>the stored data is saved across browser sessions.</li></ol></li><li>应用场景<br>考虑到 LocalStorage 的特点之一是持久，有时我们更倾向于用它来存储一些内容稳定的资源。比如图片内容丰富的电商网站会用它来存储 Base64 格式的图片字符串</li><li>作用域<br>localStorage 只要在相同的协议、相同的主机名、相同的端口下，就能读取/修改到同一份 localStorage 数据。</li><li>使用<br><code>localStorage.setItem(&#39;myCat&#39;, &#39;Tom&#39;);</code><br><code>const cat = localStorage.getItem(&#39;myCat&#39;);</code><br><code>localStorage.removeItem(&#39;myCat&#39;);</code><br><code>localStorage.clear();</code></li></ul><h2 id="sessionStorage"><a href="#sessionStorage" class="headerlink" title="sessionStorage"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage">sessionStorage</a></h2><ul><li>特点<ol><li><strong>会话级别</strong>的浏览器存储：</li></ol><ul><li>保存的数据用于浏览器的一次会话，当<strong>会话结束</strong>（通常是该窗口关闭），数据被清空</li><li>即便是相同域名下的两个页面，只要它们不在同一个浏览器窗口中打开，那么它们的 sessionStorage 内容便<strong>无法共享</strong>；localStorage 在所有同源窗口中都是共享的；cookie 也是在所有同源窗口中都是共享的。</li></ul><ol start="2"><li>大小为 5M 左右</li><li>仅在客户端使用，不和服务端进行通信</li><li>接口封装较好，属性和方法与 LocalStorage 完全一样。</li><li>a unique page session gets created and assigned to that particular tab</li></ol></li><li>使用场景<br>适合用来存储生命周期和它同步的会话级别的信息。这些信息只适用于当前会话，当你开启新的会话时，它也需要相应的更新或释放。<br>比如对表单信息进行维护，比如刷新时，表单信息不丢失。<br>比如微博的 sessionStorage 里有个 history 字段 里面是 json.stringify(pathArray) 就主要是存储你本次会话的浏览足迹</li><li>作用域<br>sessionStorage 比 localStorage 更严苛一点，除了协议、主机名、端口外，还要求在同一窗口（也就是浏览器的标签页）下</li><li>使用<br>CRUD 4 个操作同 localStorage</li></ul><h1 id="IndexedDB"><a href="#IndexedDB" class="headerlink" title="IndexedDB"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API">IndexedDB</a></h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory">https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory</a></p><p>是一种低级 API，用于客户端存储大量结构化数据(包括文件和 blobs)。<br>该 API 使用<strong>索引</strong>来实现对该数据的高性能搜索。<br>IndexedDB 是一个运行在浏览器上的<strong>非关系型 key-value 数据库</strong>。<br>理论上来说，IndexedDB 是没有存储上限的（一般来说不会小于 250M）。<br>它不仅可以存储字符串，还可以存储二进制数据。</p><ul><li><p>特点</p><ol><li>存储空间 一般不少于 250MB，甚至没有上限</li><li>key-value 存储： 所有类型可以直接存入。包括 object, 甚至<strong>二进制文件 Buffer</strong> <code>ArrayBuffer</code> 对象和 <code>Blob</code> 对象，见<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects#structured_data">MDN</a>。<em>相比<code>localStorage</code>直接以对象的形式存入，无需转为 JSON 字符串</em></li><li>异步 get &amp; set。因为目标场景就是<em>大量</em>数据的 CURD。当存储一个较大数据时，不会因为写入数据慢 导致页面阻塞</li><li>同源限制：一个数据库 correspond 创建它的域名。浏览器 tab 只能访问自身域名下的数据库(们)。IndexedDB 和 localStorage 一样，都是有同源策略的问题，不能跨协议、端口、域名使用。</li><li>支持事务。意味着 一系列操作步骤中，只要有一部失败，整个事务都会取消，数据库回滚到事务发生之前的状态，不存在只改写一部分的情况.能确保我们多个操作只要其中一步出现问题，可以整体回滚。</li></ol></li><li><p>操作方法<br>不是常用的<strong>调用方法 -&gt; 返回结果</strong>的模式。而是<strong>请求 -&gt; 响应</strong></p><ul><li>建立打开 IndexedDB <code>window.indexedDB.open(&quot;testDB&quot;)</code> 返回一个<a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBRequest">IDBRequest 对象</a><br><code>IDBRequest</code> 对象(inherits from from <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget">EventTarget</a>.) 包括几个属性 properties:<br>都是 read only<ul><li><code>.error</code></li><li><code>.result</code>: Returns the <strong>result of the request</strong>. 通常是个<a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase">IDBDatabase 对象</a> If the request failed and the result is not available, an InvalidStateError exception is thrown</li><li><code>.source</code>: Return the <strong>source of the request</strong>.比如一个 <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex">IDBIndex</a> 或 <a href="https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore">IDBObjectStore</a>. 没有的话就 null</li><li><code>.readyState</code>: Return the <strong>state of the request</strong>. 所有 IDBRequest 对象的 state 只有一种变化<code>pending -&gt; done</code>。whenever the request completes successfully or when an error occurs</li><li><code>.transaction</code>: 此次 request 处理的事务。（某些情况下是 null，比如<code>indexedDB.open</code>就只是 connecting to a database, so there is no transaction to return）<br>同时继承了<code>EventTarget</code>的三个方法： <code>addEventListener</code>, <code>removeEventListener</code> &amp; <code>dispatchEvent</code><br>两个事件 events</li><li><code>.onerror</code>: 请求失败的回调</li><li><code>.onsuccess</code>: 请求成功的回调</li><li><code>.onupgradeneeded</code>: 请求数据库版本变化的回调</li></ul></li><li>关闭 IndexedDB <code>indexdb.close()</code></li><li>删除 IndexedDB <code>window.indexedDB.deleteDatabase(indexdb)</code></li></ul></li><li><p>应用场景<br>缓存大数据，将数据缓存到本地，下次打开列表后，发现如果 url 中的 id 和缓存的数据 id 一致，那么就直接使用缓存数据，不再进行请求；</p></li></ul><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">openDB</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> request <span class="token operator">=</span> window<span class="token punctuation">.</span>indexedDB<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//建立打开IndexedDB</span>  request<span class="token punctuation">.</span>onerror <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"open indexdb error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  request<span class="token punctuation">.</span>onsuccess <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    myDB<span class="token punctuation">.</span>db <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这是一个 IDBDatabase对象，这就是IndexedDB对象</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myDB<span class="token punctuation">.</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此处就可以获取到db实例</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> myDB <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"testDB"</span><span class="token punctuation">,</span>  version<span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  db<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">openDB</span><span class="token punctuation">(</span>myDB<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise详解</title>
      <link href="/2021/05/23/za-tan-js-promise-xiang-jie/"/>
      <url>/2021/05/23/za-tan-js-promise-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>Promise 是 JS 对象,用于表示一个异步操作的最终完成 (或失败), 及其结果值</p><ul><li><code>new Promise((resolutionFunc, rejectionFunc): void =&gt;&#123; asynchronous operation &#125;)</code><br>returns a <strong>promise</strong> object. The promise object will be “fulfilled/rejected” when either of the functions resolutionFunc or rejectionFunc are invoked (比如<code>resolve(33)</code>直接返回的是<code>fulfilled-promise</code>;而<code>setTimeout(()=&gt;&#123;resolve(33)&#125;,1000)</code>直接返回的是<code>pendgin-promise</code>)<br>当 resolutionFunc 或 rejectionFunc 函数被调用时，它们分别对应 将 返回的 promise 变成<code>fulfilled</code> or <code>rejected</code>状态 需要执行的函数，接受一个 value 参数，作为.then(cb1,cb2) 的回调参数的入参<br>the code within the executor has the opportunity to perform some operation and then reflect the operation’s outcome (If the value is not another Promise object) as either “fulfilled” or “rejected” by terminating with an invocation of either the resolutionFunc or the rejectionFunc, respectively <em>别看 zh-CN 翻译 误导人</em><br><em>一个关于 event loop 的要点： ()内参数函数<code>(resolutionFunc, rejectionFunc): void =&gt;&#123; asynchronous operation &#125;</code> 是同步立即执行</em><a href="https://cloud.tencent.com/developer/article/1448150">从 Promise 对象讲解事件循环机制</a></li></ul><h2 id="promise-static-property"><a href="#promise-static-property" class="headerlink" title="promise static property"></a>promise static property</h2><ul><li><code>Promise.all(iterableArray)</code> <em>除 2 种特殊情况(空[]或不含 promise)外</em>返回一个 <strong>pending-promise</strong>: 所有都成功会触发 fulfilled(res 是数组)；否则 rejected 触发第一个失败的 promise 的 reject 回调</li><li><code>Promise.any(iterableArray)</code> <em>除 2 种特殊情况(空[]或不含 promise)外</em>返回一个 <strong>pending-promise</strong>: 第一个成功会触发 fulfilled(res 是第一个 promise 的 res)；都不成功的话才 返回异步失败和一个 <code>AggregateError</code> 对象</li><li><code>Promise.race(iterableArray)</code> 返回一个 <strong>pending-promise：</strong> fulfilled &amp; reject 都对应上第一个非 pending 状态的 promiseItem 的 fulfilled &amp; rejected</li><li><code>Promise.allSettled(iterableArray)</code> 返回一个<strong>数组</strong>，每个 item 对于 iterableArrayItem 的 <code>pending-promise</code>, 例： <code>[ &#123;status: &quot;fulfilled&quot;, value: 33&#125;, &#123;status: &quot;rejected&quot;, reason: Error: an error&#125; ]</code><br>常用于 批量请求多次 api 的 场景，比如：批量改变 table 多行，每行一个 patch 的 api</li></ul><hr><ul><li><p><code>Promise.resolve(promise / thenable-value / static-value)</code> 返回一个 <strong>fulfilled-promise</strong> <em><code>&#123;status: fulfilled, result: static-value / promise / thenable-value&#125;</code></em><br>例：<code>Promise.resolve(&#39;xxxx&#39;).then(res=&gt;&#123; console.log(res) &#125;) // &#39;xxxx&#39;</code> ；<br><em>一个常用应用场景是： 当一个 parameter 既可以接受 promise 又可以接受 static-value 的时候就用 Promise.resolve，如 <a href="https://github.com/Hojondo/react-dependent-form/blob/a139258674d1a6c13750b2500ac690cc9656315e/src/FieldAutoInput.tsx#L94">我的一开源项目用到</a></em></p><ul><li>如果是<code>thenable-value</code>比如(i.e. has a “then” method)，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve#resolving_thenables_and_throwing_errors">例</a><br><a href="https://masteringjs.io/tutorials/fundamentals/thenable">thenable definition</a></li><li>如果是<code>promise</code>，<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve#resolving_another_promise">例</a></li></ul></li><li><p><code>Promise.reject(reason)</code> 返回一个 <strong>rejected-promise</strong>，例: <code>Promise.reject(new Error(&#39;fail&#39;)).then(resolved, (result) &#123; console.error(result) &#125;); // Error: fail</code></p></li></ul><h2 id="promise-实例-原型属性"><a href="#promise-实例-原型属性" class="headerlink" title="promise 实例/原型属性"></a>promise 实例/原型属性</h2><ul><li><code>promiseXX.then(onFulfilled, onRejected)</code><ul><li>两个函参<code>handler(param: promise.result):any</code>分别对应 this 的状态变化目标值触发的回调，其回调参数都有保底动作，一旦其不是个函数类型，内部会转换成<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then#parameters">标准</a></li><li>返回值是个 <strong>Promise</strong>,根据**then()**中的<code>onFulfilled 或 onRejected</code>函数的 return 分几种情况（以下以触发了 onFulfilled 为 assumption）：<em>这样就实现了 then 的链式调用</em><ul><li><code>handler(param): !Promise</code>: <code>&#123;status: fulfilled, result: resolve()-return-value&#125;</code></li><li><code>handler(param): void</code>: <code>&#123;status: fulfilled, result: undefined&#125;</code></li><li><code>handler(param): throw error</code>: <code>&#123;status: rejected, result: error&#125;</code></li><li><code>handler(param): fulfilled-promise</code>: <code>&#123;status: fulfilled, result: promise&#39;s-fulfilled-value&#125;</code></li><li><code>handler(param): rejected-promise</code>: <code>&#123;status: rejected, result: promise&#39;s-rejected-value&#125;</code></li><li><code>handler(param): pending-promise</code>: <code>&#123;status: pending, result: promise-fulfilled/rejected-value&#125;</code> // 见例 1</li></ul></li></ul></li><li><code>promiseXX.catch()</code><br>返回值是 <strong>Promise</strong> and deals with rejected cases only. 可以部分理解成是 .then(null,onrejected)的别名.<br>根据 dot 前的<code>promiseXX</code>的返回值 promise 状态 是否是 <code>rejected</code> 来确定 trigger the catch<br><code>obj.catch(onRejected)</code> 实际上内部调用了 <code>obj.then(undefined, onRejected))</code>，所以使用 catch 的 onRejected 回调参数是 required<br>返回的 promise 状态：<ul><li>如果 catch 被触发了，其返回值 同 .then(_, onRejected) 对 onRejected 的判断逻辑，</li><li>否则返回 promiseXX <em>因为压根没 excute 到 catch 之后的代码</em></li></ul></li><li><code>promiseXX.finally()</code>： 不管 Promise 对象最后状态如何，都会执行的操作<br>返回值是 <code>promiseXX</code>自身。见例 2<br>和.then()类似，但是有一个很大的不同点在于：return 的<code>fulfilled/rejected-promise</code>的<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally#description"><strong>result</strong></a><br>应用场景是：do some processing or cleanup once the promise is settled, regardless of its outcome</li></ul><p>例 1：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> ppp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"xx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">res</span><span class="token punctuation">(</span><span class="token string">"aaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">12000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ppp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Promise {&lt;pending>} { [[PromiseState]]: "pending", [[PromiseResult]]: undefined }</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>例 2</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> an <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bb <span class="token operator">=</span> an<span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>an<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后 Promise {&lt;fulfilled>}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>an<span class="token punctuation">,</span> bb<span class="token punctuation">,</span> an <span class="token operator">===</span> bb<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 先 Promise {&lt;fulfilled>}, Promise {&lt;pending>}, false</span></code></pre><h2 id="Promise-相比-callback-解决了什么问题"><a href="#Promise-相比-callback-解决了什么问题" class="headerlink" title="Promise 相比 callback 解决了什么问题"></a><a href="https://cloud.tencent.com/developer/article/1610004">Promise 相比 callback 解决了什么问题</a></h2><ul><li>可靠可信，promise 是原生支持的，相比自己实现的 让第三方函数内部逻辑判断 callback 的方式要可靠，promise 对象的状态 只能单向改变不可逆</li><li>多个相关 callback 嵌套的回调地狱，难以管理和 human-readable，promise 通过 .then 将代码 dock 在第一个异步命令上</li><li>Promise 给 JS 带来了不一样的异步编程方式，但它本质上还是 callback，但是其特点是：<br>把一个个异步操作分别封装成合适的返回 Promise 的函数之后，我们可以借助 Promise 的特性来将一个一个异步操作函数组合起来，形成一个 Promise chain，这时才能发挥 Promise 的最大作用<br><a href="https://github.com/NevenLeung/blog/issues/1">https://github.com/NevenLeung/blog/issues/1</a></li></ul><h2 id="promise-的-reject-回调和-catch-的区别"><a href="#promise-的-reject-回调和-catch-的区别" class="headerlink" title="promise 的 reject 回调和 catch 的区别:"></a><a href="https://www.css3.io/promise-catch-vs-reject.html">promise 的 reject 回调和 catch 的区别</a>:</h2><p>其实 reject 跟 catch 是一个东西，当同步的情况下，无论 throw 还是 reject 都会执行 onRejected 调用。区别在于 throw 不能用于异步调用中<br>比如<code>new Promise((res,reject)=&gt;&#123;setTimeout(()=&gt;&#123;throw &#39;xxx&#39;&#125;, 1000)&#125;).catch(funError)</code>不会触发 funError 被 catch 捕获，因为.catch 前的 variable 就永远是个 <strong>pending-promise</strong> （Promise Constructor 函参压根执行没有<code>res</code>或<code>reject</code>）<br>而 <code>new Promise((res,reject)=&gt;&#123;setTimeout(()=&gt;&#123;reject &#39;xxx&#39;&#125;, 1000)&#125;).catch(funError)</code>会触发 funError</p><h1 id="手写-Promise"><a href="#手写-Promise" class="headerlink" title="手写 Promise"></a>手写 Promise</h1><p><a href="https://github.com/Hojondo/utils/blob/master/fake_promise.js">https://github.com/Hojondo/utils/blob/master/fake_promise.js</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数式编程语言 Haskell</title>
      <link href="/2021/05/20/bi-ji-haskell/"/>
      <url>/2021/05/20/bi-ji-haskell/</url>
      
        <content type="html"><![CDATA[<p>Haskell 与副作用斗争过程中的一个方式就是使用类型。它将所有的副作用都推进类型系统。</p><blockquote><p><a href="https://www.haskell.org/">https://www.haskell.org/</a>  </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 函数式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window全局对象</title>
      <link href="/2021/05/12/za-tan-js-window-quan-ju-dui-xiang/"/>
      <url>/2021/05/12/za-tan-js-window-quan-ju-dui-xiang/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope">https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">https://developer.mozilla.org/en-US/docs/Web/API/Window</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> webAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指针事件 pointer event</title>
      <link href="/2021/05/12/za-tan-js-zhi-zhen-shi-jian/"/>
      <url>/2021/05/12/za-tan-js-zhi-zhen-shi-jian/</url>
      
        <content type="html"><![CDATA[<p>同时维护两份分别处理鼠标事件<code>mouseXXX</code>和触摸事件<code>ontouchXXX</code>的代码，显得有些笨重了。</p><p>为了解决这些问题，人们引入了全新的规范「指针事件」。它为各种指针输入设备提供了一套统一的事件</p><p><a href="https://zh.javascript.info/pointer-events">https://zh.javascript.info/pointer-events</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端性能优化小结</title>
      <link href="/2021/05/12/bi-ji-qian-duan-xing-neng-you-hua/"/>
      <url>/2021/05/12/bi-ji-qian-duan-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<p>Dev Tools 的<strong>Audit</strong> 工具获得网站的多个指标的性能报告；<strong>Performance</strong> 工具测试网站的性能瓶颈；</p><p>JS 更偏向于<strong>解释型语言</strong>。V8 引擎下，又引入了 <code>TurboFan</code> 编译器，他会在特定的情况下进行优化，将代码编译成执行效率更高的 <strong>Machine Code</strong>。</p><p>在编译这一过程中，JS 代码首先会解析为**抽象语法树 AST(Abstract Syntax Tree)**（这一过程较慢，代码越多解析耗时越长），然后会通过解释器或者编译器转化为 <strong>Bytecode</strong> 或者 <strong>Machine Code</strong>。<em>避免声明嵌套函数，因为这样会造成函数的重复解析</em></p><p>性能优化方面：</p><ol><li>图片优化：<ol><li>减小图片大小：设计师 减少图片像素值；每个像素点能够显示的颜色</li><li>图片加载优化：css 代替纯色或渐变图；图片用 CDN 计算好屏幕尺寸加载对应尺寸图片；base64；雪碧图；合适的图片格式如优先 WebP，小图用 png，图标可用 svg，照片用 jpg</li></ol></li><li>CDN：原理是尽可能的在各个地方分布机房缓存数据。将静态资源尽量使用 CDN 加载，由于浏览器对于单个域名有并发请求上限，可以考虑使用多个 CDN 域名。 CDN 域名要与主站不同避免请求时带上主站的 Cookie</li><li>DNS 预解析：<code>&lt;link rel=&quot;dns-prefetch&quot; href=&quot;//yuchengkai.cn&quot;&gt;</code></li><li>防抖：用户点击按钮一段时间后没有再次点击的情况才去发起网络请求，通过<code>setTimeout和clearTimeout</code></li><li>节流：比如滚动加载更多的 API 请求场景下，通过<code>setInterval</code>内<code>两次new Date()比差值</code>设置隔一段时间发起一次请求</li><li>预加载：指定页面加载后很快会被用到的资源。声明式的 <code>fetch</code> ，强制浏览器请求资源，并且不会阻塞 <code>onload</code> 事件<code>&lt;link rel=&quot;preload&quot; href=&quot;http://example.com&quot;&gt;</code><em>常用于首屏优化</em></li><li>预渲染：要确保某页面大概率会被用户在之后打开的前提下预先后天渲染<code>&lt;link rel=&quot;prerender&quot; href=&quot;http://example.com&quot;&gt;</code></li><li>懒执行：将某些逻辑延迟到使用时再计算，懒执行需要唤醒，可以通过定时器或者事件的调用来唤醒。<em>常用于首屏优化</em></li><li>懒加载：将不关键的资源延后加载。比如图片，先设置图片标签的 <code>src</code> 属性为一张小尺寸占位图，将真实的图片资源放入一个自定义属性<code>data-mySrc</code>中，当<code>img</code>进入可视区域时，就将自定义属性替换为 <code>src</code> 属性，这样图片就会去下载资源，实现了图片懒加载。同理视频等</li><li>html-css层面 要尽量避免重排<code>reflow</code>，减少重绘<code>repaint</code>,甚至可以使用css3的<a href="https://juejin.cn/post/6958990366888607757">containe</a>来强制控制</li></ol><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><p>一般我们都会让图片懒加载，让一个图片一开始在页面中的标签为<br><code>&lt;img src=&quot;#&quot; data-src=&quot;我是真正的src&quot;&gt;</code><br>当我屏幕滚动到能显示这个 img 标签的位置时，我用 data-src 去替换 src 的内容，变为<br><code>&lt;img src=&quot;我是真正的src&quot; data-src=&quot;我是真正的src&quot;&gt;</code><br>大家都知道如果直接改变 src 的话浏览器也会直接发出一个请求，在红宝书(JS 高程)里面的跨域部分还提了一下用 img 标签的 src 做跨域。这时候图片才会显示出来。<br>判断一个元素出现在屏幕中的，大家可以去看看这个函数<code>getBoundingClientRect()</code><br>同时，要检测元素是否在浏览器内，肯定要在<code>scroll</code>事件上绑定检测函数，scroll函数和resize函数一样，滑动一下事件触发几十上百次。。。这种势必要用到节流<code>throttle</code></p><h2 id="防抖debounce-和-节流throttle"><a href="#防抖debounce-和-节流throttle" class="headerlink" title="防抖debounce 和 节流throttle"></a>防抖debounce 和 节流throttle</h2><p><a href="https://github.com/Hojondo/utils/blob/master/debounce_throttle.js">源码见这里</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[35 条前端性能优化军规]<a href="https://learnku.com/docs/f2e-performance-rules/avoid-css-expressions/6377">https://learnku.com/docs/f2e-performance-rules/avoid-css-expressions/6377</a></p><p><a href="https://zh.javascript.info/onscroll">onscroll 加载图片</a> &amp; <a href="https://plnkr.co/edit/iVS9wdnIqMQttZFP?p=preview&preview">codepen</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web Component</title>
      <link href="/2021/05/11/bi-ji-web-component/"/>
      <url>/2021/05/11/bi-ji-web-component/</url>
      
        <content type="html"><![CDATA[<ul><li><code>window.customElements.define(&#39;xx-xxx&#39;, ComponentName)</code> &amp; <code>class ComponentName extends HTMLElement&#123;&#125;</code></li><li><code>&lt;template&gt;&lt;/template&gt;</code></li><li>document.getElementByTagName(‘template’).content.cloneNode(true)</li><li><code>&lt;style&gt; :host&#123;&#125;&lt;/style&gt;</code> :host伪类，指代自定义元素本身。</li><li><code>&lt;user-card image=&quot;urlxxx&quot;&gt;&lt;/user-card&gt;</code>&amp; class ComponentName中：<code>this.getAttribute(&#39;image&#39;)</code></li><li>class 内部 <code>this.attachShadow( &#123; mode: &#39;closed&#39; &#125; );</code>开启 <code>Shadow DOM</code>，将组件内部代码隐藏起来 不允许外部访问</li></ul><p><a href="http://www.ruanyifeng.com/blog/2019/08/web_components.html">http://www.ruanyifeng.com/blog/2019/08/web_components.html</a><br><a href="https://github.com/ionic-team/stencil">https://github.com/ionic-team/stencil</a><br><a href="https://www.zhihu.com/question/58731753">Web Component 和类 vue 组件化技术谁会成为未来？</a></p><p>相关文章：vite 通过web import</p><blockquote><p>不幸的是，「规范」永远都是<del>落后</del>保守的。不论是功能覆盖、API 设计还是可塑性。作为「规范」，这种取舍也是正确的。对于 Web 组件话方案而言，从 Angular、React 和 Vue 中任选一个，都能获得比「规范」所提供的方案更多的功能、更快的反馈周期和更高的自主性。所以，在同样需要 Compilation 和 Polyfill 的情况下，何乐而不为呢？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> webAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Immutable.js 函数式编程化</title>
      <link href="/2021/05/08/bi-ji-js-immutable/"/>
      <url>/2021/05/08/bi-ji-js-immutable/</url>
      
        <content type="html"><![CDATA[<p>函数式语言的定义是： 函数式语言会帮你消除副作用，不能消除时会控制副作用。<br>JavaScript 不是函数式编程语言（其实属于没有明确归类的语言，或者好听点叫“多范式语言”）。最明显的就是 this。这个隐含输入存在每一个函数里。特别不可思议的是 this 的含义改变的是那么任性。即使是 JavaScript 专家也会在定位 this 当前所指对象时遇到困难。从函数式的角度看，this 的神出鬼没应该算设计上的一个败笔。<br>但是可以使用 JavaScript 的函数式编程库（例如，Immutable.js），轻松将编程变成函数式风格</p><blockquote><p><a href="https://zhuanlan.zhihu.com/p/30332464">https://zhuanlan.zhihu.com/p/30332464</a><br><a href="https://shiningdan.github.io/2018/01/30/Immutable-js-%E5%85%A5%E9%97%A8/">https://shiningdan.github.io/2018/01/30/Immutable-js-%E5%85%A5%E9%97%A8/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webWorker</title>
      <link href="/2021/05/08/bi-ji-wang-luo-webworker/"/>
      <url>/2021/05/08/bi-ji-wang-luo-webworker/</url>
      
        <content type="html"><![CDATA[<h1 id="Foreword"><a href="#Foreword" class="headerlink" title="Foreword"></a>Foreword</h1><p>JavaScript 作为浏览器脚本语言，被定义为了只有单线程的语言，也就是同一时间只能做同一事情。<br>如果 JavaScript 不是单线程，那么就有点棘手了。比如，与用户交互或者对 DOM 进行操作时，在一个线程上修改某个 DOM，另外的线程删除 DOM，这就会造成冲突。<br>但是在 HTML5 中引入了 webWorker 的概念，为 JavaScript 引入了线程的概念，它允许开发人员编写能够长时间运行而不被用户所中断的后台程序，去执行事务或者逻辑，并同时保证页面对用户的响应。<br>但是子线程完全受主线程控制，且不得修改 DOM。<br><strong>所以一般情况下 webWorker 的主要用途是处理一些比较耗时的计算</strong></p><h1 id="Service-worker"><a href="#Service-worker" class="headerlink" title="Service worker"></a>Service worker</h1>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native</title>
      <link href="/2021/05/01/bi-ji-react-native/"/>
      <url>/2021/05/01/bi-ji-react-native/</url>
      
        <content type="html"><![CDATA[<p><a href="https://reactnative.dev/docs/getting-started">官网</a></p><p><a href="https://www.zhihu.com/question/385373552">weex、cordova、flutter、react-native、uniapp 对比</a><br><a href="https://zhuanlan.zhihu.com/p/103409129">https://zhuanlan.zhihu.com/p/103409129</a></p><h2 id="Core-Components"><a href="#Core-Components" class="headerlink" title="Core Components"></a>Core Components</h2><p><a href="https://reactnative.dev/docs/components-and-apis">文档</a></p><h3 id="最常用的-native-组件"><a href="#最常用的-native-组件" class="headerlink" title="最常用的 native 组件"></a>最常用的 native 组件</h3><table><thead><tr><th align="left">REACT NATIVE UI COMPONENT</th><th align="left">ANDROID VIEW</th><th align="left">IOS VIEW</th><th align="left">WEB ANALOG</th><th align="left">DESCRIPTION</th></tr></thead><tbody><tr><td align="left"><code>&lt;View&gt;</code></td><td align="left"><code>&lt;ViewGroup&gt;</code></td><td align="left"><code>&lt;UIView&gt;</code></td><td align="left">A non-scrollling <code>&lt;div&gt;</code></td><td align="left">A container that supports layout with flexbox, style, some touch handling, and accessibility controls</td></tr><tr><td align="left"><code>&lt;Text&gt;</code></td><td align="left"><code>&lt;TextView&gt;</code></td><td align="left"><code>&lt;UITextView&gt;</code></td><td align="left"><code>&lt;p&gt;</code></td><td align="left">Displays, styles, and nests strings of text and even handles touch events</td></tr><tr><td align="left"><code>&lt;Image&gt;</code></td><td align="left"><code>&lt;ImageView&gt;</code></td><td align="left"><code>&lt;UIImageView&gt;</code></td><td align="left"><code>&lt;img&gt;</code></td><td align="left">Displays different types of images</td></tr><tr><td align="left"><code>&lt;ScrollView&gt;</code></td><td align="left"><code>&lt;ScrollView&gt;</code></td><td align="left"><code>&lt;UIScrollView&gt;</code></td><td align="left"><code>&lt;div&gt;</code></td><td align="left">A generic scrolling container that can contain multiple components and views</td></tr><tr><td align="left"><code>&lt;TextInput&gt;</code></td><td align="left"><code>&lt;EditText&gt;</code></td><td align="left"><code>&lt;UITextField&gt;</code></td><td align="left"><code>&lt;input type=&quot;text&quot;&gt;</code></td><td align="left">Allows the user to enter text</td></tr></tbody></table><h3 id="基本组件-Basic"><a href="#基本组件-Basic" class="headerlink" title="基本组件 Basic"></a>基本组件 Basic</h3><ul><li><a href="https://reactnative.dev/docs/scrollview">ScrollView</a>: 在 IOS 设置<code>maximumZoomScale</code> &amp; <code>minimumZoomScale</code>可以放大缩小；<code>pagingEnabled</code>实现 scroll 变整页滑动；默认在 layout 实现上 类似 html 的<code>div&#123;flex: 0, maxHeight: 100vh&#125;</code></li><li><a href="https://reactnative.dev/docs/view">View</a></li><li><a href="https://reactnative.dev/docs/text">Text</a></li><li><a href="https://reactnative.dev/docs/image">Image</a></li><li><a href="https://reactnative.dev/docs/textinput">TextInput</a></li><li><a href="https://reactnative.dev/docs/stylesheet">StyleSheet</a>: <code>StyleSheet.create(&#123; xxx css obj&#125;)</code></li><li>[ImageBackground]: props as <code>Image</code>, mean as <code>background-image</code></li></ul><h3 id="用户界面-User-Interface"><a href="#用户界面-User-Interface" class="headerlink" title="用户界面 User Interface"></a>用户界面 User Interface</h3><ul><li><p><a href="https://reactnative.dev/docs/button">Button</a></p></li><li><p><a href="">TouchableHighlight</a>: 包裹仅一个 ElementNode，点击后 backgroundColor 加深 <em>建议替代为 Pressable</em></p></li><li><p><a href="">TouchableOpacity</a>: 包裹 children，点击后 backgroundColor 变浅（加大透明度）<em>建议替代为 Pressable</em></p></li><li><p><a href="">TouchableWithoutFeedback</a>: 包裹仅一个 ElementNode，没有交互 styles and effects <em>建议替代为 Pressable</em></p></li><li><p><a href="https://reactnative.dev/docs/pressable">Pressable</a>: 包裹 children，使其(该 tag)类似 button 具有按压事件：<code>onPressIn</code> &amp; <code>onLongPress</code> &amp; <code>onPressOut</code> &amp; <code>onPress</code>等</p></li><li><p><a href="https://reactnative.dev/docs/switch">Switch</a></p></li></ul><p><a href="https://medium.com/@mahyarmohammadi/react-native-pressable-vs-touchable-5fec6b332f15">对比 Pressable 和 Touchable</a></p><h3 id="列表-List-Views"><a href="#列表-List-Views" class="headerlink" title="列表 List Views"></a>列表 List Views</h3><ul><li><a href="https://reactnative.dev/docs/flatlist">FlatList</a>: <code>&lt;FlatList data=&#123;dataArray&#125; renderItem=&#123;renderItem&#125; keyExtractor=&#123;item =&gt; item.id&#125; onPress=&#123;fn&#125; /&gt;</code> 内部实现了虚拟列表 virtual-scrolling</li><li><a href="https://reactnative.dev/docs/sectionlist">SectionList</a>: <code>&lt;SectionList renderSectionHeader=&#123;renderHeader&#125; sections=&#123;dataArrayNested&#125; renderItem=&#123;renderItem&#125; keyExtractor=&#123;item =&gt; item.id&#125; onPress=&#123;fn&#125; /&gt;</code> 相比 FlatList 多了 header 和一层分组</li><li><a href="">VirtualizedList</a>:</li></ul><p>性能上：因为虚拟列表的原因每次 scroll 都是新的 item render 尽量避免在<code>renderItem</code>中计算；在<code>renderItemComp</code>内尽量拆分 props；<code>renderItemComp extends PureComponent</code>；as simple as possible</p><h3 id="安卓特有-Android"><a href="#安卓特有-Android" class="headerlink" title="安卓特有 Android"></a>安卓特有 Android</h3><ul><li><a href="https://reactnative.dev/docs/backhandler">API - BackHandler</a>: <code>BackHandler.addEventListener(&#39;target&#39;, function()&#123; return true/false&#125;)</code> <em>订阅栈 监听用户后退点击物理按键后退键动作，后 register 的先 trigger</em> return true 即 preventDefault 安卓退出操作</li><li><a href="https://reactnative.dev/docs/drawerlayoutandroid">DrawerLayoutAndroid</a>: rendered with renderNavigationView and direct children are the main view (where your content goes).</li><li><a href="https://reactnative.dev/docs/permissionsandroid">API - PermissionsAndroid</a>: <code>const granted = await PermissionsAndroid.request(PermissionsAndroid.PERMISSIONS.CAMERA, optionalObj); if (granted === PermissionsAndroid.RESULTS.GRANTED)&#123;...&#125;</code> <em><a href="https://reactnative.dev/docs/permissionsandroid#permissions-that-require-prompting-the-user">所有可选权限</a></em></li><li><a href="https://reactnative.dev/docs/toastandroid">API - ToastAndroid</a>: 安卓原生提示冒泡框 <code>ToastAndroid.showWithGravity(&#39;msg&#39;, ToastAndroid.SHORT, ToastAndroid.CENTER)</code> ,<a href="https://reactnative.dev/docs/toastandroid#imperative-hack">命令式 改 组件式 调用 例子</a></li><li><a href="">TouchableNativeFeedback</a>: 安卓原生按钮 <em>建议替代为 Pressable</em></li></ul><h3 id="ios-特有-IOS"><a href="#ios-特有-IOS" class="headerlink" title="ios 特有 IOS"></a>ios 特有 IOS</h3><ul><li><a href="https://reactnative.dev/docs/actionsheetios">API - ActionSheettIOS</a>: IOS 的下弹选项列 <code>ActionSheetIOS.showActionSheetWithOptions(options, callback)</code></li><li><a href="https://reactnative.dev/docs/safeareaview">SafeAreaView</a>: 解决 刘海屏等 safe area boundaries 适配问题</li><li><a href="https://reactnative.dev/docs/inputaccessoryview">InputAccessoryView</a>: 一个只在出现输入法的情况下才显示的 toolbar，<code>InputAccessoryView的nativeID</code> 对应 <code>TextInput的inputAccessoryViewID</code>对其进行操作</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="https://reactnative.dev/docs/activityindicator">ActivityIndicator</a>: loading icon</li><li><a href="https://reactnative.dev/docs/alert">Alert</a>: <code>Alert.alert(title, message?, buttonsConfigArray?, options?)</code></li><li><a href="https://reactnative.dev/docs/animated">Animated</a>: using <code>Animated.timing()</code> updates <code>Animated.Value</code>, 例子：<code>const fadeAnim = useRef(new Animated.Value(0)).current; const fadeIn = () =&gt; &#123; Animated.timing(fadeAnim, &#123;toValue: 1, duration: 1000&#125;).start() &#125;; const fadeOut = () =&gt; &#123; Animated.timing(fadeAnim, &#123;toValue: 0, duration: 1000&#125;).start() &#125;</code></li><li><a href="https://reactnative.dev/docs/dimensions">Dimensions</a>: <code>Dimensions.addEventListener(&quot;change&quot;, (&#123; window, screen &#125;)=&gt;&#123; setDimensions(&#123; window, screen &#125;) &#125;)</code>, <code>Dimensions.get(&#39;window&#39;).height</code> 这里的 window 更推荐使用<code>useWindowDimensions</code></li><li><a href="https://reactnative.dev/docs/keyboardavoidingview">KeyboardAvoidingView</a>: 当自带输入法出现时，该 view 自动收缩 based on the keyboard height. <code>&lt;KeyboardAvoidingView&gt;&lt;TouchableWithoutFeedback onPress=&#123;Keyboard.dismiss&#125;&gt;放置需要根据键盘调整位置的组件&lt;/TouchableWithoutFeedback&gt;&lt;/KeyboardAvoidingView&gt;</code> <em>配合 flex</em></li><li><a href="https://reactnative.dev/docs/linking">Linking</a>: 对应安卓的<code>Deep Links</code> 和 IOS 的<code>Universal Links</code>,可以根据 url 跳转其他 app</li><li><a href="https://reactnative.dev/docs/modal">Modal</a>:</li><li><a href="https://reactnative.dev/docs/pixelratio">PixelRatio</a>: 返回设备的像素分辨率 和 缩放大小。<code>PixelRatio.getPixelSizeForLayoutSize(layoutSize: number): number</code> 返回<code>PixelRatio.get() * layoutSize</code>把 dp 单位转为 px <em>roundToNearestPixel 相比这个 返回值会 Math.round 取整</em></li><li><a href="https://reactnative.dev/docs/refreshcontrol">RefreshControl</a>: 刷新 icon</li><li><a href="https://reactnative.dev/docs/statusbar">StatusBar</a>: 控制手机顶端的状态栏，显示隐藏和样式 <em>虽然也有 Imperative API 但是不建议使用 因为全局</em></li></ul><h3 id="一些-native-组件可接受的-style-有一定限制"><a href="#一些-native-组件可接受的-style-有一定限制" class="headerlink" title="一些 native 组件可接受的 style 有一定限制"></a>一些 native 组件可接受的 style 有一定限制</h3><ul><li><a href="https://reactnative.dev/docs/image-style-props">https://reactnative.dev/docs/image-style-props</a></li><li><a href="https://reactnative.dev/docs/text-style-props">https://reactnative.dev/docs/text-style-props</a><br>…</li></ul><h2 id="跨端实现"><a href="#跨端实现" class="headerlink" title="跨端实现"></a>跨端实现</h2><h3 id="Platform-模块"><a href="#Platform-模块" class="headerlink" title="Platform 模块"></a>Platform 模块</h3><ul><li><code>Platform.OS</code> : ‘ios’ / ‘android’</li><li><code>Platform.select(&#123;key: returnedContent&#125;)</code> : ios / android / native / default</li><li><code>Platform.Version</code> :s</li><li>文件后缀 自动(即 Platform.select 后台进程实现)识别 ‘XX.ios.js’ / ‘XX.android.js’， <code>import XX from &#39;./XX&#39;;</code><br><code>Container.js</code> # picked up by Webpack, Rollup or any other Web bundler<br><code>Container.native.js</code> # picked up by the React Native bundler for both Android and iOS (Metro), Configure your Web bundler to ignore .native.js 减少 bundle 体积</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Platform<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-native"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Component <span class="token operator">=</span> Platform<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  ios<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ComponentIOS"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  android<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ComponentAndroid"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  native<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ComponentForNative"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ComponentForWeb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> majorVersionIOS <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Platform<span class="token punctuation">.</span>Version<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对ios version 取整</span><span class="token keyword">return</span> <span class="token operator">&lt;</span>Component <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  container<span class="token punctuation">:</span> <span class="token punctuation">{</span>    height<span class="token punctuation">:</span> Platform<span class="token punctuation">.</span>OS <span class="token operator">===</span> <span class="token string">"ios"</span> <span class="token operator">?</span> <span class="token number">200</span> <span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 'android'</span>    flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token operator">...</span>Platform<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      ios<span class="token punctuation">:</span> <span class="token punctuation">{</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      android<span class="token punctuation">:</span> <span class="token punctuation">{</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">"green"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// other platforms, web for example</span>        backgroundColor<span class="token punctuation">:</span> <span class="token string">"blue"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="开发辅助工具"><a href="#开发辅助工具" class="headerlink" title="开发辅助工具"></a>开发辅助工具</h2><ul><li>构建方式：<ol><li><code>react-native-cli</code> 配合 <code>Android Studio</code>和<code>Xcode</code>: <code>npm install -g react-native-cli</code> &amp; <code>react-native init demo</code> &amp; <code>react-native run-ios</code></li><li><code>expo</code> 的 <code>npm install -g expo-cli</code> &amp; <code>expo init</code> &amp; <code>npm run android</code></li></ol></li><li>一个 popular boilerplat 脚手架 模版 <a href="https://shift.infinite.red/creating-a-trivia-app-with-ignite-bowser-part-1-1987cc6e93a1">ignite</a> <code>npm i ignite-cli -g</code> <code>npx ignite-cli new PizzaApp --expo</code> <a href="https://www.jianshu.com/p/cb8dc64e650a">https://www.jianshu.com/p/cb8dc64e650a</a><ul><li><a href="https://stackoverflow.com/questions/39170622/what-is-the-difference-between-expo-and-react-native">expo vs ignite</a></li><li><a href="https://juejin.cn/post/6844903599793766413">几种脚手架对比 react-native-cli、create-react-native-app、expo</a></li><li><a href="https://segmentfault.com/a/1190000018768848">Expo，React Native CLI，CocoaPods</a></li></ul></li><li>一个 RN 专用 在线 IDE<a href="https://snack.expo.io/">snack</a></li><li>RN 的<a href="https://reactnative.directory/">NPM</a></li><li>一个傻瓜<a href="https://segmentfault.com/a/1190000016272845">教程</a></li><li><a href="https://www.infoq.cn/article/2018/08/18-11-react-native-componetlib">推荐组件库</a></li><li><a href="https://github.com/jhen0409/react-native-debugger">debugger</a></li><li><a href="https://fbflipper.com/">推荐的 IDE</a></li></ul><h1 id="嗯哼"><a href="#嗯哼" class="headerlink" title="嗯哼"></a>嗯哼</h1><blockquote><p><a href="https://www.izhaoo.com/2020/06/25/rn-adapt-to-full-screen/">全面屏适配方案</a>:<code>Dimensions.get(&#39;window&#39;).height + StatusBar.currentHeight</code>&amp; 判断纵横比1.8<br><a href="https://segmentfault.com/a/1190000021258428">https://segmentfault.com/a/1190000021258428</a><br><a href="https://learnku.com/articles/40958">rn 的 fetch</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React源码拜读</title>
      <link href="/2021/05/01/bi-ji-react-yuan-ma-bai-du/"/>
      <url>/2021/05/01/bi-ji-react-yuan-ma-bai-du/</url>
      
        <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p><a href="https://zh-hans.reactjs.org/docs/codebase-overview.html">官网 guide</a></p><h2 id="React-core"><a href="#React-core" class="headerlink" title="React-core"></a><a href="https://zh-hans.reactjs.org/docs/codebase-overview.html#react-core">React-core</a></h2><p>React 早期口号是 <code>Rethinking Best Practices</code>(重新思考最佳实践)。背靠 Facebook 的 React，从开始起就不缺关注和用户，而且 React 想要做的是用更好的方式去颠覆前端开发方式（事实上跟早期 jquery 称霸前端，的确是颠覆了）。所以 React 推崇函数式编程（纯组件），数据不可变以及单向数据流。函数式编程最大的好处是其稳定性（无副作用）和可测试性（输入相同，输出一定相同），所以通常大家说的 React 适合大型应用，根本原因还是在于其函数式编程。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> React <span class="token operator">=</span> <span class="token punctuation">{</span>  Children<span class="token punctuation">:</span> <span class="token punctuation">{</span>    map<span class="token punctuation">,</span>    forEach<span class="token punctuation">,</span>    count<span class="token punctuation">,</span>    toArray<span class="token punctuation">,</span>    only<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  createRef<span class="token punctuation">,</span>  Component<span class="token punctuation">,</span>  PureComponent<span class="token punctuation">,</span>  createContext<span class="token punctuation">,</span>  forwardRef<span class="token punctuation">,</span>  lazy<span class="token punctuation">,</span>  memo<span class="token punctuation">,</span>  error<span class="token punctuation">,</span>  warn<span class="token punctuation">,</span>  useCallback<span class="token punctuation">,</span>  useContext<span class="token punctuation">,</span>  useEffect<span class="token punctuation">,</span>  useImperativeHandle<span class="token punctuation">,</span>  useDebugValue<span class="token punctuation">,</span>  useLayoutEffect<span class="token punctuation">,</span>  useMemo<span class="token punctuation">,</span>  useReducer<span class="token punctuation">,</span>  useRef<span class="token punctuation">,</span>  useState<span class="token punctuation">,</span>  Fragment<span class="token punctuation">:</span> REACT_FRAGMENT_TYPE<span class="token punctuation">,</span>  Profiler<span class="token punctuation">:</span> REACT_PROFILER_TYPE<span class="token punctuation">,</span>  StrictMode<span class="token punctuation">:</span> REACT_STRICT_MODE_TYPE<span class="token punctuation">,</span>  Suspense<span class="token punctuation">:</span> REACT_SUSPENSE_TYPE<span class="token punctuation">,</span>  createElement<span class="token punctuation">:</span> __DEV__ <span class="token operator">?</span> createElementWithValidation <span class="token punctuation">:</span> createElement<span class="token punctuation">,</span>  cloneElement<span class="token punctuation">:</span> __DEV__ <span class="token operator">?</span> cloneElementWithValidation <span class="token punctuation">:</span> cloneElement<span class="token punctuation">,</span>  createFactory<span class="token punctuation">:</span> __DEV__ <span class="token operator">?</span> createFactoryWithValidation <span class="token punctuation">:</span> createFactory<span class="token punctuation">,</span>  isValidElement<span class="token punctuation">:</span> isValidElement<span class="token punctuation">,</span>  version<span class="token punctuation">:</span> ReactVersion<span class="token punctuation">,</span>  unstable_ConcurrentMode<span class="token punctuation">:</span> REACT_CONCURRENT_MODE_TYPE<span class="token punctuation">,</span>  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED<span class="token punctuation">:</span> ReactSharedInternals<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> React<span class="token punctuation">;</span></code></pre><h3 id="ReactElement-js"><a href="#ReactElement-js" class="headerlink" title="ReactElement.js"></a>ReactElement.js</h3><p>JSX 代码会被 Babel 编译为 <code>React.createElement</code>，不引入 React 的话就不能使用 <code>React.createElement</code> 了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createElement</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> config<span class="token punctuation">,</span> <span class="token operator">...</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  判断 <span class="token punctuation">{</span>key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> __self<span class="token punctuation">,</span> __source<span class="token punctuation">}</span> <span class="token operator">=</span> config，各自赋值给同名变量  然后 <span class="token template-string"><span class="token string">`hasOwnProperty.call(config, propName) &amp;&amp; !RESERVED_PROPS.hasOwnProperty(propName)`</span></span>剔除出去这四个内建属性，往props塞 <span class="token operator">...</span>config  判断 <span class="token template-string"><span class="token string">`childrenLength = arguments.length - 2`</span></span> 是否<span class="token number">1</span>；  赋值 props<span class="token punctuation">.</span>children <span class="token template-string"><span class="token string">`= childrenLe===1?children:Array(childrenLength)`</span></span> 数组的话就<span class="token keyword">for</span><span class="token template-string"><span class="token string">`childArray[i] = arguments[i + 2];`</span></span>  判断 <span class="token template-string"><span class="token string">`type &amp;&amp; type.defaultProps`</span></span> 有的话 继续往 props塞 <span class="token operator">...</span>type<span class="token punctuation">.</span>defaultProps  <span class="token keyword">return</span> <span class="token function">ReactElement</span><span class="token punctuation">(</span>    type<span class="token punctuation">,</span>    key<span class="token punctuation">,</span>    ref<span class="token punctuation">,</span>    self<span class="token punctuation">,</span>    source<span class="token punctuation">,</span>    ReactCurrentOwner<span class="token punctuation">.</span>current<span class="token punctuation">,</span>    props<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> ReactElement <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>type<span class="token punctuation">,</span> key<span class="token punctuation">,</span> ref<span class="token punctuation">,</span> self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> owner<span class="token punctuation">,</span> props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    $$<span class="token keyword">typeof</span><span class="token punctuation">:</span> REACT_ELEMENT_TYPE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 通过 $$typeof 来帮助我们识别这是一个 ReactElement，作为一个flag: Symbol.for('react.element')</span>    type<span class="token punctuation">:</span> type<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 内建tag元素</span>    key<span class="token punctuation">:</span> key<span class="token punctuation">,</span>    ref<span class="token punctuation">:</span> ref<span class="token punctuation">,</span>    props<span class="token punctuation">:</span> props<span class="token punctuation">,</span>    _owner<span class="token punctuation">:</span> owner<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="ReactBaseClasses-js"><a href="#ReactBaseClasses-js" class="headerlink" title="ReactBaseClasses.js"></a>ReactBaseClasses.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> emptyObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Component</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">,</span> updater<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> emptyObject<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// refs 3种传入方式：1. string, 2. ref={el=>this.xxel = el}, 3. this.xxel = React.createRef();ref={this.xxel}</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>updater <span class="token operator">=</span> updater <span class="token operator">||</span> ReactNoopUpdateQueue<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// !Mark 重点: 下面两个重要原型方法都用到 updater 是 react-dom 中的内容</span>  <span class="token comment" spellcheck="true">// ReactNoopUpdateQueue.js 中的内容，是为了保险起见，用来报警告 对应没有updater的情况下的各种方法【如enqueueSetState 会返回函数 warnNoop(publicInstance, 'setState')】</span><span class="token punctuation">}</span>Component<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>isReactComponent <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Component<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>setState <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>partialState<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  校验一下partialState是 object 或者 <span class="token keyword">function</span> 或者<span class="token keyword">null</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueSetState</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> partialState<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">'setState'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Component<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>forceUpdate <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>updater<span class="token punctuation">.</span><span class="token function">enqueueForceUpdate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token string">'forceUpdate'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 让 PureComponent 继承自 Component，使用了典型的寄生组合式。</span><span class="token keyword">function</span> <span class="token function">ComponentDummy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>ComponentDummy<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Component<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">PureComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">,</span> updater<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>props <span class="token operator">=</span> props<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>refs <span class="token operator">=</span> emptyObject<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>updater <span class="token operator">=</span> updater <span class="token operator">||</span> ReactNoopUpdateQueue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> pureComponentPrototype <span class="token operator">=</span> <span class="token punctuation">(</span>PureComponent<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComponentDummy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pureComponentPrototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> PureComponent<span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>pureComponentPrototype<span class="token punctuation">,</span> Component<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>pureComponentPrototype<span class="token punctuation">.</span>isPureReactComponent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相比Component 唯一增加的属性flag</span></code></pre><h3 id="ReactCreateRef-js"><a href="#ReactCreateRef-js" class="headerlink" title="ReactCreateRef.js"></a>ReactCreateRef.js</h3><p><a href="https://react.docschina.org/docs/refs-and-the-dom.html">https://react.docschina.org/docs/refs-and-the-dom.html</a></p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    current<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当 ref 属性用于 HTML 元素时，构造函数中使用 React.createRef() 创建的 ref 接收底层 DOM 元素作为其 current 属性。</span><span class="token comment" spellcheck="true">// 当 ref 属性用于自定义 class 组件时，ref 对象接收组件的挂载实例作为其 current 属性。</span><span class="token comment" spellcheck="true">// 你不能在函数组件上使用 ref 属性，因为他们没有实例。</span></code></pre><h3 id="forwardRef-js"><a href="#forwardRef-js" class="headerlink" title="forwardRef.js"></a>forwardRef.js</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> forwardRef<span class="token operator">&lt;</span>Props<span class="token punctuation">,</span> ElementType<span class="token punctuation">:</span> React$ElementType<span class="token operator">></span><span class="token punctuation">(</span>  render<span class="token punctuation">:</span> <span class="token punctuation">(</span>props<span class="token punctuation">:</span> Props<span class="token punctuation">,</span> ref<span class="token punctuation">:</span> React$Ref<span class="token operator">&lt;</span>ElementType<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> React$Node<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">{</span>    $$<span class="token keyword">typeof</span><span class="token punctuation">:</span> REACT_FORWARD_REF_TYPE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 又一个symbol flag: Symbol.for('react.forward_ref')</span>    render<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样使用（可以拿到 ref）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> FancyButton <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">forwardRef</span><span class="token punctuation">(</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>button ref<span class="token operator">=</span><span class="token punctuation">{</span>ref<span class="token punctuation">}</span> className<span class="token operator">=</span><span class="token string">"FancyButton"</span><span class="token operator">></span>    <span class="token punctuation">{</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="ReactChildren-js"><a href="#ReactChildren-js" class="headerlink" title="ReactChildren.js"></a>ReactChildren.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token punctuation">{</span>  forEachChildren <span class="token keyword">as</span> forEach<span class="token punctuation">,</span>  mapChildren <span class="token keyword">as</span> map<span class="token punctuation">,</span>  countChildren <span class="token keyword">as</span> count<span class="token punctuation">,</span>  onlyChild <span class="token keyword">as</span> only<span class="token punctuation">,</span>  toArray<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>重点看 mapChildren</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用 React.Children.map(this.props.children, c => [[c, c]])</span><span class="token keyword">function</span> <span class="token function">mapChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> func<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  判断children<span class="token operator">==</span><span class="token keyword">null</span>就 直接返回children<span class="token punctuation">;</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">mapIntoWithKeyPrefixInternal</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> result<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> func<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mapIntoWithKeyPrefixInternal</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> array<span class="token punctuation">,</span> prefix<span class="token punctuation">,</span> func<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> escapedPrefix <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>prefix <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    escapedPrefix <span class="token operator">=</span> <span class="token function">escapeUserProvidedKey</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 引入了对象重用池的概念，维护一个大小固定(这里为10)的对象重用池，每次从这个池子里取一个对象去赋值，用完了就将对象上的属性置空然后丢回池子。维护这个池子的用意就是提高性能，毕竟频繁创建销毁一个有很多属性的对象会消耗性能</span>  <span class="token keyword">const</span> traverseContext <span class="token operator">=</span> <span class="token function">getPooledTraverseContext</span><span class="token punctuation">(</span>    array<span class="token punctuation">,</span>    escapedPrefix<span class="token punctuation">,</span>    func<span class="token punctuation">,</span>    context<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">traverseAllChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> mapSingleChildIntoContext<span class="token punctuation">,</span> traverseContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">releaseTraverseContext</span><span class="token punctuation">(</span>traverseContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">traverseAllChildren</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> traverseContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> children <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span><span class="token function">traverseAllChildrenImpl</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> callback<span class="token punctuation">,</span> traverseContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 把传入的 children 数组通过遍历摊平成单个节点,然后去执行 mapSingleChildIntoContext</span><span class="token comment" spellcheck="true">// nameSoFar：Name of the key path so far.</span><span class="token comment" spellcheck="true">// traverseContext：Used to pass information throughout the traversal</span><span class="token comment" spellcheck="true">// callback：即 mapSingleChildIntoContext(bookKeeping, child, childKey) 函数</span><span class="token keyword">function</span> <span class="token function">traverseAllChildrenImpl</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> nameSoFar<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> traverseContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>  判断<span class="token keyword">typeof</span> children：  是undefined <span class="token operator">||</span> boolean的话<span class="token punctuation">,</span>  <span class="token operator">-</span><span class="token operator">></span>赋值children成<span class="token keyword">null</span> <span class="token operator">-</span><span class="token operator">></span> 调用callback <span class="token punctuation">[</span>并且<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>给subtreeCount计数用<span class="token punctuation">]</span>  string <span class="token operator">||</span> number <span class="token operator">||</span> object且children<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span>是Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'react.portal'</span><span class="token punctuation">)</span>的话，  <span class="token operator">-</span><span class="token operator">></span>调用callback <span class="token punctuation">[</span>并且<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>给subtreeCount计数用<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 上面两种情况即 传入的 child 是单个节点，callback 即 mapSingleChildIntoContext 执行这样</span>  <span class="token comment" spellcheck="true">// callback(traverseContext, children, nameSoFar === '' ? '.' + getComponentKey(children, 0) : nameSoFar);</span>  <span class="token comment" spellcheck="true">// getComponentKey(component, index)的逻辑是：如果有.key把component.key处理成('$'+(替换[=,:]成[=0,=2]的原key字符))；如果没.key 返回index.toString(36);</span>  剩下 object且children<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span>是Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'react.element'</span><span class="token punctuation">)</span> 这种情况继续往下执行  <span class="token comment" spellcheck="true">/** 上半部分只在children是单节点时执行，下半部分判断children是array或iterator*/</span>  <span class="token keyword">let</span> child<span class="token punctuation">;</span>  <span class="token keyword">let</span> nextName<span class="token punctuation">;</span>  <span class="token keyword">let</span> subtreeCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存放 当前children层有的children数量</span>  <span class="token keyword">const</span> nextNamePrefix <span class="token operator">=</span> nameSoFar <span class="token operator">===</span> <span class="token string">''</span> <span class="token operator">?</span> <span class="token string">"."</span> <span class="token punctuation">:</span> nameSoFar <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 节点是数组的话，就开始遍历数组，并且把数组中的每个元素再递归执行 traverseAllChildrenImpl</span>    <span class="token comment" spellcheck="true">// 也用来摊平数组</span>    child <span class="token operator">=</span> children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    nextName <span class="token operator">=</span> nextNamePrefix <span class="token operator">+</span> <span class="token function">getComponentKey</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    subtreeCount <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">traverseAllChildrenImpl</span><span class="token punctuation">(</span>      child<span class="token punctuation">,</span>      nextName<span class="token punctuation">,</span>      callback<span class="token punctuation">,</span>      traverseContext<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 不是数组的话，就看看 children 是否可以支持迭代，???通过 obj[Symbol.iterator] 的方式去取，返回值如果是个函数的话就代表支持迭代，然后逻辑就和之前的一样了</span>    <span class="token keyword">const</span> iteratorFn <span class="token operator">=</span> <span class="token function">getIteratorFn</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// getIteratorFn内部逻辑：if(typeof (children[typeof Symbol === 'function' &amp;&amp; Symbol.iterator] || children['@@iterator']) === 'function') return 他; 否则return null</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> iteratorFn <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> iterator <span class="token operator">=</span> iteratorFn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>step <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>        同样的 <span class="token function">执行traverseAllChildrenImpl</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">invariant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> children<span class="token operator">-</span>type无效报警<span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> subtreeCount<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//给subtreeCount计数用</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mapSingleChildIntoContext</span><span class="token punctuation">(</span>bookKeeping<span class="token punctuation">,</span> child<span class="token punctuation">,</span> childKey<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// bookKeeping就是我们从对象池子里取出来的东西</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span>result<span class="token punctuation">,</span> keyPrefix<span class="token punctuation">,</span> func<span class="token punctuation">,</span> context<span class="token punctuation">}</span> <span class="token operator">=</span> bookKeeping<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// func 即Children.map(child,func)的arg[1]</span>  <span class="token keyword">let</span> mappedChild <span class="token operator">=</span> func<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> child<span class="token punctuation">,</span> bookKeeping<span class="token punctuation">.</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>mappedChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对于这种情况的处理：React.Children.map(this.props.children, c => [c, c])</span>    <span class="token function">mapIntoWithKeyPrefixInternal</span><span class="token punctuation">(</span>mappedChild<span class="token punctuation">,</span> result<span class="token punctuation">,</span> childKey<span class="token punctuation">,</span> c <span class="token operator">=</span><span class="token operator">></span> c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 回到mapChildren(children, func, context)内的流程，往下会在traverseAllChildrenImpl内部 摊平mappedChild as Array</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>mappedChild <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果不是数组的话，</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValidElement</span><span class="token punctuation">(</span>mappedChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断返回值是否是一个有效的 Element</span>      mappedChild <span class="token operator">=</span> <span class="token function">cloneAndReplaceKey</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// 来自ReactElement.js `cloneAndReplaceKey(oldElement, newKey)`, clone 一份并且替换掉 key</span>          mappedChild<span class="token punctuation">,</span>          keyPrefix <span class="token operator">+</span>            <span class="token punctuation">(</span>mappedChild<span class="token punctuation">.</span>key <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>child <span class="token operator">||</span> child<span class="token punctuation">.</span>key <span class="token operator">!==</span> mappedChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span>              <span class="token operator">?</span> <span class="token function">escapeUserProvidedKey</span><span class="token punctuation">(</span>mappedChild<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token comment" spellcheck="true">// escapeUserProvidedKey是把'/'替换成'$&amp;/'</span>              <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span>            childKey<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mappedChild<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后把返回值放入 result 中，result 即 mapChildren 的返回值。</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>对象重用池相关逻辑</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> POOL_SIZE <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> traverseContextPool <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getPooledTraverseContext</span><span class="token punctuation">(</span>  mapResult<span class="token punctuation">,</span>  keyPrefix<span class="token punctuation">,</span>  mapFunction<span class="token punctuation">,</span>  mapContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>traverseContextPool<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> traverseContext <span class="token operator">=</span> traverseContextPool<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    traverseContext<span class="token punctuation">.</span>result <span class="token operator">=</span> mapResult<span class="token punctuation">;</span>    traverseContext<span class="token punctuation">.</span>keyPrefix <span class="token operator">=</span> keyPrefix<span class="token punctuation">;</span>    traverseContext<span class="token punctuation">.</span>func <span class="token operator">=</span> mapFunction<span class="token punctuation">;</span>    traverseContext<span class="token punctuation">.</span>context <span class="token operator">=</span> mapContext<span class="token punctuation">;</span>    traverseContext<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> traverseContext<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      result<span class="token punctuation">:</span> mapResult<span class="token punctuation">,</span>      keyPrefix<span class="token punctuation">:</span> keyPrefix<span class="token punctuation">,</span>      func<span class="token punctuation">:</span> mapFunction<span class="token punctuation">,</span>      context<span class="token punctuation">:</span> mapContext<span class="token punctuation">,</span>      count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">releaseTraverseContext</span><span class="token punctuation">(</span>traverseContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>  traverseContext<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  traverseContext<span class="token punctuation">.</span>keyPrefix <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  traverseContext<span class="token punctuation">.</span>func <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  traverseContext<span class="token punctuation">.</span>context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  traverseContext<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>traverseContextPool<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> POOL_SIZE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    traverseContextPool<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>traverseContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="渲染器"><a href="#渲染器" class="headerlink" title="渲染器"></a><a href="https://zh-hans.reactjs.org/docs/codebase-overview.html#renderers">渲染器</a></h2><h2 id="react-dom"><a href="#react-dom" class="headerlink" title="react-dom"></a>react-dom</h2><p>将 React 组件渲染成 DOM。它实现了全局 ReactDOMAPI</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> APP <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>    <span class="token operator">&lt;</span>span<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token operator">&lt;</span>APP <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"#root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在控制台<code>document.querySelector(&#39;#root&#39;)._reactRootContainer</code>可以查看<br><img src="https://i.loli.net/2021/05/06/pCdTkSU58itm6Yy.png" alt="image.png"></p><h3 id="react-dom-src-client-ReactDOM-js"><a href="#react-dom-src-client-ReactDOM-js" class="headerlink" title="react-dom/src/client/ReactDOM.js"></a>react-dom/src/client/ReactDOM.js</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> ReactDOM <span class="token operator">=</span> <span class="token punctuation">{</span>  createPortal<span class="token punctuation">,</span>  <span class="token function">finDOMNode</span><span class="token punctuation">(</span>componentOrElement<span class="token punctuation">:</span>Element <span class="token operator">|</span> <span class="token operator">?</span>React$Component<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">null</span> <span class="token operator">|</span> Element <span class="token operator">|</span> Text<span class="token punctuation">,</span>  <span class="token function">hydrate</span><span class="token punctuation">(</span>element<span class="token punctuation">:</span> React$Node<span class="token punctuation">,</span> container<span class="token punctuation">:</span> DOMContainer<span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">:</span> React$Element<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">,</span> container<span class="token punctuation">:</span> DOMContainer<span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">unstable_renderSubtreeIntoContainer</span><span class="token punctuation">(</span>parentComponent<span class="token punctuation">:</span> React$Component<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">,</span> element<span class="token punctuation">:</span> React$Element<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">,</span> containerNode<span class="token punctuation">:</span> DOMContainer<span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">unmountComponentAtNode</span><span class="token punctuation">(</span>container<span class="token punctuation">:</span> DOMContainer<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function">unstable_createPortal</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span>  unstable_batchedUpdates<span class="token punctuation">:</span>batchedUpdates<span class="token punctuation">,</span>  unstable_interactiveUpdates<span class="token punctuation">:</span> interactiveUpdates<span class="token punctuation">,</span>  flushSync<span class="token punctuation">:</span> flushSync<span class="token punctuation">,</span>  unstable_createRoot<span class="token punctuation">:</span> createRoot<span class="token punctuation">,</span>  unstable_flushControlled<span class="token punctuation">:</span> flushControlled<span class="token punctuation">,</span>  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED<span class="token punctuation">:</span> <span class="token punctuation">{</span> Events<span class="token punctuation">:</span> <span class="token punctuation">[</span>    getInstanceFromNode<span class="token punctuation">,</span>    getNodeFromInstance<span class="token punctuation">,</span>    getFiberCurrentPropsFromNode<span class="token punctuation">,</span>    EventPluginHubInjection<span class="token punctuation">.</span>injectEventPluginsByName<span class="token punctuation">,</span>    eventNameDispatchConfigs<span class="token punctuation">,</span>    accumulateTwoPhaseDispatches<span class="token punctuation">,</span>    accumulateDirectDispatches<span class="token punctuation">,</span>    enqueueStateRestore<span class="token punctuation">,</span>    restoreStateIfNeeded<span class="token punctuation">,</span>    dispatchEvent<span class="token punctuation">,</span>    runEventsInBatch<span class="token punctuation">,</span>    flushPassiveEffects<span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-ts"><code class="language-ts"><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">:</span> React$Element<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">,</span> container<span class="token punctuation">:</span> DOMContainer<span class="token punctuation">,</span> callback<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">Function</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">invariant</span><span class="token punctuation">(</span><span class="token function">isValidContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'Target container is not a DOM element.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">legacyRenderSubtreeIntoContainer</span><span class="token punctuation">(</span>      <span class="token keyword">null</span><span class="token punctuation">,</span>      element<span class="token punctuation">,</span>      container<span class="token punctuation">,</span>      <span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// forceHydrate 参数，为 true 时是服务端渲染（hydrate 函数内会是true）</span>      callback<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 第一部分是没有 root 之前我们首先需要创建一个 root，第二部分是有 root 之后的渲染流程</span><span class="token keyword">function</span> <span class="token function">legacyRenderSubtreeIntoContainer</span><span class="token punctuation">(</span>  parentComponent<span class="token operator">?</span><span class="token punctuation">:</span> React$Component<span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token punctuation">,</span> <span class="token keyword">any</span><span class="token operator">></span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> ReactNodeList<span class="token punctuation">,</span>  container<span class="token punctuation">:</span> DOMContainer<span class="token punctuation">,</span>  forceHydrate<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span>  callback<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> root <span class="token operator">=</span> container<span class="token punctuation">.</span>_reactRootContainer<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// !mark: 上半部分</span>    root <span class="token operator">=</span> container<span class="token punctuation">.</span>_reactRootContainer <span class="token operator">=</span> <span class="token function">legacyCreateRootFromDOMContainer</span><span class="token punctuation">(</span>      container<span class="token punctuation">,</span>      forceHydrate<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> callback <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> 处理一下传进来的callback 即 originalCallback： callback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>xxx<span class="token punctuation">;</span> originalCallback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token function">getPublicRootInstance</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>_internalRoot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    <span class="token function">unbatchedUpdates</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 对于 Root 来说没必要批量更新，直接调用回调函数; 而其他 如 setState 会被优化batch成一次更新，减少了渲染次数。假定不会存在 parentComponent，因为很少有人会在 root 外部加上 context 组件。</span>      如果parentComponent不存在，就      root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// !mark: 下半部分</span>    <span class="token comment" spellcheck="true">// 同样是 if (typeof callback === 'function') 那块的 callback逻辑 省略</span>    <span class="token comment" spellcheck="true">// Update</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentComponent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">legacy_renderSubtreeIntoContainer</span><span class="token punctuation">(</span>        parentComponent<span class="token punctuation">,</span>        children<span class="token punctuation">,</span>        callback<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      root<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 直接执行 render</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">getPublicRootInstance</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>_internalRoot<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">legacyCreateRootFromDOMContainer</span><span class="token punctuation">(</span>  container<span class="token punctuation">:</span> DOMContainer<span class="token punctuation">,</span>  forceHydrate<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Root <span class="token punctuation">{</span>  如果 不是 forceHydrate，就<span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rootSibling <span class="token operator">=</span> container<span class="token punctuation">.</span>lastChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>container<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>rootSibling<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> isConcurrent <span class="token operator">=</span> <span class="token keyword">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReactRoot</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> isConcurrent<span class="token punctuation">,</span> shouldHydrate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">ReactRoot</span><span class="token punctuation">(</span>  container<span class="token punctuation">:</span> DOMContainer<span class="token punctuation">,</span>  isConcurrent<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  hydrate<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">createContainer</span><span class="token punctuation">(</span>container<span class="token punctuation">,</span> isConcurrent<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建了一个 FiberRoot 对象，</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>_internalRoot <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 并挂载到了 _internalRoot 上</span>  <span class="token comment" spellcheck="true">// 和 DOM 树一样，fiber 也会构建出一个树结构（每个 DOM 节点一定对应着一个 fiber 对象），FiberRoot 就是整个 fiber 树的根节点，</span><span class="token punctuation">}</span>ReactRoot<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>render <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  children<span class="token punctuation">:</span> ReactNodeList<span class="token punctuation">,</span>  callback<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> mixed<span class="token punctuation">)</span><span class="token punctuation">:</span> Work <span class="token punctuation">{</span>  <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_internalRoot<span class="token punctuation">;</span>  <span class="token keyword">const</span> work <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReactWork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// function ReactWork() {this._callbacks = null;this._didCommit = false; this._onCommit = this._onCommit.bind(this);}</span>  callback <span class="token operator">=</span> callback <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> callback<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    work<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ReactWork 的功能就是为了在组件渲染或更新后把所有传入ReactDom.render 中的回调函数全部执行一遍</span>  <span class="token punctuation">}</span>  <span class="token function">updateContainer</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> root<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> work<span class="token punctuation">.</span>_onCommit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// work._onCommit 就是用于执行所有回调函数的</span>  <span class="token keyword">return</span> work<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactRoot<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>unmount <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>callback<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> mixed<span class="token punctuation">)</span><span class="token punctuation">:</span> Work <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactRoot<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>legacy_renderSubtreeIntoContainer <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  parentComponent<span class="token punctuation">:</span> <span class="token operator">?</span>React$Component<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">,</span>  children<span class="token punctuation">:</span> ReactNodeList<span class="token punctuation">,</span>  callback<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> mixed<span class="token punctuation">)</span><span class="token punctuation">:</span> Work <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>ReactRoot<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>createBatch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Batch <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="react-reconciler-src-ReactFiberReconciler-js"><a href="#react-reconciler-src-ReactFiberReconciler-js" class="headerlink" title="react-reconciler/src/ReactFiberReconciler.js"></a>react-reconciler/src/ReactFiberReconciler.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createContainer</span><span class="token punctuation">(</span>  containerInfo<span class="token punctuation">:</span> Container<span class="token punctuation">,</span>  isConcurrent<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  hydrate<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> OpaqueRoot <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">createFiberRoot</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">,</span> isConcurrent<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateContainer</span><span class="token punctuation">(</span>  element<span class="token punctuation">:</span> ReactNodeList<span class="token punctuation">,</span>  container<span class="token punctuation">:</span> OpaqueRoot<span class="token punctuation">,</span>  parentComponent<span class="token operator">?</span><span class="token punctuation">:</span> React$Component<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">,</span>  callback<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ExpirationTime <span class="token punctuation">{</span>  <span class="token keyword">const</span> current <span class="token operator">=</span> container<span class="token punctuation">.</span>current<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// container即fiberRoot(),fiberRoot的current 是 rootFiber Node</span>  <span class="token keyword">const</span> currentTime <span class="token operator">=</span> <span class="token function">requestCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 计算时间</span>  <span class="token keyword">const</span> expirationTime <span class="token operator">=</span> <span class="token function">computeExpirationForFiber</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">,</span> current<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// expirationTime 代表优先级，数字越大优先级越高;同步的优先级最高 export const Sync = MAX_SIGNED_31_BIT_INT = 1073741823; 换算成天 约等于12天</span>  <span class="token keyword">return</span> <span class="token function">updateContainerAtExpirationTime</span><span class="token punctuation">(</span>    element<span class="token punctuation">,</span>    container<span class="token punctuation">,</span>    parentComponent<span class="token punctuation">,</span>    expirationTime<span class="token punctuation">,</span>    callback<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">updateContainerAtExpirationTime</span><span class="token punctuation">(</span>  element<span class="token punctuation">:</span> ReactNodeList<span class="token punctuation">,</span>  container<span class="token punctuation">:</span> OpaqueRoot<span class="token punctuation">,</span>  parentComponent<span class="token operator">?</span><span class="token punctuation">:</span> React$Component<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">,</span>  expirationTime<span class="token punctuation">:</span> ExpirationTime<span class="token punctuation">,</span>  callback<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> current <span class="token operator">=</span> container<span class="token punctuation">.</span>current<span class="token punctuation">;</span>  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">getContextForSubtree</span><span class="token punctuation">(</span>parentComponent<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// // 获取 context 并赋值，这里肯定取不到值得，因为 ReactRoot.prototype.render里的 updateContainer(_,_,null,_)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>container<span class="token punctuation">.</span>context <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    container<span class="token punctuation">.</span>context <span class="token operator">=</span> context<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    container<span class="token punctuation">.</span>pendingContext <span class="token operator">=</span> context<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">scheduleRootUpdate</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> element<span class="token punctuation">,</span> expirationTime<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 最终计算出一个任务的执行截止时间。只要这个截止时间比 当前已经过的时间 大就可以一直让 React 延后这个任务的执行，以便让更高优先级的任务执行，但是一旦过了任务的截止时间，就必须让这个任务马上执行。</span><span class="token keyword">function</span> <span class="token function">scheduleRootUpdate</span><span class="token punctuation">(</span>  current<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  element<span class="token punctuation">:</span> ReactNodeList<span class="token punctuation">,</span>  expirationTime<span class="token punctuation">:</span> ExpirationTime<span class="token punctuation">,</span>  callback<span class="token operator">?</span><span class="token punctuation">:</span> Function<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> update <span class="token operator">=</span> <span class="token function">createUpdate</span><span class="token punctuation">(</span>expirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一个固定几个keys的对象 工厂函数，创建个obj包括keys：expirationTime, tag, payload(setState 的第一二个参数), callback, next(用于在队列中找到下一个节点), nextEffect</span>  update<span class="token punctuation">.</span>payload <span class="token operator">=</span> <span class="token punctuation">{</span>element<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// render 的过程中其实也是一次更新的操作。对于render函数 是没有setState的所以也不可能有其第二个参数Payload，所以直接赋值 ReactRoot.prototype.render里的第一参数children</span>  callback <span class="token operator">=</span> callback <span class="token operator">===</span> undefined <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token punctuation">:</span> callback<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>callback <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">catch</span>下 callback<span class="token operator">-</span>invalid的情况；    update<span class="token punctuation">.</span>callback <span class="token operator">=</span> callback<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">flushPassiveEffects</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// import from ReactFiberScheduler.js, 与 useEffect 有关</span>  <span class="token function">enqueueUpdate</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> update<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// import from ReactUpdateQueue.js  把 update 入队，内部就是一些创建或者获取 queue（链表结构），然后给链表添加一个节点的操作</span>  <span class="token function">scheduleWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> expirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// import from ReactFiberScheduler.js, 调度相关</span>  <span class="token keyword">return</span> expirationTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="react-reconciler-src-ReactFiberScheduler-old-js"><a href="#react-reconciler-src-ReactFiberScheduler-old-js" class="headerlink" title="react-reconciler/src/ReactFiberScheduler.old.js"></a>react-reconciler/src/ReactFiberScheduler.old.js</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// react-reconciler/src/ReactFiberScheduler.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> requestCurrentTime <span class="token operator">=</span> enableNewScheduler <span class="token comment" spellcheck="true">// import {enableNewScheduler} from 'shared/ReactFeatureFlags'; constant enableNewScheduler = false，所以我们只看 old 的代码</span>  <span class="token operator">?</span> requestCurrentTime_new  <span class="token punctuation">:</span> requestCurrentTime_old<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//import {requestCurrentTime as requestCurrentTime_old} from './ReactFiberScheduler.old.js'</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">requestCurrentTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>isRendering<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> currentSchedulerTime<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">findHighestPriorityRoot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>    nextFlushedExpirationTime <span class="token operator">===</span> NoWork <span class="token operator">||</span>    nextFlushedExpirationTime <span class="token operator">===</span> Never  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">recomputeCurrentRendererTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    currentSchedulerTime <span class="token operator">=</span> currentRendererTime<span class="token punctuation">;</span>    <span class="token keyword">return</span> currentSchedulerTime<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> currentSchedulerTime<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">recomputeCurrentRendererTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> currentTimeMs <span class="token operator">=</span> <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> originalStartTimeMs<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 结果就是 现在离 React 应用初始化时经过了多少时间</span>  <span class="token comment" spellcheck="true">// now()用的scheduler库，即[Performance.now()](https://developer.mozilla.org/zh-CN/docs/Web/API/Performance/now)</span>  <span class="token comment" spellcheck="true">// originalStartTimeMs 是 React 应用初始化时就会生成的一个变量,值也是 performance.now()</span>  currentRendererTime <span class="token operator">=</span> <span class="token function">msToExpirationTime</span><span class="token punctuation">(</span>currentTimeMs<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// => currentTimeMs / 10 | 0</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">computeExpirationForFiber</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">:</span> ExpirationTime<span class="token punctuation">,</span> fiber<span class="token punctuation">:</span> Fiber<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> expirationTime<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 各种if else 条件 省.. =></span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>expirationContext <span class="token operator">!==</span> NoWork<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>isWorking<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>mode <span class="token operator">&amp;</span> ConcurrentMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>isBatchingInteractiveUpdates<span class="token punctuation">)</span> expirationTime <span class="token operator">=</span> <span class="token function">computeInteractiveExpiration</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 交互事件，优先级较高</span>      <span class="token keyword">else</span> expirationTime <span class="token operator">=</span> <span class="token function">computeAsyncExpiration</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 异步，优先级较低</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nextRoot <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> expirationTime <span class="token operator">===</span> nextRenderExpirationTime<span class="token punctuation">)</span> expirationTime <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// do not update at the same expiration time that is already rendering</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> expirationTime <span class="token operator">=</span> Sync <span class="token comment" spellcheck="true">// sync update 的情况</span>  <span class="token punctuation">}</span>  <span class="token operator">...</span>  <span class="token keyword">return</span> expirationTime<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="react-reconciler-src-ReactFiberExpirationTime-js"><a href="#react-reconciler-src-ReactFiberExpirationTime-js" class="headerlink" title="react-reconciler/src/ReactFiberExpirationTime.js"></a>react-reconciler/src/ReactFiberExpirationTime.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">computeInteractiveExpiration</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">:</span> ExpirationTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">computeExpirationBucket</span><span class="token punctuation">(</span>    currentTime<span class="token punctuation">,</span>    HIGH_PRIORITY_EXPIRATION<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// const HIGH_PRIORITY_EXPIRATION = __DEV__ ? 500 : 150;</span>    HIGH_PRIORITY_BATCH_SIZE <span class="token comment" spellcheck="true">// const HIGH_PRIORITY_BATCH_SIZE = 100;</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">computeExpirationBucket</span><span class="token punctuation">(</span>  currentTime<span class="token punctuation">,</span>  expirationInMs<span class="token punctuation">,</span>  bucketSizeMs<span class="token punctuation">)</span><span class="token punctuation">:</span> ExpirationTime <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    MAGIC_NUMBER_OFFSET <span class="token operator">-</span> <span class="token comment" spellcheck="true">// const MAGIC_NUMBER_OFFSET = MAX_SIGNED_31_BIT_INT - 1;</span>    <span class="token function">ceiling</span><span class="token punctuation">(</span>      MAGIC_NUMBER_OFFSET <span class="token operator">-</span> currentTime <span class="token operator">+</span> expirationInMs <span class="token operator">/</span> UNIT_SIZE<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// const UNIT_SIZE = 10;</span>      bucketSizeMs <span class="token operator">/</span> UNIT_SIZE <span class="token comment" spellcheck="true">// 为了抹平一段时间(这里=10)内的时间差，在抹平的时间差内不管有多少个任务需要执行，他们的过期时间都是同一个，这也算是一个性能优化，帮助渲染页面行为节流</span>    <span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">ceiling</span><span class="token punctuation">(</span>num<span class="token punctuation">:</span> number<span class="token punctuation">,</span> precision<span class="token punctuation">:</span> number<span class="token punctuation">)</span><span class="token punctuation">:</span> number <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">/</span> precision<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> precision<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="react-reconciler-src-ReactFiberRoot-js"><a href="#react-reconciler-src-ReactFiberRoot-js" class="headerlink" title="react-reconciler/src/ReactFiberRoot.js"></a>react-reconciler/src/ReactFiberRoot.js</h3><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// !mark: 在 createFiberRoot 函数内部，分别创建了两个 root，一个叫做 FiberRoot(FiberRootNode)，另一个叫做 RootFiber(HostRootFiber)，并且它们两者还是相互link的。</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createFiberRoot</span><span class="token punctuation">(</span>  containerInfo<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>  isConcurrent<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span>  hydrate<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> FiberRoot <span class="token punctuation">{</span>  <span class="token keyword">const</span> root<span class="token punctuation">:</span> FiberRoot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FiberRootNode</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> uninitializedFiber <span class="token operator">=</span> <span class="token function">createHostRootFiber</span><span class="token punctuation">(</span>isConcurrent<span class="token punctuation">)</span><span class="token punctuation">;</span>  root<span class="token punctuation">.</span>current <span class="token operator">=</span> uninitializedFiber<span class="token punctuation">;</span>  uninitializedFiber<span class="token punctuation">.</span>stateNode <span class="token operator">=</span> root<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ，并且它们两者还是相互引用的</span>  <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">FiberRootNode</span><span class="token punctuation">(</span>containerInfo<span class="token punctuation">,</span> hydrate<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 内部创建了很多属性，需要了解两个属性，分别是 containerInfo 及 current。</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>current <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指向 RootFiber。</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>containerInfo <span class="token operator">=</span> containerInfo<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//代表着容器信息，也就是我们的 document.querySelector('#root')</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pendingChildren <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pingCache <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token operator">...</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>hydrate <span class="token operator">=</span> hydrate<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstBatch <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token operator">...</span>  条件  <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedInteractions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pendingInteractionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="react-reconciler-src-ReactFiber-js"><a href="#react-reconciler-src-ReactFiber-js" class="headerlink" title="react-reconciler/src/ReactFiber.js"></a>react-reconciler/src/ReactFiber.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createHostRootFiber</span><span class="token punctuation">(</span>isConcurrent<span class="token punctuation">:</span> boolean<span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token punctuation">{</span>  <span class="token keyword">let</span> mode <span class="token operator">=</span> isConcurrent <span class="token operator">?</span> ConcurrentMode <span class="token operator">|</span> StrictMode <span class="token punctuation">:</span> NoContext<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableProfilerTimer <span class="token operator">&amp;&amp;</span> isDevToolsPresent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    mode <span class="token operator">|</span><span class="token operator">=</span> ProfileMode<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">createFiber</span><span class="token punctuation">(</span>HostRoot<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> createFiber <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>  tag<span class="token punctuation">:</span> WorkTag<span class="token punctuation">,</span>  pendingProps<span class="token punctuation">:</span> mixed<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> string<span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> TypeOfMode<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FiberNode</span><span class="token punctuation">(</span>tag<span class="token punctuation">,</span> pendingProps<span class="token punctuation">,</span> key<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">FiberNode</span><span class="token punctuation">(</span>  tag<span class="token punctuation">:</span> WorkTag<span class="token punctuation">,</span>  pendingProps<span class="token punctuation">:</span> mixed<span class="token punctuation">,</span>  key<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> string<span class="token punctuation">,</span>  mode<span class="token punctuation">:</span> TypeOfMode<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>tag <span class="token operator">=</span> tag<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>key <span class="token operator">=</span> key<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>elementType <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>stateNode <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// stateNode 保存了每个fiber节点的 DOM 信息</span>  <span class="token comment" spellcheck="true">// Fiber</span>  <span class="token comment" spellcheck="true">// return、child、sibling 这三个属性很重要，它们是构成 fiber 树的主体数据结构，return、child、sibling、index 组成了fiber单链表树结构</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">return</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表父 fiber</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// child 代表子 fiber</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sibling 代表下一个兄弟节点，和链表中的 next 一个含义</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表了当前 fiber 的索引</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 更新相关</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>pendingProps <span class="token operator">=</span> pendingProps<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// // 新的 props</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedProps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// // 旧的 props</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>updateQueue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// // 存储 setState 中的第一个参数</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// // 旧的 state</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>contextDependencies <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>mode <span class="token operator">=</span> mode<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Effects, 更新 DOM 相关</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>effectTag <span class="token operator">=</span> NoEffect<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 指这个节点需要进行的 DOM 操作. import {NoEffect} from 'shared/ReactSideEffectTags'; 记录所有的 effect 的，记录是通过位运算来实现的：如新增`effectTag |= Update`,删除`effectTag &amp;= ~Update`</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>nextEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 下一个需要进行 DOM 操作的节点</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>firstEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  第一个</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>lastEffect <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 最后一个</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>expirationTime <span class="token operator">=</span> NoWork<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 任务过期时间</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>childExpirationTime <span class="token operator">=</span> NoWork<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>alternate <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 还有一个 alternate 属性很重要，这个属性代表了一个更新中的 fiber，大部分情况下每个 fiber 都有一个替身 fiber,在更新过程中，所有的操作都会在替身上完成，当渲染完成后，替身会代替本身</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableProfilerTimer<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>该文件下还有个<code>export function createWorkInProgress(current: Fiber, pendingProps: any, expirationTime: ExpirationTime): Fiber &#123;&#125;</code><br>在一个 React 应用中，通常来说都有两个 fiebr 树，一个叫做 old tree，另一个叫做 workInProgress tree。前者对应着已经渲染好的 DOM 树，后者是正在执行更新中的 fiber tree，还能便于中断后恢复。两棵树的节点互相引用，便于共享一些内部的属性，减少内存的开销。毕竟前文说过每个组件或 DOM 都会对应着一个 fiber 对象，应用很大的话组成的 fiber 树也会很大，如果两棵树都是各自把一些相同的属性创建一遍的话，会损失不少的内存空间及性能。<br>当更新结束以后，workInProgress tree 会将 old tree 替换掉，这种做法称之为 double buffering，这也是性能优化里的一种做法</p><h2 id="react-dom-src-events"><a href="#react-dom-src-events" class="headerlink" title="react-dom/src/events"></a><a href="https://zh-hans.reactjs.org/docs/codebase-overview.html#event-system">react-dom/src/events</a></h2><h2 id="react-native-renderer"><a href="#react-native-renderer" class="headerlink" title="react-native-renderer"></a>react-native-renderer</h2><p>实现了 React 和 React Native 的连接。<br><em>真正渲染 Native 视图的平台特定代码及组件都存储在 React Native 仓库中。</em></p><h2 id="react-test-renderer"><a href="#react-test-renderer" class="headerlink" title="react-test-renderer"></a>react-test-renderer</h2><p>将 React 组件渲染为 JSON 树。这用于 Jest 的快照测试特性。</p><h2 id="react-reconciler"><a href="#react-reconciler" class="headerlink" title="react-reconciler"></a><a href="https://zh-hans.reactjs.org/docs/codebase-overview.html#reconcilers">react-reconciler</a></h2><p>“fiber” reconciler 是一个新尝试，致力于解决 stack reconciler 中固有的问题，同时解决一些历史遗留问题。Fiber 从 React 16 开始变成了默认的 reconciler。<br>流程大致如下：</p><h3 id="ReactFiberScheduler-old-js"><a href="#ReactFiberScheduler-old-js" class="headerlink" title="ReactFiberScheduler.old.js"></a>ReactFiberScheduler.old.js</h3><pre class=" language-js"><code class="language-js"><span class="token function">flushRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">:</span> FiberRoot<span class="token punctuation">,</span> expirationTime<span class="token punctuation">:</span> ExpirationTime<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token function">performWorkOnRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> expirationTime<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// root: FiberRoot, expirationTime: ExpirationTime, isYieldy: boolean,</span><span class="token operator">-</span><span class="token operator">></span> <span class="token function">renderRoot</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> isYieldy<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// (root: FiberRoot, isYieldy: boolean): void // 这里开始渲染整颗树，这个函数在异步模式下可能会被多次执行，因为在异步模式下 // 可以打断任务。打断也就意味着每次都得回到 root 再开始从上往下循环</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token function">workLoop</span><span class="token punctuation">(</span>isYieldy<span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">thrownValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// workLoop(isYieldy)</span><span class="token operator">-</span><span class="token operator">></span> nextUnitOfWork <span class="token operator">=</span> <span class="token function">performUnitOfWork</span><span class="token punctuation">(</span>nextUnitOfWork<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// performUnitOfWork(workInProgress: Fiber): Fiber | null // 开始组件更新</span><span class="token operator">-</span><span class="token operator">></span> next <span class="token operator">=</span> <span class="token function">beginWork</span><span class="token punctuation">(</span>current<span class="token punctuation">,</span> workInProgress<span class="token punctuation">,</span> nextRenderExpirationTime<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//</span></code></pre><h3 id="ReactFiberBeginWork-js"><a href="#ReactFiberBeginWork-js" class="headerlink" title="ReactFiberBeginWork.js"></a>ReactFiberBeginWork.js</h3><pre class=" language-js"><code class="language-js"><span class="token function">beginWork</span><span class="token punctuation">(</span> current<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span> workInProgress<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span> renderExpirationTime<span class="token punctuation">:</span> ExpirationTime <span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span><span class="token punctuation">(</span>workInProgress<span class="token punctuation">.</span>tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 21 种 case</span>    <span class="token comment" spellcheck="true">// 几乎每种 case【case 对应列在 ~/shared/ReactWorkTags】 return的func 内 都最终执行reconcileChildren()。例：</span>    <span class="token keyword">case</span> ClassComponent<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 省略几个const</span>      <span class="token keyword">return</span> <span class="token function">updateClassComponent</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// updateClassComponent( current: Fiber | null, workInProgress: Fiber, Component: any, nextProps, renderExpirationTime: ExpirationTime )</span>        current<span class="token punctuation">,</span>        workInProgress<span class="token punctuation">,</span>        Component<span class="token punctuation">,</span>        resolvedProps<span class="token punctuation">,</span>        renderExpirationTime<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span> <span class="token function">finishClassComponent</span><span class="token punctuation">(</span>    current<span class="token punctuation">,</span>    workInProgress<span class="token punctuation">,</span>    Component<span class="token punctuation">,</span>    shouldUpdate<span class="token punctuation">,</span>    hasContext<span class="token punctuation">,</span>    renderExpirationTime  <span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">function</span> <span class="token function">finishClassComponent</span><span class="token punctuation">(</span>  current<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  workInProgress<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  Component<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  shouldUpdate<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  hasContext<span class="token punctuation">:</span> boolean<span class="token punctuation">,</span>  renderExpirationTime<span class="token punctuation">:</span> ExpirationTime<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token keyword">const</span> instance <span class="token operator">=</span> workInProgress<span class="token punctuation">.</span>stateNode<span class="token punctuation">;</span>  nextChildren <span class="token operator">=</span> instance<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">...</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> didCaptureError<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token function">reconcileChildren</span><span class="token punctuation">(</span>      current<span class="token punctuation">,</span>      workInProgress<span class="token punctuation">,</span>      nextChildren<span class="token punctuation">,</span>      renderExpirationTime<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">-</span><span class="token operator">></span> <span class="token function">reconcileChildren</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// 这里开始diff 算法，生成新的children</span>  current<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  workInProgress<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  nextChildren<span class="token punctuation">:</span> any<span class="token punctuation">,</span>  renderExpirationTime<span class="token punctuation">:</span> ExpirationTime  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">mountChildFibers</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// 添加fiber</span>        workInProgress<span class="token punctuation">,</span>        <span class="token keyword">null</span><span class="token punctuation">,</span>        nextChildren<span class="token punctuation">,</span>        renderExpirationTime<span class="token punctuation">,</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> workInProgress<span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span> <span class="token comment" spellcheck="true">// maybe 复用fiber / delete / remove...</span>      workInProgress<span class="token punctuation">,</span>      current<span class="token punctuation">.</span>child<span class="token punctuation">,</span>      nextChildren<span class="token punctuation">,</span>      renderExpirationTime<span class="token punctuation">,</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="ReactChildFiber-js"><a href="#ReactChildFiber-js" class="headerlink" title="ReactChildFiber.js"></a>ReactChildFiber.js</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">reconcileChildFibers</span><span class="token punctuation">(</span>    returnFiber<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>    currentFirstChild<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    newChild<span class="token punctuation">:</span> any<span class="token punctuation">,</span>    expirationTime<span class="token punctuation">:</span> ExpirationTime<span class="token punctuation">,</span>  <span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">-</span><span class="token operator">></span> <span class="token operator">...</span>省略string<span class="token operator">/</span>number<span class="token operator">/</span>isObject<span class="token operator">/</span>iterator<span class="token operator">...</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>newChild<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">reconcileChildrenArray</span><span class="token punctuation">(</span>    returnFiber<span class="token punctuation">,</span>    currentFirstChild<span class="token punctuation">,</span>    newChild<span class="token punctuation">,</span>    expirationTime<span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><h4 id="reconcileChildrenArray-简化流程"><a href="#reconcileChildrenArray-简化流程" class="headerlink" title="reconcileChildrenArray 简化流程"></a>reconcileChildrenArray 简化流程</h4><p>diff 相关。<br><a href="#toc-heading-16">fiberNode</a>中的属性：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token keyword">return</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表父 fiber</span><span class="token keyword">this</span><span class="token punctuation">.</span>child <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// child 代表子 fiber</span><span class="token keyword">this</span><span class="token punctuation">.</span>sibling <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// sibling 代表下一个兄弟节点，和链表中的 next 一个含义</span><span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 代表了当前 fiber 的索引</span></code></pre><blockquote><p><a href="https://github.com/lz-lee/React-Source-Code/issues/7">参考</a></p></blockquote><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 处理子节点是数组的情况</span><span class="token keyword">function</span> <span class="token function">reconcileChildrenArray</span><span class="token punctuation">(</span>  returnFiber<span class="token punctuation">:</span> Fiber<span class="token punctuation">,</span>  currentFirstChild<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  newChildren<span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">,</span>  expirationTime<span class="token punctuation">:</span> ExpirationTime<span class="token punctuation">)</span><span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> resultingFirstChild<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> previousNewFiber<span class="token punctuation">:</span> Fiber <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> oldFiber <span class="token operator">=</span> currentFirstChild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 原父节点的第一个子节点</span>  <span class="token keyword">let</span> lastPlacedIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> newIdx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 跟随 newChildren</span>  <span class="token keyword">let</span> nextOldFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 第一轮 遍历，根据newIdx 同时对比 新旧二叉树。条件：存在原先的子节点 且 未遍历完需要更新的子节点</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> oldFiber <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> newIdx <span class="token operator">&lt;</span> newChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> newIdx<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>oldFiber<span class="token punctuation">.</span>index <span class="token operator">></span> newIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>      nextOldFiber <span class="token operator">=</span> oldFiber<span class="token punctuation">;</span>      oldFiber <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> nextOldFiber <span class="token operator">=</span> oldFiber<span class="token punctuation">.</span>sibling<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正常来说 nextOldFiber 就是下一个节点了</span>    <span class="token keyword">const</span> newFiber <span class="token operator">=</span> <span class="token function">updateSlot</span><span class="token punctuation">(</span>      <span class="token comment" spellcheck="true">// 该函数目的：如果 key 相同的话就可以复用 oldFiber。（对应上面第一个if: oldFiber 如果为空的话，就会重新创建一个 fiber）</span>      returnFiber<span class="token punctuation">,</span>      oldFiber<span class="token punctuation">,</span>      newChildren<span class="token punctuation">[</span>newIdx<span class="token punctuation">]</span><span class="token punctuation">,</span>      expirationTime    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>虽然有三次 for 循环，但是本质上只是遍历了一次整个 newChild Array。</p><p>第一轮遍历的核心逻辑是复用和当前节点索引一致的老节点，一旦出现不能复用的情况就跳出 <em>break current</em> 遍历。</p><ul><li>新旧节点都为文本节点，可以直接复用，因为文本节点不需要 key</li><li>其他类型节点一律通过判断 key 是否相同来复用或创建节点（可能类型不同但 key 相同）</li></ul><p>当第一轮遍历结束后，其中存在两种特殊情况：</p><ul><li>newChild 已经遍历完： 当 newChild 已经遍历完 只需要把所有剩余的老节点都删除即可。删除的逻辑也就是(设置 effectTag 为 Deletion)</li><li>老的节点已经遍历完了：当出现老的节点已经遍历完了的情况时，就会<strong>开始第二轮遍历</strong>。这轮遍历的逻辑很简单，只需要把剩余新的节点全部创建完毕即可。</li></ul><p>第三轮遍历的核心逻辑是找出可以复用的老节点并移动位置，不能复用的话就只能创建一个新的了。<br>首先把所有剩余的老节点都丢到一个 map 中。<br>在遍历的过程中会寻找新的节点的 key 是否存在于这个 map 中，</p><ul><li>存在即可复用，如果复用成功，就应该把复用的 key 从 oldtree-map 中删掉，并且给复用的节点移动位置(给 effectTag 赋值为 Placement)</li><li>不存在就只能创建一个新的。<br>此轮遍历结束后，把还存在于 map 中的所有老节点删除</li></ul><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><blockquote><ul><li><a href="https://react.iamkasong.com/">https://react.iamkasong.com/</a></li><li><a href="https://yuchengkai.cn/react/">https://yuchengkai.cn/react/</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-HOC 浅谈</title>
      <link href="/2021/04/26/za-tan-react-hoc/"/>
      <url>/2021/04/26/za-tan-react-hoc/</url>
      
        <content type="html"><![CDATA[<p>HOC 其实有两种模式,</p><h2 id="一种是『属性代理』"><a href="#一种是『属性代理』" class="headerlink" title="一种是『属性代理』"></a>一种是『属性代理』</h2><p>属性代理大家很熟悉了,也是大家最常用的一种 HOC 形式,主要是用于修改 props,抽象 state, 调取 refs 等等,就不多赘述了,以上这些 React Hooks 都能完成的更出色.</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">HOC</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">CHOC</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token operator">&lt;</span>WrappedComponent <span class="token punctuation">{</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="还有一种模式叫『反向继承』"><a href="#还有一种模式叫『反向继承』" class="headerlink" title="还有一种模式叫『反向继承』"></a>还有一种模式叫『反向继承』</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">HOC</span><span class="token punctuation">(</span>WrappedComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">Enhancer</span> <span class="token keyword">extends</span> <span class="token class-name">WrappedComponent</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>此模式与『属性代理』不同之处是，HOC 返回的新组件其实是继承了原始组件的,当然这在 React 的理念中有点反模式,因为大家一直强调的是『组合优于继承』</p><p>由于是<strong>继承了原始组件</strong>,所以『反向继承』中可以做一些更『出格的操作』,我们称这一系列的操作为『渲染劫持』</p><p>比如一个渲染劫持的例子是修改 elements tree, 比如我们想把一个 input 组件的 value 修改为’world’</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> HOC <span class="token operator">=</span> <span class="token punctuation">(</span>Component<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">EnhancerComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> displayName <span class="token operator">=</span> <span class="token string">"UserGetComponent"</span><span class="token punctuation">;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> elementsTree <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">let</span> newProps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>elementsTree <span class="token operator">&amp;&amp;</span> elementsTree<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"input"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        newProps <span class="token operator">=</span> <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">"world"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">const</span> props <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> elementsTree<span class="token punctuation">.</span>props<span class="token punctuation">,</span> newProps<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> newElementsTree <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>        elementsTree<span class="token punctuation">,</span>        props<span class="token punctuation">,</span>        elementsTree<span class="token punctuation">.</span>props<span class="token punctuation">.</span>children      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> newElementsTree<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>这种情况下,所有被 HOC 修饰过的组件,如果是一个 input 组件,那么 value 全部会被渲染为 world</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单元测试</title>
      <link href="/2021/04/15/bi-ji-dan-yuan-ce-shi/"/>
      <url>/2021/04/15/bi-ji-dan-yuan-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="TDD-和-BDD-的区别"><a href="#TDD-和-BDD-的区别" class="headerlink" title="TDD 和 BDD 的区别"></a>TDD 和 BDD 的区别</h2><p>从各自的定义分析：TDD 是一种从测试验收层面来推动整个项目开发的技术；BDD 是一种对系统行为进行设计的协作技术。 从参与者来分析：TDD 的参与者是开发和测试之间；BDD 是专注于参与项目协作的每一个人员与用户之间。</p><p><a href="https://juejin.cn/post/6844904009887645709">JS 测试框架 Jest/Mocha/Ava 的简单比较</a></p><h2 id="单元测试和集成测试的区别"><a href="#单元测试和集成测试的区别" class="headerlink" title="单元测试和集成测试的区别"></a>单元测试和集成测试的区别</h2><ul><li>单元测试：英文是(unit testing) 单,是指对软件中的最小可测试单元进行检查和验证。前端所说的单元测试就是对一个模块进行测试。也就是说前端测试的时候，你测试的东西一定是一个模块。</li><li>集成测试：也叫组装测试或者联合测试。在单元测试的基础上，将所有模块按照涉及要求组装成为子系统或系统，进行集成测试。</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>初始化 <code>npx jest --init</code><br>生成<code>jest.config.ts</code>文件</p><blockquote><p>package.json 一些常用 script</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span></code></pre></blockquote><pre><code>&quot;test&quot;: &quot;jest --watchAll&quot;,&quot;coverage&quot;:&quot;jest --coverage&quot;</code></pre><p>},</p><blockquote><pre><code></code></pre></blockquote><h3 id="让-Jest-支持-import-和-ES6-语法"><a href="#让-Jest-支持-import-和-ES6-语法" class="headerlink" title="让 Jest 支持 import 和 ES6 语法"></a>让 Jest 支持 import 和 ES6 语法</h3><p>在 Jest 里有一个 babel-jest 组件，我们在使用 yarn test 的时候，它先去检测开发环境中是否安装了 babel，也就是查看有没有 babel-core，如果有 bable-core 就会去查看.babelrc 配置文件，根据配置文件进行转换，转换完成，再进行测试。<br><code>yarn add @babel/core@7.4.5 @babel/preset-env@7.4.5 --dev</code><br>在<code>.babelrc</code>中</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>    <span class="token string">"presets"</span><span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token punctuation">[</span>                <span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span><span class="token punctuation">{</span>                <span class="token string">"targets"</span><span class="token punctuation">:</span><span class="token punctuation">{</span>                    <span class="token string">"node"</span><span class="token punctuation">:</span><span class="token string">"current"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h2><pre class=" language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"测试严格相等"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span> number<span class="token punctuation">:</span> <span class="token string">"007"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">expect</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token punctuation">{</span> number<span class="token punctuation">:</span> <span class="token string">"007"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// fail</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="全局方法"><a href="#全局方法" class="headerlink" title="全局方法"></a>全局方法</h2><ul><li>4 个钩子<ul><li><code>beforeAll</code></li><li><code>afterAll</code></li><li><code>beforeEach</code></li><li><code>afterEach</code></li></ul></li><li><code>test</code><ul><li>concurrent</li><li>each</li><li>only</li><li>skip</li><li>todo</li></ul></li><li><code>describe</code><ul><li>each</li><li>only</li><li>skip</li></ul></li></ul><h2 id="匹配器"><a href="#匹配器" class="headerlink" title="匹配器"></a><a href="https://jestjs.io/docs/en/expect">匹配器</a></h2><ul><li><code>toBe(xx)</code></li><li><code>toEqual(xx)</code></li><li><code>toBeNull()</code></li><li><code>toBeDefined()</code><br>需要注意<code>null</code>也可以通过，只要是 defined</li><li><code>toBeTruthy()</code></li><li><code>toBeFalsy()</code></li><li><code>toBeGreaterThan(xx)</code></li><li><code>toBeLessThan()</code></li><li><code>toBeGreaterThanOrEqual()</code></li><li><code>toBeLessThanOrEqual()</code></li><li><code>toBeCloseTo()</code><br>这个是可以自动消除 JavaScript 浮点精度错误的匹配器，举个例子，比如我们让 0.1 和 0.2 相加，这时候 js 得到的值应该是 0.30000000000004,所以如果用 toEqual()匹配器，测试用例会通过不了测试的。</li><li><code>toMatch()</code><br>字符串包含字符串</li><li><code>toContain()</code><br>数组包含 item</li><li><code>toThrow()</code><br>专门对异常进行处理的匹配器，可以检测一个 Function 会不会抛出异常<br><a href="https://jspang.com/detailed?id=65#toc344">例解</a></li><li><code>not</code><br>是 Jest 中比较特殊的匹配器，对其他匹配器进行取反</li></ul><h2 id="4-个钩子函数"><a href="#4-个钩子函数" class="headerlink" title="4 个钩子函数"></a>4 个钩子函数</h2><p>钩子函数的特点如下</p><ul><li>钩子函数在父级分组可作用域子集，类似继承</li><li>钩子函数同级分组作用域互不干扰，各起作用</li><li>先执行外部的钩子函数，再执行内部的钩子函数</li></ul><h2 id="对测试用例分组-describe"><a href="#对测试用例分组-describe" class="headerlink" title="对测试用例分组 describe"></a>对测试用例分组 <code>describe</code></h2><p>describe 可以嵌套<br>结构：</p><pre class=" language-js"><code class="language-js"><span class="token function">describe</span><span class="token punctuation">(</span><span class="token string">"分组1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"test1"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"test2"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p><a href="https://cloud.tencent.com/developer/column/75529/tag-10752">进阶短教程</a> &gt; <a href="https://segmentfault.com/a/1190000015935519">技术框架</a> &gt; <a href="https://segmentfault.com/a/1190000016828718">React 单元测试策略及落地</a></p></blockquote><h1 id="引入-Enzyme"><a href="#引入-Enzyme" class="headerlink" title="引入 Enzyme"></a>引入 Enzyme</h1><p>Enzyme 是一个库，用于在测试时处理你的 React 组件。它由 Airbnb 开发</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 测试 </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js DOM对象和DOM</title>
      <link href="/2021/04/13/za-tan-js-dom-dui-xiang-he-dom/"/>
      <url>/2021/04/13/za-tan-js-dom-dui-xiang-he-dom/</url>
      
        <content type="html"><![CDATA[<h2 id="Property-和-Attributes"><a href="#Property-和-Attributes" class="headerlink" title="Property 和 Attributes"></a>Property 和 Attributes</h2><p><a href="https://www.cnblogs.com/elcarim5efil/p/4698980.html">详解来自</a><br>概念：</p><ul><li>property是DOM中的属性，是JavaScript里的对象；</li><li>attribute是HTML标签上的特性，它的值只能够是字符串；</li></ul><p>特性：</p><ul><li>property能够从attribute中得到同步；</li><li>attribute不会同步property上的值；</li><li>attribute和property之间的数据绑定是单向的，attribute-&gt;property；</li><li>更改property和attribute上的任意值，都会将更新反映到HTML页面中；</li></ul><p>特殊的几个属性：</p><ul><li>href 的property和attributes是双向绑定的(无论是绝对路径还是相对路径)</li><li>id</li><li>disabled</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2021/04/13/bi-ji-she-ji-mo-shi/"/>
      <url>/2021/04/13/bi-ji-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="设计模式的核心思想——封装变化"><a href="#设计模式的核心思想——封装变化" class="headerlink" title="设计模式的核心思想——封装变化"></a>设计模式的核心思想——封装变化</h3><p>代码需要考虑可维护性、可扩展性。<strong>将变与不变分离，确保变化的部分灵活、不变的部分稳定</strong>。</p><h3 id="五个基本原则"><a href="#五个基本原则" class="headerlink" title="五个基本原则"></a>五个基本原则</h3><ul><li>单一功能原则（Single Responsibility Principle）</li><li>开放封闭原则（Opened Closed Principle）</li><li>里式替换原则（Liskov Substitution Principle）</li><li>接口隔离原则（Interface Segregation Principle）</li><li>依赖反转原则（Dependency Inversion Principle）</li></ul><h3 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h3><p>5种 创建型（封装了创建对象过程中的变化）</p><p>7种 结构型（封装的是对象之间组合方式的变化，目的在于灵活地表达对象间的配合与依赖关系）</p><p>11种 行为型（将对象的行为进行抽离，确保我们能够更安全、更方便地对行为进行更改）</p><p><img src="https://i.loli.net/2021/04/13/RCfhw1jFAg3JplM.png" alt="image.png"></p><h1 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h1><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p><strong>构造器</strong>： 创建对象 确保属性不变，对共性封装；取值操作 开放个性。</p><pre class=" language-js"><code class="language-js">unction <span class="token function">User</span><span class="token punctuation">(</span>name <span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">,</span> work<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">this</span><span class="token punctuation">.</span>career <span class="token operator">=</span> career     <span class="token keyword">this</span><span class="token punctuation">.</span>work <span class="token operator">=</span> work<span class="token punctuation">}</span></code></pre><p>工厂模式其实就是<strong>将创建对象的过程单独封装</strong>，为了实现<strong>无脑传参</strong>。</p><p>在写了大量构造函数、调用了大量的 new、自觉非常不爽的情况下，我们就应该思考是不是可以掏出工厂模式重构我们的代码了。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Factory</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> work    <span class="token keyword">switch</span><span class="token punctuation">(</span>career<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'coder'</span><span class="token punctuation">:</span>            work <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'写代码'</span><span class="token punctuation">,</span><span class="token string">'写系分'</span><span class="token punctuation">,</span> <span class="token string">'修Bug'</span><span class="token punctuation">]</span>             <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token string">'product manager'</span><span class="token punctuation">:</span>            work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'订会议室'</span><span class="token punctuation">,</span> <span class="token string">'写PRD'</span><span class="token punctuation">,</span> <span class="token string">'催更'</span><span class="token punctuation">]</span>            <span class="token keyword">break</span>        <span class="token keyword">case</span> <span class="token string">'boss'</span><span class="token punctuation">:</span>            work <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'喝茶'</span><span class="token punctuation">,</span> <span class="token string">'看报'</span><span class="token punctuation">,</span> <span class="token string">'见客户'</span><span class="token punctuation">]</span>        <span class="token keyword">case</span> <span class="token string">'xxx'</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">// 其它工种的职责分配</span>            <span class="token operator">...</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> career<span class="token punctuation">,</span> work<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><p>开放封闭原则：对拓展开放，对修改封闭。说得更准确点，<strong>软件实体（类、模块、函数）可以扩展，但是不可修改</strong>。</p><p>和简单工厂模式对比 的共同点，在于都<strong>尝试去分离一个系统中变与不变的部分</strong>。</p><p>不同在于<strong>场景的复杂度</strong>，抽象工厂本质上处理的其实也是类，但是是一帮非常棘手、繁杂的类，这些类中不仅能划分出门派，还能划分出等级，同时存在着千变万化的扩展可能性——这使得我们必须对<strong>共性</strong>作更特别的处理、使用抽象类去降低扩展的成本，同时需要对类的性质作划分，</p><p>包含四个关键角色：</p><ol><li>抽象工厂<strong>（抽象类，它不能被用于生成具体实例）</strong></li><li>具体工厂<strong>（用于生成产品族里的一个具体的产品）</strong></li><li>抽象产品<strong>（抽象类，它不能被用于生成具体实例）</strong></li><li>具体产品<strong>（用于生成产品族里的一个具体的产品所依赖的更细粒度的产品）</strong></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 提供操作系统的接口</span>    <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象工厂方法不允许直接调用，你需要将我重写！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 提供硬件的接口</span>    <span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"抽象工厂方法不允许直接调用，你需要将我重写！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 具体工厂继承自抽象工厂</span><span class="token keyword">class</span> <span class="token class-name">FakeStarFactory</span> <span class="token keyword">extends</span> <span class="token class-name">MobilePhoneFactory</span> <span class="token punctuation">{</span>    <span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 提供安卓系统实例</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AndroidOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 提供高通硬件实例</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QualcommHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*OS*/</span><span class="token comment" spellcheck="true">// 定义操作系统这类产品的抽象产品类</span><span class="token keyword">class</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>    <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象产品方法不允许直接调用，你需要将我重写！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义具体操作系统的具体产品类</span><span class="token keyword">class</span> <span class="token class-name">AndroidOS</span> <span class="token keyword">extends</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>    <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用安卓的方式去操作硬件'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">AppleOS</span> <span class="token keyword">extends</span> <span class="token class-name">OS</span> <span class="token punctuation">{</span>    <span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用🍎的方式去操作硬件'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token comment" spellcheck="true">/*hardware*/</span><span class="token comment" spellcheck="true">// 定义手机硬件这类产品的抽象产品类</span><span class="token keyword">class</span> <span class="token class-name">HardWare</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 手机硬件的共性方法，这里提取了“根据命令运转”这个共性</span>    <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'抽象产品方法不允许直接调用，你需要将我重写！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义具体硬件的具体产品类</span><span class="token keyword">class</span> <span class="token class-name">QualcommHardWare</span> <span class="token keyword">extends</span> <span class="token class-name">HardWare</span> <span class="token punctuation">{</span>    <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用高通的方式去运转'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MiWare</span> <span class="token keyword">extends</span> <span class="token class-name">HardWare</span> <span class="token punctuation">{</span>    <span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我会用小米的方式去运转'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">...</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 这是我的手机</span><span class="token keyword">const</span> myPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FakeStarFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 让它拥有操作系统</span><span class="token keyword">const</span> myOS <span class="token operator">=</span> myPhone<span class="token punctuation">.</span><span class="token function">createOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 让它拥有硬件</span><span class="token keyword">const</span> myHardWare <span class="token operator">=</span> myPhone<span class="token punctuation">.</span><span class="token function">createHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 启动操作系统(输出‘我会用安卓的方式去操作硬件’)</span>myOS<span class="token punctuation">.</span><span class="token function">controlHardWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 唤醒硬件(输出‘我会用高通的方式去运转’)</span>myHardWare<span class="token punctuation">.</span><span class="token function">operateByOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式：<strong>保证一个类仅有一个实例，并提供一个访问它的全局访问点</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">SingleDog</span> <span class="token punctuation">{</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是一个单例对象'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断是否已经new过1个实例</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>SingleDog<span class="token punctuation">.</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 若这个唯一的实例不存在，那么先创建它</span>            SingleDog<span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 如果这个唯一的实例已经存在，则直接返回</span>        <span class="token keyword">return</span> SingleDog<span class="token punctuation">.</span>instance    <span class="token punctuation">}</span><span class="token punctuation">}</span>SingleDog<span class="token punctuation">.</span>getInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义自由变量instance，模拟私有变量</span>    <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断自由变量是否为null</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果为null则new出唯一实例</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> s1 <span class="token operator">=</span> SingleDog<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>在vuex和redux里的install阶段都有用到单例模式，为了保证一个app只有一个全局store</p><p>应用场景： 借助localStorage实现的简单全局唯一store；前端唯一modal 控制显示隐藏（不能变换innerHtml）</p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>在 Java 等强类型语言中，原型模式的出现是为了实现类型之间的解耦。</p><p>而JavaScript 这门语言的根本就是原型模式。所以暂且不谈设计模式，只谈编程范式。</p><p>原型编程范式的核心思想就是<strong>利用实例来描述对象，用实例作为定义对象和继承的基础</strong>。在 JavaScript 中，原型编程范式的体现就是<strong>基于原型链的继承</strong>。这其中，对原型、原型链的理解是关键</p><p><code>Object.create()</code></p><p>deepclone的实现</p><h1 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h1><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p><strong>对已有的功能做个拓展，只关心拓展出来的那部分新功能如何实现</strong></p><p>ES7 实现的Decorator(target, keyName, descriptor)。<code>@decorator \n function xx()&#123;&#125;</code></p><p>React中的HOC 高阶组件，比如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> BorderHoc <span class="token operator">=</span> WrappedComponent <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Component <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> border<span class="token punctuation">:</span> <span class="token string">'solid 1px red'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>WrappedComponent <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Redux connect的 装饰器调用方式，比如</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-redux'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> bindActionCreators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux'</span><span class="token keyword">import</span> action <span class="token keyword">from</span> <span class="token string">'./action.js'</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// App的业务逻辑</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mapStateToProps</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 假设App的状态对应状态树上的app节点</span>  <span class="token keyword">return</span> state<span class="token punctuation">.</span>app<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">mapDispatchToProps</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 这段看不懂也没关系，下面会有解释。重点理解connect的调用即可</span>  <span class="token keyword">return</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 把App组件与Redux绑在一起</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> mapDispatchToProps<span class="token punctuation">)</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span></code></pre><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>通过<strong>把一个类的接口变换成客户端所期待的另一种接口</strong>，可以帮我们解决<strong>不兼容</strong>的问题</p><p>比如，老的 AjaxRequire函数的调用参数是AjaxRequire(type, url, data, success, failed)</p><p>而新的fetch实现是</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">FetchUtils</span><span class="token punctuation">{</span>   <span class="token keyword">static</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">static</span> <span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">AjaxFC</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Ajax适配器函数，入参与旧接口保持一致</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">AjaxAdapter</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> type <span class="token operator">=</span> type<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> result    <span class="token keyword">try</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 实际的请求全部由新接口发起</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'GET'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">await</span> HttpUtils<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>type <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token keyword">await</span> HttpUtils<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 假设请求成功对应的状态码是1</span>        result<span class="token punctuation">.</span>statusCode <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> success <span class="token operator">?</span> <span class="token function">success</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">failed</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 捕捉网络错误</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>failed<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">failed</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span>statusCode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 用适配器适配旧的Ajax方法</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">Ajax</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">AjaxAdapter</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> success<span class="token punctuation">,</span> failed<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h4 id="引出了axios"><a href="#引出了axios" class="headerlink" title="引出了axios"></a>引出了axios</h4><p>axios 完美地<strong>抹平了两种环境下api的调用差异</strong>，靠的正是对适配器模式的灵活运用。核心逻辑：派发请求是<code>dispatchRequest</code></p><ol><li>数据转换，转换请求体/响应体，可以理解为数据层面的适配；</li><li>调用适配器。</li></ol><p>一个好的适配器的自我修养——把变化留给自己，把统一留给用户。在axios的adapter中，所有关于 http 模块、关于 xhr 的实现细节，全部被 Adapter 封装进了自己复杂的底层逻辑里，暴露给用户的都是十分简单的统一的东西——统一的接口，统一的入参，统一的出参，统一的规则。</p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>一个对象<strong>不能直接访问</strong>另一个对象，需要一个<strong>第三者</strong>（代理）牵线搭桥从而间接达到访问目的。</p><h5 id="ES6中的Proxy"><a href="#ES6中的Proxy" class="headerlink" title="ES6中的Proxy"></a>ES6中的Proxy</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> handler<span class="token punctuation">)</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> girl <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 姓名</span>  name<span class="token punctuation">:</span> <span class="token string">'小美'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 自我介绍</span>  aboutMe<span class="token punctuation">:</span> <span class="token string">'...'</span>  <span class="token comment" spellcheck="true">// 年龄</span>  age<span class="token punctuation">:</span> <span class="token number">24</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 职业</span>  career<span class="token punctuation">:</span> <span class="token string">'teacher'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 假头像</span>  fakeAvatar<span class="token punctuation">:</span> <span class="token string">'xxxx'</span>  <span class="token comment" spellcheck="true">// 真实头像</span>  avatar<span class="token punctuation">:</span> <span class="token string">'xxxxx'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 手机号</span>  phone<span class="token punctuation">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 礼物数组</span>  presents<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 拒收50块以下的礼物</span>  bottomValue<span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 记录最近一次收到的礼物</span>  lastPresent<span class="token punctuation">:</span> present<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token keyword">const</span> baseInfo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'career'</span><span class="token punctuation">]</span><span class="token keyword">const</span> privateInfo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'avatar'</span><span class="token punctuation">,</span> <span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 最私密信息</span><span class="token comment" spellcheck="true">// 掘金婚介所登场了</span><span class="token keyword">const</span> JuejinLovers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>girl<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>girl<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>baseInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>isValidated<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'您还没有完成验证哦'</span><span class="token punctuation">)</span>          <span class="token keyword">return</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//...(此处省略其它有的没的各种校验逻辑)</span>      <span class="token comment" spellcheck="true">// 此处我们认为只有验证过的用户才可以购买VIP</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>isValidated <span class="token operator">&amp;&amp;</span> privateInfo<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>isVIP<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'只有VIP才可以查看该信息哦'</span><span class="token punctuation">)</span>          <span class="token keyword">return</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>girl<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 最近一次送来的礼物会尝试赋值给lastPresent字段</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">'lastPresent'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> girl<span class="token punctuation">.</span>bottomValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'sorry，您的礼物被拒收了'</span><span class="token punctuation">)</span>          <span class="token keyword">return</span>      <span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 如果没有拒收，则赋值成功，同时并入presents数组</span>      girl<span class="token punctuation">.</span>lastPresent <span class="token operator">=</span> val      girl<span class="token punctuation">.</span>presents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>girl<span class="token punctuation">.</span>presents<span class="token punctuation">,</span> val<span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="前端四种类型的-应用实践"><a href="#前端四种类型的-应用实践" class="headerlink" title="前端四种类型的 应用实践"></a>前端四种类型的 应用实践</h5><ol><li><p>事件代理</p><p><code>div&gt; 10*a</code>鼠标点击每个 a 标签，都可以弹出“我是第x个a”这样的提示，考虑到<strong>事件本身具有“冒泡”的特性</strong>，当我们点击 a 元素时，点击事件会“冒泡”到父元素 div 上，从而被监听到</p><p><code>father.addEventListener(&#39;click&#39;, function(e) &#123; if(e.target.tagName===&#39;a&#39;)&#123;&#125;&#125; </code></p></li><li><p>虚拟代理</p><p><a href="https://github.com/Hojondo/utils/blob/master/image.js">图片预加载的实现</a></p></li><li><p>缓存代理</p><p>应用于一些计算量较大的场景里。在这种场景下，我们需要“用空间换时间”——当我们需要用到某个已经计算过的值的时候，不想再耗时进行二次计算，而是希望能从内存里去取出现成的计算结果</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// addAll方法会对你传入的所有参数做求和操作</span><span class="token keyword">const</span> addAll <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'进行了一次新计算'</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">const</span> len <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        result <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 为求和方法创建代理</span><span class="token keyword">const</span> proxyAddAll <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 求和结果的缓存池</span>    <span class="token keyword">const</span> resultCache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将入参转化为一个唯一的入参字符串</span>        <span class="token keyword">const</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>join<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 检查本次入参是否有对应的计算结果</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token keyword">in</span> resultCache<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 如果有，则返回缓存池里现成的结果</span>            <span class="token keyword">return</span> resultCache<span class="token punctuation">[</span>args<span class="token punctuation">]</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> resultCache<span class="token punctuation">[</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token operator">...</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li><li><p>保护代理</p><p>所谓“保护代理”，就是在访问层面做文章，在 getter 和 setter 函数里去进行校验和拦截，确保一部分变量是安全的。目前实现保护代理时，考虑的首要方案就是 ES6 中的 Proxy</p></li></ol><h1 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h1><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><p><strong>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换</strong>，实现算法提取、算法封装、分发优化的整个一条龙的操作流。算法，就是我们这个场景中的询价逻辑，它也可以是你任何一个功能函数的逻辑；“封装”就是把某一功能点对应的逻辑给提出来；“可替换”建立在封装的基础上，只是说这个“替换”的判断过程。</p><p>实现“对扩展开放，对修改封闭”的原则。去掉复杂的<code>if-else</code>复杂交错的多个逻辑杂糅。</p><p><strong>对象映射</strong>！既能够既帮我们明确映射关系，同时不破坏代码的灵活性</p><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><p>策略模式和状态模式确实是相似的，它们都封装行为、都通过委托来实现行为分发。<br>但策略模式中的行为函数是”潇洒“的行为函数，它们不依赖调用主体、互相平行、各自为政，井水不犯河水。而状态模式中的行为函数，首先是<strong>和状态主体之间存在着关联</strong>，由状态主体把它们串在一起；另一方面，正因为关联着同样的一个（或一类）主体，所以不同状态对应的行为函数可能并不会特别割裂。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">CoffeeMaker</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**      这里略去咖啡机中与咖啡状态切换无关的一些初始化逻辑    **/</span>    <span class="token comment" spellcheck="true">// 初始化状态，没有切换任何咖啡模式</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token string">"init"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 初始化牛奶的存储量</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>leftMilk <span class="token operator">=</span> <span class="token string">"500ml"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  stateToProcessor <span class="token operator">=</span> <span class="token punctuation">{</span>    that<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">,</span>    <span class="token function">american</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"咖啡机现在的牛奶存储量是:"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>that<span class="token punctuation">.</span>leftMilk<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我只吐黑咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">latte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">american</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"加点奶"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">vanillaLatte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">latte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再加香草糖浆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">mocha</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">latte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"再加巧克力"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 关注咖啡机状态切换函数</span>  <span class="token function">changeState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> state<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>stateToProcessor<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>stateToProcessor<span class="token punctuation">[</span>state<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CoffeeMaker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mk<span class="token punctuation">.</span><span class="token function">changeState</span><span class="token punctuation">(</span><span class="token string">"latte"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>应用场景是：状态模式主要解决的是当控制一个对象状态的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化。<strong>允许一个对象在其内部状态改变时改变它的行为</strong></p><h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个目标对象，当这个目标对象的状态发生变化时，会通知所有观察者对象，使它们能够自动更新。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义发布者类</span><span class="token keyword">class</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Publisher created'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 增加订阅者</span>  <span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Publisher.add invoked'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 移除订阅者</span>  <span class="token function">remove</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Publisher.remove invoked'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 通知所有订阅者</span>  <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Publisher.notify invoked'</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>observers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义订阅者类</span><span class="token keyword">class</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer created'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Observer.update invoked'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 定义一个具体的需求文档（prd）发布类</span><span class="token keyword">class</span> <span class="token class-name">PrdPublisher</span> <span class="token keyword">extends</span> <span class="token class-name">Publisher</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 初始化需求文档</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token comment" spellcheck="true">// 韩梅梅还没有拉群，开发群目前为空</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>observers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PrdPublisher created'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 该方法用于获取当前的prdState</span>    <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PrdPublisher.getState invoked'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prdState    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 该方法用于改变prdState的值</span>    <span class="token function">setState</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'PrdPublisher.setState invoked'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// prd的值发生改变</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> state        <span class="token comment" spellcheck="true">// 需求文档变更，立刻通知所有开发者</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义一个具体的订阅者</span><span class="token keyword">class</span> <span class="token class-name">DeveloperObserver</span> <span class="token keyword">extends</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 需求文档一开始还不存在，prd初始为空对象</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DeveloperObserver created'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 重写一个具体的update方法</span>    <span class="token function">update</span><span class="token punctuation">(</span>publisher<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'DeveloperObserver.update invoked'</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 更新需求文档</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>prdState <span class="token operator">=</span> publisher<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 调用工作函数</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// work方法，一个专门搬砖的方法</span>    <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取需求文档</span>        <span class="token keyword">const</span> prd <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>prdState        <span class="token comment" spellcheck="true">// 开始基于需求文档提供的信息搬砖。。。</span>        <span class="token operator">...</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'996 begins...'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="vue双向绑定的原理"><a href="#vue双向绑定的原理" class="headerlink" title="vue双向绑定的原理"></a>vue双向绑定的原理</h4><p>有三个关键角色</p><ul><li>observer监听者，不仅是一个数据监听器，它还需要对监听到的数据进行<strong>转发</strong>——也就是说它<strong>同时还是一个发布者</strong>。</li><li>watcher订阅者，observer 把数据转发给了<strong>真正的订阅者</strong>——watcher对象。watcher 接收到新的数据后，会去更新视图。</li><li>compile编译者，MVVM 框架特有的角色，负责对每个节点元素指令进行扫描和解析，指令的数据初始化、订阅者的创建这些“杂活”之类</li></ul><h5 id="observer的实现"><a href="#observer的实现" class="headerlink" title="observer的实现"></a>observer的实现</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">observe</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 若target是一个对象，则遍历它</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// defineReactive方法会给目标属性装上“监听器”</span>            <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义defineReactive方法</span><span class="token keyword">function</span> <span class="token function">defineReactive</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 属性值也可能是object类型，这种情况下需要调用observe进行递归遍历</span>    <span class="token function">observe</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 为当前属性安装监听器</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 可枚举</span>        enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 不可配置</span>        configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>         <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> val<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 监听器函数</span>        <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>target<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">属性的</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">属性从</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>val<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">值变成了了</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>value<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>              dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            val <span class="token operator">=</span> value        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义订阅者类Dep</span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化订阅队列</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 增加订阅者</span>    <span class="token function">addSub</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span>    <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 通知订阅者（是不是所有的代码都似曾相识？）</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sub<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            sub<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="event-bus的实现"><a href="#event-bus的实现" class="headerlink" title="event bus的实现"></a>event bus的实现</h5><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">EventEmitter</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// handlers是一个map，用于存储事件与回调之间的对应关系</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// on方法用于安装事件监听器，它接受目标事件名和回调函数作为参数</span>  <span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 先检查一下目标事件名有没有对应的监听函数队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 如果没有，那么首先初始化一个监听函数队列</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 把回调函数推入目标事件的监听函数队列里去</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// emit方法用于触发目标事件，它接受事件名和监听函数入参作为参数</span>  <span class="token function">emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 检查目标事件是否有监听函数队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 这里需要对 this.handlers[eventName] 做一次浅拷贝，主要目的是为了避免通过 once 安装的监听器在移除的过程中出现顺序问题</span>      <span class="token keyword">const</span> handlers <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 如果有，则逐个调用队列里的回调函数</span>      handlers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 移除某个事件回调队列里的指定回调函数</span>  <span class="token function">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> callbacks <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handlers<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span>    <span class="token keyword">const</span> index <span class="token operator">=</span> callbacks<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>cb<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      callbacks<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 为事件注册单次监听器</span>  <span class="token function">once</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> cb<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 对回调函数进行包装，使其执行完毕自动被移除</span>    <span class="token keyword">const</span> wrapper <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">cb</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> wrapper<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>观察者模式和发布-订阅模式的区别</p><p>观察者模式和发布-订阅模式之间的区别，在于是否存在第三方、发布者能否直接感知订阅者（如图所示）</p><p><strong>发布者直接触及到订阅者</strong>的操作，叫观察者模式</p><p>上述例子是观察者模式</p><p><img src="https://i.loli.net/2021/04/15/67qmTd5psjHBIre.png" alt="观察者模式"></p><p><strong>发布者不直接触及到订阅者、而是由统一的第三方来完成实际的通信的操作，叫做发布-订阅模式</strong>。</p><p>通过EventBus去实现事件监听/发布，属于发布-订阅模式。</p><p><img src="https://i.loli.net/2021/04/15/4lFCGL1IsVg7Mkf.png" alt="发布-订阅模式"></p><p>观察者模式<strong>没有完全地解决耦合问题</strong>——发布者(被观察者)必须去维护一套观察者的集合</p></blockquote><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>迭代器模式提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露该对象的内部表示。</p><p>Array.prototype.forEach 只是对array数据类型的遍历，对element node array等 类数组不可用。</p><p>ES5之前，JS原生的集合类型数据结构，只有Array（数组）和Object（对象）；而ES6中，又新增了Map和Set。四种数据结构各自有着自己特别的内部实现，但我们仍期待以同样的一套规则去遍历它们，所以ES6在推出新数据结构的同时也推出了一套<strong>统一的接口机制</strong>——迭代器（Iterator）。</p><p>ES6约定，任何数据结构只要具备<strong>Symbol.iterator属性</strong>（这个属性就是Iterator的具体实现，它本质上是当前数据结构默认的迭代器生成函数），就可以被遍历——准确地说，是被for…of…循环和迭代器的next方法遍历。 事实上，for…of…的背后正是对next方法的反复调用。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">// 通过调用iterator，拿到迭代器对象</span><span class="token keyword">const</span> iterator <span class="token operator">=</span> arr<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 对迭代器对象执行next，就能逐个访问集合的成员</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p><a href="https://juejin.cn/post/6953423646664687652">https://juejin.cn/post/6953423646664687652</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js 垃圾回收</title>
      <link href="/2021/04/12/bi-ji-js-la-ji-hui-shou/"/>
      <url>/2021/04/12/bi-ji-js-la-ji-hui-shou/</url>
      
        <content type="html"><![CDATA[<p>由一个闭包问题引发的穷考究<br><a href="https://github.com/raxxarr/note/issues/3">https://github.com/raxxarr/note/issues/3</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ejs</title>
      <link href="/2021/04/08/bi-ji-ejs/"/>
      <url>/2021/04/08/bi-ji-ejs/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://ejs.co/">https://ejs.co/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模版引擎 </tag>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端CI/CD</title>
      <link href="/2021/03/23/sui-bi-qian-duan-ci-cd/"/>
      <url>/2021/03/23/sui-bi-qian-duan-ci-cd/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://juejin.cn/post/6844903576477794312">https://juejin.cn/post/6844903576477794312</a></p><h3 id="三个概念"><a href="#三个概念" class="headerlink" title="三个概念"></a>三个概念</h3><ol><li>CI 持续集成（Continuous Integration）</li><li>CD 持续交付（Continuous Delivery）</li><li>CD 持续部署（Continuous Deployment）</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li>Jenkins, Jenkins 是开源 CI&amp;CD 软件领导者， 提供超过 1000 个插件来支持构建、部署、自动化， 满足任何项目的需要。</li><li>Docker</li><li><a href="https://github.com/commitizen/cz-cli">commitizen</a> 限定 commit 格式规范 <code>npm install -g commitizen cz-conventional-changelog</code> &amp; 配置<code>.czrc文件</code> &amp; <code>git cz 代替 git commit</code></li></ul><h2 id="详细"><a href="#详细" class="headerlink" title="详细"></a>详细</h2><p><a href="https://segmentfault.com/a/1190000024453209">https://segmentfault.com/a/1190000024453209</a></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://git-scm.com/docs/githooks">githooks</a><br><a href="https://bbs.huaweicloud.com/blogs/220620">https://bbs.huaweicloud.com/blogs/220620</a><br><a href="https://zhuanlan.zhihu.com/p/373150773">https://zhuanlan.zhihu.com/p/373150773</a><br><a href="https://syncd.cc/">https://syncd.cc</a><br><a href="https://www.atlassian.com/continuous-delivery/continuous-integration/git-hooks">https://www.atlassian.com/continuous-delivery/continuous-integration/git-hooks</a><br><a href="https://devops.stackexchange.com/questions/8447/ci-platforms-versus-simple-git-hooks">https://devops.stackexchange.com/questions/8447/ci-platforms-versus-simple-git-hooks</a><br><a href="https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks">https://www.digitalocean.com/community/tutorials/how-to-use-git-hooks-to-automate-development-and-deployment-tasks</a><br>使用 ansible 来自动化部署；selenium 自动化测试<br><a href="https://www.zhihu.com/question/23444990">如何理解持续集成、持续交付、持续部署？</a><br><a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd">https://www.redhat.com/zh/topics/devops/what-is-ci-cd</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-dependent-form</title>
      <link href="/2021/03/21/lun-zi-react-dependent-form/"/>
      <url>/2021/03/21/lun-zi-react-dependent-form/</url>
      
        <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>An open source component of form for react in <a href="https://www.npmjs.com/package/react-dependent-form">NPM</a><br>Support dynamic options，dynamic editability, dynamic validation rule，based on linked fields in same form.</p><h2 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h2><ul><li>Text Field</li><li>AutoInput Field</li><li>Multiple AutoInput Field</li><li>Select Field</li><li>Radio Field</li><li>Checkbox</li><li>DatePicker</li><li>DateRangePicker</li><li>DateTimePicker</li><li><del>Cascader Select Field</del> <em>!todo</em></li></ul><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p><code>npm install react-dependent-form</code></p><p><img src="https://i.loli.net/2021/04/17/GqL3xm2M9pcVgRy.png" alt="Screen Shot.png"></p><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><p><del>todo table</del></p><h2 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h2><ul><li><a href="https://codesandbox.io/s/react-dependent-form-demo-bkjn4">Demo</a></li></ul><h2 id="Quickstart"><a href="#Quickstart" class="headerlink" title="Quickstart"></a>Quickstart</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span>  Form<span class="token punctuation">,</span>  FieldText<span class="token punctuation">,</span>  FieldAutoInput<span class="token punctuation">,</span>  FieldSelect<span class="token punctuation">,</span>  FieldDatePicker<span class="token punctuation">,</span>  FieldDateTimePicker<span class="token punctuation">,</span>  FieldDateRangePicker<span class="token punctuation">,</span>  FieldRadio<span class="token punctuation">,</span>  FieldCheckbox<span class="token punctuation">,</span>  FormResetBtn<span class="token punctuation">,</span>  FormSubmitBtn<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-dependent-form"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Get_Options_by_Input <span class="token operator">=</span> <span class="token punctuation">(</span>targetField<span class="token punctuation">,</span> InputValue<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>  axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> params<span class="token punctuation">:</span> <span class="token punctuation">{</span> targetField<span class="token punctuation">,</span> InputValue <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> mockOption <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>formValues<span class="token punctuation">,</span> setformValues<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Form        onSubmit<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token function">setformValues</span><span class="token punctuation">(</span>vals<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span>        <span class="token operator">&lt;</span>FieldText          name<span class="token operator">=</span><span class="token string">"input"</span>          label<span class="token operator">=</span><span class="token string">"Field Text"</span>          tips<span class="token operator">=</span><span class="token string">"tips"</span>          <span class="token comment" spellcheck="true">//   clearFieldsOnChange={["autoInput"]} optional</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>FieldAutoInput          name<span class="token operator">=</span><span class="token string">"autoInput"</span>          label<span class="token operator">=</span><span class="token string">"AutoInput"</span>          optionsData<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">async</span> <span class="token punctuation">(</span>record<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">Get_Options_by_Input</span><span class="token punctuation">(</span><span class="token string">"autoInput"</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">.</span>data<span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">}</span>          dependOnFields<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">"input"</span><span class="token punctuation">]</span><span class="token punctuation">}</span>          tips<span class="token operator">=</span><span class="token string">"sss"</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>FieldAutoInput          multiple<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span>          name<span class="token operator">=</span><span class="token string">"mul-autoInput"</span>          label<span class="token operator">=</span><span class="token string">"Multiple AutoInput"</span>          optionsData<span class="token operator">=</span><span class="token punctuation">{</span>mockOption<span class="token punctuation">}</span>          tips<span class="token operator">=</span><span class="token string">"sss"</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>FieldSelect name<span class="token operator">=</span><span class="token string">"select"</span> label<span class="token operator">=</span><span class="token string">"Select"</span> optionsData<span class="token operator">=</span><span class="token punctuation">{</span>mockOption<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>FieldDatePicker          name<span class="token operator">=</span><span class="token string">"date"</span>          label<span class="token operator">=</span><span class="token string">"Field Date Picker"</span>          tips<span class="token operator">=</span><span class="token string">"It is a tip"</span>          defaultValue<span class="token operator">=</span><span class="token string">"2021-04-21"</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>FieldDateTimePicker          name<span class="token operator">=</span><span class="token string">"datetime"</span>          label<span class="token operator">=</span><span class="token string">"Field Date Time Picker"</span>          tips<span class="token operator">=</span><span class="token string">"It is a tip"</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>FieldDateRangePicker          name<span class="token operator">=</span><span class="token string">"date-range"</span>          label<span class="token operator">=</span><span class="token string">"Field Date Range Picker"</span>          tips<span class="token operator">=</span><span class="token string">"It is a tip"</span>        <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>FieldRadio name<span class="token operator">=</span><span class="token string">"radio"</span> label<span class="token operator">=</span><span class="token string">"Radio"</span> optionsData<span class="token operator">=</span><span class="token punctuation">{</span>mockOption<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>FieldCheckbox name<span class="token operator">=</span><span class="token string">"checkbox"</span> label<span class="token operator">=</span><span class="token string">"Check This"</span> defaultValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token boolean">true</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>FormSubmitBtn<span class="token operator">></span>custom<span class="token operator">-</span>submit<span class="token operator">-</span>content<span class="token operator">&lt;</span><span class="token operator">/</span>FormSubmitBtn<span class="token operator">></span>          <span class="token operator">&lt;</span>FormResetBtn            resetCallBack<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"trigger reset callback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">}</span>          <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Form<span class="token operator">></span>      <span class="token operator">&lt;</span>div style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> marginTop<span class="token punctuation">:</span> <span class="token string">"5rem"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>Submitted Results<span class="token punctuation">:</span> <span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>pre<span class="token operator">></span><span class="token punctuation">{</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>formValues<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>pre<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><blockquote><ul><li>React</li><li>Typescript</li><li>Jest &amp; enzyme</li><li>Rollup</li><li>Material-ui</li><li>React-hook-form</li><li>React-dates</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> lib </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记-html-meta小结</title>
      <link href="/2021/02/28/bi-ji-html-meta-xiao-jie/"/>
      <url>/2021/02/28/bi-ji-html-meta-xiao-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta/name">https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/meta/name</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看看Umi源码 都做了些啥</title>
      <link href="/2021/02/20/bi-ji-react-umi/"/>
      <url>/2021/02/20/bi-ji-react-umi/</url>
      
        <content type="html"><![CDATA[<p>Umi , Dva… 都是阿里出来的 react 栈的框架<br>dva 是基于现有应用架构 (redux + react-router + redux-saga 等)的一层轻量封装，没有引入任何新概念，全部代码不到 100 行。( Inspired by elm and choo. )<br>所以 dva 首先是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，于是也可以理解为一个轻量级的应用框架。<br>dva 是 framework，不是 library，类似 emberjs，会很明确地告诉你每个部件应该怎么写，这对于团队而言，会更可控。另外，除了 react 和 react-dom 是 peerDependencies 以外，dva 封装了所有其他依赖。</p><p>Umi 和 Dva 都是基于 React 的框架，Umi 主要以路由为主，Dva 主要管理数据流。也可以理解说 umi 基于 dva 的基础，再借点 nextjs 和 其他一些相关最佳实践来的封装<br>umi 的定位 简单来说就是：React 全家桶 + dva + jest + antd (mobile) + less + eslint 那一套帮你整合好了。 你不需要再去单独配置。<br>这种对于大团队的基建来讲，避免了团队内各写各的内耗，通过同一个底层框架就能收敛起大家的应用。<br>这篇会重点放在 umi 的实现上。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><ul><li><a href="https://github.com/umijs/umi">github 源码仓库</a></li><li><a href="https://www.yuque.com/ant-design/course/tydf0a">浅析</a></li><li><a href="http://www.fly63.com/article/detial/588">umi 简介</a></li><li><a href="https://blog.csdn.net/halations/article/details/107505440">dva vs umi</a></li><li><a href="https://www.jianshu.com/p/6940527dc611">简述 React 全家桶，Dva，Umi 的理解</a> &gt; <a href="https://www.yuque.com/okoala/blog/ugg2u2">深入浅出 umi</a> &gt; <a href="https://www.zhihu.com/question/266579173">知乎 如何评价 umi</a></li></ul></blockquote><!-- > 这篇出来的原因是：有一天我有个 带着mock数据build在生产环境 的需求，然后当初直接把mock放在umi预留的文件夹下有多方便，最后解决的时候就有多麻烦。****我是不想再用了，还是自己拆了黑盒 再组装个新的有安全感 -->]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记-Redis</title>
      <link href="/2021/01/26/bi-ji-redis/"/>
      <url>/2021/01/26/bi-ji-redis/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://www.youtube.com/watch?v=vrFtzAxcu-U&list=PLLT01U-izpq6GV1Qnm_6RH3D3jzuiuRj_&index=9">youtube教程</a><br><a href="https://www.runoob.com/redis/redis-tutorial.html">菜鸟教程</a><br>NOsql的key-value数据库</p><p>可基于内存亦可持久化</p><p>日志型数据库</p><p>遵守BSD协议，开源免费</p><p>由C语言编写</p><p>分布式的基于内存的</p><p>缓存工具</p><p>关系型数据库和非 的区别：表与表之间建立关联关系；</p><p>非～的分类：</p><ul><li>key-value<ul><li>Redis, Oracle BDB</li></ul></li><li> 列存储数据库</li><li>通常用于分布式存储的海量数据，键依然存在，但特点是 指向了多个列。这些列是由家族来安排的。如HBase</li><li>文档行数据库<ul><li>MongoDb. 比键值数据库的查询效率更高</li></ul></li><li>图形数据库<ul><li>Neo4J</li></ul></li></ul><p>非～在一下情况更适用</p><ul><li>数据模型简单</li><li>需要灵活性更强的IT系统</li><li>对数据库性能要求较高</li><li>不需要高度的数据一致性</li><li>对于给定key比较容易映射复杂值的环境</li></ul><p>关系型数据库的执行流程：</p><p><code>select * from usersTable</code></p><ol><li>解析字符串 select ….</li><li>将字符串转换成对象</li><li>经过大量算法在硬盘中查询操作</li><li>展示在控制台</li></ol><p>而redis这种key-value数据库直接通过key查询value</p><h1 id="redis特点"><a href="#redis特点" class="headerlink" title="redis特点"></a>redis特点</h1><ul><li>支持数据持久化，可以将内存中数据保存在磁盘，重启时可以再次加载</li><li>不仅支持简单的key-value的类型，同时提供list, set,zset,hash, ordered Set等数据结构的存储</li><li>支持数据备份，集群等高可用功能</li><li>redis的所有操作都是原子性的，要么成功执行要么失败完全不执行。多个操作也支持事务，即原子性，通过multi和exec指令包起来</li><li>支持publish/subscribe,通知，key expire等</li></ul><ul><li>单个key存入512M大小</li><li>支持多种类型数据结构 string,list,hash,set,zset</li><li>单线程 原子性</li><li>可以持久化，因为使用了RDB和AOF机制</li><li>支持集群，支持16个库</li><li>可以做消息队列，比如聊天室IM </li></ul><p>缺点</p><ul><li>耗内存，占用内存过高</li><li>因为持久化，实现的两种方式：<ul><li>定时快照(snapshot)每次都是写全部数据，代价较高</li><li>基于语句追加(aof)只追踪变化的数据，但是追加的log可能过大，同时</li></ul></li></ul><h1 id="redis-config-配置"><a href="#redis-config-配置" class="headerlink" title="redis config 配置"></a>redis config 配置</h1><p><a href="https://www.youtube.com/watch?v=528k2CDJV0Y&list=PLLT01U-izpq6GV1Qnm_6RH3D3jzuiuRj_&index=2">url in youtube</a></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li>del key</li><li>Keys (pattern)<ul><li>Keys * 星代表所有</li><li>keys xx? 问号表示一个字符</li></ul></li><li>Dump key</li><li>Exists key: check a key is exist</li><li>Expire key seconds : set a key expire time，常用业务场景是：限时的优惠活动信息，网站数据缓存比如排行榜按天更新，手机验证码，网站限制访客访问频率</li><li>pexpire key millseconds: </li><li>ttl key: check key expire time, -1时永久，-2是不存在（已过期</li><li>Pttl key :以毫秒为单位</li><li>persist key : 移除key的过期时间</li><li>rename key newName</li><li>move key db</li><li>type key 返回key的值 的数据类型</li></ul><h2 id="key的命名规范"><a href="#key的命名规范" class="headerlink" title="key的命名规范"></a>key的命名规范</h2><ul><li>key不要超过1024字节</li><li>一个项目中，key最好使用统一模式，例如 user:123:passwordxx</li><li>命令 get /set 之类的不区分大小写，key区分大小写</li></ul><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ol><li><p>string</p><ul><li>二进制数据安全，中间不用编码解码</li><li>一个key对应一个value，值可以是图片的二进制序列化</li><li>string是redis最基本的数据类型，一个键key最多存储512M</li></ul><p>相关命令</p><ul><li>set key xx,</li><li>setnx key xx，只有key不存在的情况下设置key值，否则无效</li><li>get key，如果key 不存在返回nil，如果key值存储的不是字符串类型，比如hash 就会返回一个错误</li><li>getrange key startIndex endIndex， 根据下标截取字符串</li><li>getset key xx，如果key存在就返回key旧值并赋值xx，如果key不存在就返回nil并赋值xx</li><li>strlen key</li><li>Del key</li><li>incr key，将key中存储的数字值增加1.如果key不存在就被初始化为0并创建然后执行incr操作（即最初是1）</li><li>decr key ,自减</li><li>incrby key count，同上，将key中存储的数字值增加count量</li><li>decrby key count</li></ul><p>应用场景：</p><ol><li>通常用于保存单个字符串或者json字符串数据</li><li>string是二进制安全的，所以完全可以把图片文件的内容作为字符串来存储，保密性的图片</li><li>计数器，如微博数 粉丝数，incr等命令本身就具有原子操作的特性</li></ol></li><li><p>hash</p><ul><li>类似于object</li></ul><p>相关命令</p><ul><li>hset key field field-value</li><li>hget key field</li><li>hmset key field1 field-value1 [field2 field-value2..]. 一次性赋值整个hash多个fields</li><li>hmget key field1 [field2 …]</li><li>hgetall key 返回key的整个hash值</li><li>hkeys key 获取key的hash值中的所有fieldkey</li><li>hlen key 获取hash表中字段fields的数量</li><li>hdel key field1 [field2 …] 删除一个或多个hash字段，当所有字段都删除了就自动回收掉这个key</li><li>del key  </li><li>hsetnx key field value 同setnx</li><li>hincrby key field count 同incrby 对hash值中的某个field自增</li><li>hincrbyfloat key field count 对hash值的中某个field值为浮点数值加</li><li>hexists key field 查看hash值中指定字段field是否存在</li></ul><p>应用场景</p><p>存储一个对象</p><p>hash是最接近关系型数据库结构的数据类型，可以将数据库一条记录或程序中一个对象转换成hashmap存放在redis中 </p></li><li><p>list列表</p></li><li><p>set集合</p></li><li><p>zset有序集合</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite</title>
      <link href="/2021/01/25/bi-ji-vite/"/>
      <url>/2021/01/25/bi-ji-vite/</url>
      
        <content type="html"><![CDATA[<p>新一代打包工具<br>利用 html 原生支持了 import 特性</p><p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rollup</title>
      <link href="/2021/01/22/bi-ji-rollup/"/>
      <url>/2021/01/22/bi-ji-rollup/</url>
      
        <content type="html"><![CDATA[<p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拖拽 Drag&amp;Drop Event</title>
      <link href="/2021/01/10/za-tan-js-tuo-zhuai/"/>
      <url>/2021/01/10/za-tan-js-tuo-zhuai/</url>
      
        <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p><a href="https://codepen.io/Hojondo/pen/yLMNxPq">codepen例子</a></p><p>拖放的流程：选中 —&gt;  拖动  —&gt; 释放</p><h2 id="选中"><a href="#选中" class="headerlink" title="选中"></a>选中</h2><p>在HTML5标准中，为了使元素可拖动，把draggable属性设置为true。</p><p><code>&lt;element draggable=&quot;true | false | auto&quot; &gt;</code>  </p><p><em>auto: 跟随浏览器定义是否可以拖动</em></p><p><em>文本、图片和链接是默认可以拖放的，它们的draggable属性自动被设置成了true</em></p><h2 id="拖动"><a href="#拖动" class="headerlink" title="拖动"></a>拖动</h2><p>每一个可拖动的元素，在拖动过程中，都会经历三个过程，<strong>拖动开始</strong>–&gt;<strong>拖动过程中</strong>–&gt; <strong>拖动结束</strong>。</p><table><thead><tr><th>针对对象</th><th>事件名称</th><th>说明</th></tr></thead><tbody><tr><td>被拖动的元素</td><td>dragstart</td><td>在元素开始被拖动时候触发</td></tr><tr><td></td><td>drag</td><td>在元素被拖动时反复触发(持续)[todo check下浏览器更新频率 大概16ms每帧]</td></tr><tr><td></td><td>dragend</td><td>在拖动操作完成时触发</td></tr><tr><td>目的地对象</td><td>dragenter</td><td>当被拖动元素进入目的地元素 区域边界 触发</td></tr><tr><td></td><td>dragover</td><td>当被拖动元素在目的地元素内时触发(持续 every few hundred milliseconds)</td></tr><tr><td></td><td>dragleave</td><td>当被拖动元素没有放下就离开目的地元素 区域边界 触发</td></tr></tbody></table><p><em><code>dragenter</code>和<code>dragover</code>事件的默认行为是拒绝接受任何被拖放的元素。因此，我们必须阻止浏览器这种默认行为。<code>e.preventDefault()</code></em></p><h2 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h2><table><thead><tr><th>针对对象</th><th>事件名称</th><th>说明</th></tr></thead><tbody><tr><td>目的地对象</td><td>drop</td><td>被拖动元素在目的地元素里放下时触发，需要<code>e.preventDefault()</code>取消浏览器默认行为。</td></tr></tbody></table><h1 id="DataTransfer-对象"><a href="#DataTransfer-对象" class="headerlink" title="DataTransfer 对象"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer">DataTransfer</a> 对象</h1><p>用于保存拖动并放下（drag and drop）过程中的数据。它可以保存一项或多项数据，这些数据项可以是一种或者多种数据类型。</p><p>是一个web api，它派生于<a href="https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent">MouseEvent</a>，具有Event与MouseEvent对象的所有功能，并增加了dataTransfer属性。该属性是 <code>DataTransferItemList</code>.</p><p><a href="https://caniuse.com/?search=dataTransfer">目前支持情况</a></p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer/types">types</a></td><td>只读属性。它返回一个我们在dragstart事件中设置的拖动数据格式的数组。 格式顺序与拖动操作中包含的数据顺序相同。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer/files">files</a></td><td>返回拖动操作中的文件列表。包含一个在数据传输上所有可用的本地文件列表。如果拖动操作不涉及拖动文件，此属性是一个空列表。<a href="https://jsbin.com/hiqasek/edit?html,js,output">例子</a></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer/items">items</a></td><td>提供一个包含所有拖动数据列表的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItemList"><code>DataTransferItemList</code></a> 对象。每个item是<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItem">DataTransferItem</a>对象</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect">dropEffect</a></td><td>获取当前选定的拖放操作的类型或将操作设置为新类型。它应该始终设置成effectAllowed的可能值之一[<code>none</code>, <code>copy</code>, <code>link</code> 或 <code>move</code>]。dragover事件处理程序中针对放置目标来设置dropEffect。</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer/effectAllowed">effectAllowed</a></td><td>指定拖放操作所允许的效果。必须是其中之一【 <code>none</code>, <code>copy</code>, <code>copyLink</code>, <code>copyMove</code>, <code>link</code>, <code>linkMove</code>, <code>move</code>, <code>all</code> or <code>uninitialized</code> 】默认为<code>uninitialized</code> 表示允许所有的效果。ondragstart处理程序中设置effectAllowed属性</td></tr></tbody></table><p><em><a href="https://blog.csdn.net/qq_44681872/article/details/108237331">effectAllowed和 dropEffect对比</a></em></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setData">void setData(format, data)</a></td><td>将拖动操作的拖动数据设置为指定的类型和数据。format是DataTransfer.items中的type值，data就是要设置成的数据值，<a href="https://www.zhangxinxu.com/study/201809/datatransfer-setdata.php">例子</a></td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/getData">String getData(format)</a></td><td>返回指定格式的数据，format与setData()中一致</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/clearData">void clearData(format)</a></td><td>只能用在<code>dragstart</code>事件中，会清除所有的数据。也就是执行了此方法后，DataTransfer.getData()方法只能获得空字符串。<br />删除给定format的拖动操作的数据。如果给定类型的format不存在，此方法不执行任何操作。如果不给定参数，则删除所有format的数据。</td></tr><tr><td>[void setDragImage(img</td><td>element, offsetX, offsetY)](<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer/setDragImage">https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer/setDragImage</a>)</td></tr></tbody></table><h1 id="DataTransferItem-对象"><a href="#DataTransferItem-对象" class="headerlink" title="DataTransferItem 对象"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItem">DataTransferItem</a> 对象</h1><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>kind</td><td>只读属性，它返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransferItem"><code>DataTransferItem</code></a> 用来表示拖拽项(<em>drag data item)的类型</em>: 一些文本<code>string</code>或者一些文件<code>file</code></td></tr><tr><td>type</td><td>只读属性。返回一个代表拖动数据项类型的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString"><code>DOMString</code></a>。 <code>type</code> 是一个Unicode字符串，通常由MIME给出，不过不需要MIME类型。</td></tr></tbody></table><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getAsFile(): File || null</td><td>如果**<code>DataTransferItem</code>**是一个文件, 那 <strong><code>DataTransferItem.getAsFile()</code></strong> 方法将返回拖拽项数据的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File"><code>File</code></a> 对象. 如果拖拽项的数据不是一个文件，则返回 <code>null</code>.</td></tr><tr><td>getAsString(<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString"><code>DOMString</code></a>=&gt;undefined)</td><td>当<code>DataTransferItem</code>对象的kind属性是一个普通Unicode字符串时，该方法会用 DataTransferItem对象的kind属性作为入参来执行传入的回调函数 (i.e. <code>kind</code> is <code>string</code>).</td></tr></tbody></table><h1 id="常见场景实现"><a href="#常见场景实现" class="headerlink" title="常见场景实现"></a>常见场景实现</h1><p>drag to resort<br><a href="https://www.npmjs.com/package/react-dnd">一个库</a><br>todo 原生实现</p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><blockquote><ul><li><a href="https://www.zhangxinxu.com/wordpress/2018/09/drag-drop-datatransfer-js/">https://www.zhangxinxu.com/wordpress/2018/09/drag-drop-datatransfer-js/</a></li><li><a href="https://zh.javascript.info/mouse-drag-and-drop">使用鼠标事件 代替 原生drag&amp;drop</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2020/12/20/bi-ji-suan-fa/"/>
      <url>/2020/12/20/bi-ji-suan-fa/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/shengxinjing/algorithm-camp">fork 仓库</a></p><p>数据结构</p><ul><li>数组</li><li>链表</li><li>栈： 先入后出</li><li>队列： 先入先出</li><li>字符串</li><li>堆</li><li>hash 表，类似 js 对象</li><li>集合 set</li><li>树</li></ul><p>算法</p><ul><li>排序</li><li>搜索</li><li>递归</li><li>回溯</li><li>贪心</li><li>动态规划</li><li>二分</li><li>深度优先 广度优先的搜索</li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p><a href="https://leetcode-cn.com/problems/two-sum/">#1 two sum</a></p><ol><li>暴力遍历：两层 for 循环</li><li>中间变量，空间换时间<br><a href="https://leetcode-cn.com/problems/3sum/">#15 three sum</a></li></ol><h1 id="斐波那契数列思路"><a href="#斐波那契数列思路" class="headerlink" title="斐波那契数列思路"></a>斐波那契数列思路</h1><p>斐波那契数列 fib(n) 指的是<code>[1,1,2,3,5,8...]</code></p><ol><li>递归</li><li>加缓存</li><li>递推</li><li>数学公式 - 矩阵 - 位运算</li></ol><h1 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h1><p>[#20 有效括号]<br>[#71 目录]</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><p>数组的 增删 复杂度是很高的，因为其删除/插入中间某一个 index，其后所有的 index 都要相应的位移。<br>而链表是动态的数据结构。每个节点都是由<code>(data[, next])</code>来定义的<br>对于链表来说，删除某个 item 只需把其前一个 item 的 next 指向该 item 的后一个 item 即可，同理新增也只是更改其前一个节点的<code>next</code></p><ul><li>优点：新增和删除 大大降低复杂度</li><li>缺点：不能进行定点查询，随机访问</li></ul><h2 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h2><p><code>1-&gt;2-&gt;3-&gt;null</code></p><h2 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h2><p><code>1-&gt;2-&gt;3-&gt;1</code></p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>每个节点都有 <code>next</code> 和 <code>prev</code><br><code>1&lt;--&gt;2&lt;--&gt;3&lt;--&gt;4</code></p><h2 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h2><p><code>1-&gt;2-&gt;3-&gt;4-&gt;null</code><br><a href="https://www.jianshu.com/p/9d8296562806">跳表讲解</a><br>跳表是可以实现二分查找的有序链表。</p><h1 id="2-队"><a href="#2-队" class="headerlink" title="2 队"></a>2 队</h1><h1 id="3-栈"><a href="#3-栈" class="headerlink" title="3 栈"></a>3 栈</h1><p>先入后出 FirstInLastOut<br>逻辑出栈，top 指针向下移动一位<br>逻辑入栈，栈头指针向上移动一位，新元素加入栈</p><p>栈适合解决的问题：<br>匹配问号</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记-MessageChannel</title>
      <link href="/2020/12/08/bi-ji-messagechannel/"/>
      <url>/2020/12/08/bi-ji-messagechannel/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> webAPI </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network Management System</title>
      <link href="/2020/11/21/xiang-mu-nms/"/>
      <url>/2020/11/21/xiang-mu-nms/</url>
      
        <content type="html"><![CDATA[<!-- # Network Management System --><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>全球多个 office 网络，netSec，NST…集中管理门户<br>快速 实时 定位设备告警故障，性能异常，停机原因等<br>网络监控自动化，设备管理</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><blockquote><p><a href="https://hojondo.gitee.io/projects-react-nms">Mock 随机数据 在线预览地址</a> &gt; <img src="https://i.loli.net/2021/04/25/gpetBmHoWTiq5Au.png"></p></blockquote><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><code>React</code> react-router-dom</li><li><code>Node Koa2</code> Middleware 中间层</li><li><code>jest enzyme</code> 单元测试</li><li><code>redis</code> key-value 型轻量数据库，用于存储用户界面偏好</li><li><code>material-ui</code>UI 库</li><li><code>less</code>css 预处理</li><li><code>eslint</code>airbnb 标准</li><li><code>axios</code>promis 库 前后端对接</li><li><code>mockJs</code>拦截 Ajax 请求 生成随机数据</li><li><code>umi</code> 框架</li><li><code>react-csv/moment/react-dates/react-hook-form</code>第三方库</li></ul><h2 id="Mark"><a href="#Mark" class="headerlink" title="Mark"></a>Mark</h2><h3 id="History-Router"><a href="#History-Router" class="headerlink" title="History Router"></a>History Router</h3><p>在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// server app.js</span><span class="token keyword">const</span> send <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"koa-send"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">404</span> <span class="token operator">&amp;&amp;</span> ctx<span class="token punctuation">.</span>body <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">await</span> <span class="token function">send</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>distDirectory<span class="token punctuation">,</span> <span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">await</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这么做以后，node 方 不再返回 404 错误页面，因为对于所有路径都会返回 index.html 文件。<br>所以在客户端兜底 404，前端路由配置中加一个 defaultRoute，指向 404component<code>&#123; path: &#39;/404&#39;, component: &#39;@/pages/404/index&#39; &#125;,...,&#123; redirect: &#39;/404&#39; &#125;</code></p><h3 id="User-Preference"><a href="#User-Preference" class="headerlink" title="User Preference"></a>User Preference</h3><p>node 层提供两个 api，一个 get，一个 set</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// user-preference.js</span><span class="token keyword">const</span> preferenceRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>preferenceRouter<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/api/preference/"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span> Corpid <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>req<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Corpid<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getUserPreference</span><span class="token punctuation">(</span>Corpid<span class="token punctuation">)</span><span class="token punctuation">;</span>      ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> <span class="token punctuation">{</span> userPreference<span class="token punctuation">:</span> res <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>preferenceRouter<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/preference/"</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span>      user<span class="token punctuation">:</span> <span class="token punctuation">{</span> Corpid <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>req<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Corpid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> feature<span class="token punctuation">,</span> pageName<span class="token punctuation">,</span> value <span class="token punctuation">}</span> <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Corpid <span class="token operator">&amp;&amp;</span> feature <span class="token operator">&amp;&amp;</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">setUserPreference</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        user<span class="token punctuation">:</span> Corpid<span class="token punctuation">,</span>        feature<span class="token punctuation">,</span>        pageName<span class="token punctuation">,</span>        value<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> ctx<span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>      <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> preferenceRouter <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// app.js</span><span class="token keyword">const</span> <span class="token punctuation">{</span> preferenceRouter <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./user-preference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>preferenceRouter<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其中 getUserPreference()和 setUserPreference() 操作 redis database，这里使用<code>ioredis</code> as redis client</p><pre class=" language-js"><code class="language-js">Redis<span class="token punctuation">.</span>Command<span class="token punctuation">.</span><span class="token function">setReplyTransformer</span><span class="token punctuation">(</span><span class="token string">"hgetall"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      obj<span class="token punctuation">[</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> preferenceStore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token operator">...</span>redisConfig<span class="token punctuation">,</span>  keyPrefix<span class="token punctuation">:</span> redisConfig<span class="token punctuation">.</span>keyPrefix <span class="token operator">+</span> <span class="token string">"preference:"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getUserPreference</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> preferenceStore<span class="token punctuation">.</span><span class="token function">hgetall</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">setUserPreference</span><span class="token punctuation">(</span><span class="token punctuation">{</span> user<span class="token punctuation">,</span> feature<span class="token punctuation">,</span> pageName<span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> preferenceStore<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span>      user<span class="token punctuation">,</span>      <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>feature<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>pageName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>      value    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> e<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span> getUserPreference<span class="token punctuation">,</span> setUserPreference <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p>1: 前端本地应该维护一个全局变量，保存所有最新的 user-preference 值。在用户第一次打开 SPA 时向 node 获取 redis 数据库值；之后前端内部 每次变动 user-preference 时 都要维护这个全局变量（localStorage），hash-url 变动时，使用该全局变量 向 node 最新 redis（生命周期 mounted &amp; unmount &amp; window.onbeforeunload）。<br>2: 更新 redis 的时间点，可以选在前端每次改动 preference 时同时改变全局变量和向 node api 更新 redis 数据库。也可以在用户销毁 SPA 时向 node 更新 redis(相比前者 不推荐，因为，用户的所有改动都放在一个 api 里传风险大；而且降低每次的传参有助于加快每次 api 请求)</p></blockquote><h3 id="递归-Menu"><a href="#递归-Menu" class="headerlink" title="递归 Menu"></a>递归 Menu</h3><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">const</span> SideMenu <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  currentMenuLevelArray<span class="token punctuation">,</span>  defaultOpen <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  badgetCountObj<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>List</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>currentMenuLevelArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>currentMenuLevelItem<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SideMenuItem</span>          <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>currentMenuLevelItem<span class="token punctuation">.</span>key<span class="token punctuation">}</span></span>          <span class="token attr-name">currentMenuLevelItem</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>currentMenuLevelItem<span class="token punctuation">}</span></span>          <span class="token attr-name">defaultOpen</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>defaultOpen<span class="token punctuation">}</span></span>          <span class="token attr-name">badgetCountObj</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>badgetCountObj<span class="token punctuation">}</span></span>        <span class="token punctuation">/></span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>List</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> SideMenuItem <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  currentMenuLevelItem<span class="token punctuation">,</span>  defaultOpen <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  badgetCountObj<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> location <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>appContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> pathnameArr <span class="token operator">=</span> location<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token string">`Lighthouse - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>    pathnameArr<span class="token punctuation">[</span>pathnameArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>    pathnameArr<span class="token punctuation">[</span>pathnameArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token keyword">const</span> classes <span class="token operator">=</span> <span class="token function">useStyles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>open<span class="token punctuation">,</span> setOpen<span class="token punctuation">]</span> <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useState</span><span class="token punctuation">(</span>defaultOpen<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> LinkenListItem <span class="token operator">=</span> <span class="token function">LinkenListItemFn</span><span class="token punctuation">(</span>    currentMenuLevelItem<span class="token punctuation">.</span>children <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>React.Fragment</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinkenListItem</span>        <span class="token attr-name">button</span>        <span class="token attr-name">currentMenuLevelItem</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>currentMenuLevelItem<span class="token punctuation">}</span></span>        <span class="token attr-name">open</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>open<span class="token punctuation">}</span></span>        <span class="token attr-name">clickFn</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setOpen</span><span class="token punctuation">(</span><span class="token operator">!</span>open<span class="token punctuation">)</span><span class="token punctuation">}</span></span>      <span class="token punctuation">></span></span>        <span class="token punctuation">{</span>currentMenuLevelItem<span class="token punctuation">.</span>icon <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItemIcon</span><span class="token punctuation">></span></span>            <span class="token punctuation">{</span>React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>currentMenuLevelItem<span class="token punctuation">.</span>icon<span class="token punctuation">)</span><span class="token punctuation">}</span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ListItemIcon</span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>Badge          badgeContent<span class="token operator">=</span><span class="token punctuation">{</span>badgetCountObj<span class="token punctuation">[</span>currentMenuLevelItem<span class="token punctuation">.</span>key<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">}</span>          color<span class="token operator">=</span><span class="token string">"primary"</span>          max<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">999</span><span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// anchorOrigin={{</span>          <span class="token comment" spellcheck="true">//   horizontal: 'left',</span>          <span class="token comment" spellcheck="true">//   vertical: 'top',</span>          <span class="token comment" spellcheck="true">// }}</span>        <span class="token operator">></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ListItemText</span>            <span class="token attr-name">primary</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>currentMenuLevelItem<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span>            <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>              currentMenuLevelItem<span class="token punctuation">.</span>key <span class="token operator">===</span> location<span class="token punctuation">.</span>pathname                <span class="token operator">?</span> classes<span class="token punctuation">.</span>primaryColor                <span class="token punctuation">:</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Badge</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinkenListItem</span><span class="token punctuation">></span></span>      <span class="token punctuation">{</span>currentMenuLevelItem<span class="token punctuation">.</span>children <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Collapse</span>          <span class="token attr-name">in</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>open<span class="token punctuation">}</span></span>          <span class="token attr-name">timeout</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>auto<span class="token punctuation">"</span></span>          <span class="token attr-name">unmountOnExit</span>          <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>classes<span class="token punctuation">.</span>nested<span class="token punctuation">}</span></span>        <span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SideMenu</span>            <span class="token attr-name">currentMenuLevelArray</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>currentMenuLevelItem<span class="token punctuation">.</span>children<span class="token punctuation">}</span></span>            <span class="token attr-name">badgetCountObj</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>badgetCountObj<span class="token punctuation">}</span></span>          <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Collapse</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>React.Fragment</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p>涉及到 ip 范围(掩码)的 validation，如 10.23.0.0/20 代表前 20 位固定，后 14 位不限，所以前面的 ip 格式需满足在二进制中后 14 位为 0；<br>AND 位运算 取整，<code>&gt;&gt;&gt; 0</code>去符号(右移 0)</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> ipInt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"ip-to-int"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>rawIp<span class="token punctuation">,</span> bit <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">]</span> <span class="token operator">=</span> rawNetwork<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> RawIntIp <span class="token operator">=</span> <span class="token function">ipInt</span><span class="token punctuation">(</span>rawIp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> strictIp <span class="token operator">=</span> <span class="token function">ipInt</span><span class="token punctuation">(</span>  <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span>RawIntIp <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">32</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> bit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span><span class="token operator">></span><span class="token operator">></span> <span class="token number">0</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toIP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>strictIp<span class="token punctuation">,</span> bit<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h3 id="back-reminder"><a href="#back-reminder" class="headerlink" title="back reminder"></a>back reminder</h3><blockquote><p><code>netBrain Qapps</code>通过定制 actions，实现智能 track alert cause<br><code>zabbix</code>来监控网络 devices 的告警 alerts，应用 SNMP(Simple Network Management Protocol)，定时间隔去主动向设备 poll metric or dataset<br><code>telemetry vs snmp</code>. 个别设备内支持<code>telemetry</code>协议，设备主动 live update 的发布订阅告警</p></blockquote><!-- influxdb -->]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2020/11/18/bi-ji-mysql/"/>
      <url>/2020/11/18/bi-ji-mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库是什么"><a href="#数据库是什么" class="headerlink" title="数据库是什么"></a>数据库是什么</h1><ul><li>可以处理大量数据</li><li>有统一的程序读写接口比如 SQL</li><li>可以通过统一的语法处理关联查询和统计</li></ul><p>表 table，字段 field，记录 record<br>主键：</p><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><table><thead><tr><th align="left">名称</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">INT</td><td align="left">整型</td><td align="left">4 字节整数类型，范围约+/-21 亿</td></tr><tr><td align="left">BIGINT</td><td align="left">长整型</td><td align="left">8 字节整数类型，范围约+/-922 亿亿</td></tr><tr><td align="left">REAL</td><td align="left">浮点型</td><td align="left">4 字节浮点数，范围约+/-1038</td></tr><tr><td align="left">DOUBLE</td><td align="left">浮点型</td><td align="left">8 字节浮点数，范围约+/-10308</td></tr><tr><td align="left">DECIMAL(M,N)</td><td align="left">高精度小数</td><td align="left">由用户指定精度的小数，例如，DECIMAL(20,10)表示一共 20 位，其中小数 10 位，通常用于财务计算</td></tr><tr><td align="left">CHAR(N)</td><td align="left">定长字符串</td><td align="left">存储指定长度的字符串，例如，CHAR(100)总是存储 100 个字符的字符串</td></tr><tr><td align="left">VARCHAR(N)</td><td align="left">变长字符串</td><td align="left">存储可变长度的字符串，例如，VARCHAR(100)可以存储 0~100 个字符的字符串</td></tr><tr><td align="left">BOOLEAN</td><td align="left">布尔类型</td><td align="left">存储 True 或者 False</td></tr><tr><td align="left">DATE</td><td align="left">日期类型</td><td align="left">存储日期，例如，2018-06-22</td></tr><tr><td align="left">TIME</td><td align="left">时间类型</td><td align="left">存储时间，例如，12:20:59</td></tr><tr><td align="left">DATETIME</td><td align="left">日期和时间类型</td><td align="left">存储日期+时间，例如，2018-06-22 12:20:59</td></tr></tbody></table><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><table><thead><tr><th>数据定义</th><th>数据操作</th><th>数据查询</th></tr></thead><tbody><tr><td>创建表</td><td>添加数据</td><td>条件筛选</td></tr><tr><td>删除表</td><td>修改数据</td><td>统计聚合</td></tr><tr><td>修改表</td><td>删除数据</td><td>关联查询</td></tr></tbody></table><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ul><li>查询</li><li>筛选</li></ul><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><ul><li>内联</li><li>外联</li></ul><p>连接池<br>OLTP 操作， <a href="https://www.jianshu.com/p/b1d7ca178691">数据库 OLAP、OLTP 的介绍和比较</a><br><a href="https://www.zhihu.com/question/19781894">vertica 数据库 列式关系型数据库</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.josephxia.com/document/database/">SQL 基础教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Global Offices Location</title>
      <link href="/2020/10/21/xiang-mu-globalmap/"/>
      <url>/2020/10/21/xiang-mu-globalmap/</url>
      
        <content type="html"><![CDATA[<!-- # Global Offices Location --><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>可视化 数据地图<br>实时更新全球 office 网络状态，设备负载，流量状态</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><blockquote><p><a href="https://hojondo.gitee.io/projects-react-globalmap">Mock 随机数据 在线预览地址</a><br><img src="https://i.loli.net/2021/04/25/8ayvwoltExYZzN7.png"></p></blockquote><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><code>React</code> react-router-dom</li><li><code>Node Koa2</code> Middleware 中间层，业务层处理整合前后端数据格式差异</li><li><code>@testing-library/react</code> 单元测试</li><li><code>deck.gl &amp; react-map-gl</code> WebGL freamework</li><li><code>material-ui</code>UI 库</li><li><code>less</code>css 预处理</li><li><code>eslint</code>airbnb 标准</li><li><code>axios</code>promis 库 前后端对接</li><li><code>mockJs</code>超前 api，拦截 Ajax 请求 生成随机数据</li></ul><h2 id="Mark"><a href="#Mark" class="headerlink" title="Mark"></a>Mark</h2><h3 id="动画图层"><a href="#动画图层" class="headerlink" title="动画图层"></a>动画图层</h3><p><code>import DeckGL, &#123;GeoJsonLayer, TripsLayer, TextLayer&#125; from &#39;deck.gl&#39;</code></p><ul><li>GeoJsonLayer 用于渲染节点，这里用两个实例，上下叠加，<ul><li>下层实例定位</li><li>上层实例的 radius 及 opacity 随 Date.now()循环渐扩动画</li></ul></li><li>TextLayer 位于最下层，视角拉近节点时，显示节点相关 info</li><li>TripsLayer 位于最上层，这里同样用两个实例，上下叠加，<ul><li>下层极小 opacity 显示整个 两个节点之间路径，用于鼠标 hover 上去显示路径相关 info</li><li>上层在下层基础上展示一段路径的运动轨迹，随 Date.now()循环从起点移动到终点</li></ul></li></ul><h3 id="state-交互控制"><a href="#state-交互控制" class="headerlink" title="state 交互控制"></a>state 交互控制</h3><p><code>const &#123; currentSetting, setShowPopup, setPopupInfo, setShowPopupLine, setPopupInfoLine, setShowDrawer, setDrawerInfo, watchLocation, initialViewState &#125; = props</code><br>位于 canvas 上层的是 HTML DOM，用户可以控以下多种筛选规则</p><ul><li>根据 input 搜索节点 name，对应于 canvas 中，只展示匹配结果中的节点 及 匹配结果内相关流量路径</li><li>switch 显示隐藏流量路径图</li><li>switch 显示隐藏 GeoJsonLayer 上层实例 扩放动画</li><li>4 个 checkbox 按告警类型筛选节点，及匹配的节点相关流量，基于 input 搜索基础上。</li><li>右上角 color ranger 根据流量路径的负载 percent，控制显示的流量路径</li><li>左下角 world / region 根据 region 快速定位到相关节点，基于 input 搜索基础上。</li><li>界面下层 节点列，click 后 地图缩放居中定位到 canvas 内节点位置，同时打开 Drawer 展示该节点详细告警内容</li><li>鼠标 hover 到 canvas 内节点时，隐藏与本节点无关的路径，定位到 dom 中位置，展示相关 popup</li><li>鼠标 click 到 canvas 内节点 效果同 click DOM 节点列</li></ul><p>所有交互规则存在currentSetting，<br>基于 <code>useMemo(_, [ locationData, alertData, connectionData, currentSetting ])</code> 触发重新渲染canvas</p><h3 id="数据整合"><a href="#数据整合" class="headerlink" title="数据整合"></a>数据整合</h3><p><code>const &#123; location, alert, connection &#125; = remoteResponse</code></p><ul><li>location define 节点横纵坐标，id，region 等相关信息</li><li>alert define 所有告警相关信息，包括节点 id，告警时间内容类型等</li><li>connection define 所有数据流通相关信息，包括始终节点 id，流量，负载 percent 等</li></ul><p>数据整合目标：</p><ul><li>统计每个节点的告警总数量，其中各个告警类型的数量</li><li>节点需要列在界面底部，按告警类型和相应告警数量排序，节点颜色 基于 已有类型的 priority</li><li>统计每个流量路径的始终节点，及流量负载，路径颜色 基于 负载 percent</li><li>展示给图层的流量数据 基于 界面右上角的 color ranger，对应于路径的负载 percent</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">formatLayerData</span><span class="token punctuation">(</span>locations<span class="token punctuation">,</span> alerts<span class="token punctuation">,</span> connections<span class="token punctuation">,</span> currentSetting<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> showAlertTypes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> currentSetting<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> showKeyMap <span class="token operator">&amp;&amp;</span> currentSetting<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>      showAlertTypes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>showKeyMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> pointsData <span class="token operator">=</span> locations    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>network_code<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>currentSetting<span class="token punctuation">.</span>codeFilter<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> alertMsgMap <span class="token operator">=</span> <span class="token punctuation">{</span>        critical<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        minor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        warning<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        normal<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      alerts        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> locationMapping<span class="token punctuation">[</span>it<span class="token punctuation">.</span>location<span class="token punctuation">]</span> <span class="token operator">===</span> item<span class="token punctuation">.</span>network_code<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          alertMsgMap<span class="token punctuation">[</span>it<span class="token punctuation">.</span>severity<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span> it<span class="token punctuation">.</span>message<span class="token punctuation">,</span>            host_name<span class="token punctuation">:</span> it<span class="token punctuation">.</span>host_name<span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> alert <span class="token operator">=</span> alertMsgMap<span class="token punctuation">.</span>critical<span class="token punctuation">.</span>length        <span class="token operator">?</span> showKeyMap<span class="token punctuation">.</span>critical        <span class="token punctuation">:</span> alertMsgMap<span class="token punctuation">.</span>minor<span class="token punctuation">.</span>length        <span class="token operator">?</span> showKeyMap<span class="token punctuation">.</span>minor        <span class="token punctuation">:</span> alertMsgMap<span class="token punctuation">.</span>warning<span class="token punctuation">.</span>length        <span class="token operator">?</span> showKeyMap<span class="token punctuation">.</span>warning        <span class="token punctuation">:</span> showKeyMap<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>      <span class="token keyword">const</span> geometry <span class="token operator">=</span> <span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"Point"</span><span class="token punctuation">,</span>        coordinates<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>item<span class="token punctuation">,</span>        <span class="token operator">...</span>alertMsgMap<span class="token punctuation">,</span>        alert<span class="token punctuation">,</span>        is_internet_exit<span class="token punctuation">:</span> item<span class="token punctuation">.</span>tag_ids<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        geometry<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> showAlertTypes<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>alert<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>critical<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> second<span class="token punctuation">.</span>critical<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>critical<span class="token punctuation">.</span>length <span class="token operator">===</span> second<span class="token punctuation">.</span>critical<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>minor<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> second<span class="token punctuation">.</span>minor<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>minor<span class="token punctuation">.</span>length <span class="token operator">===</span> second<span class="token punctuation">.</span>minor<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>first<span class="token punctuation">.</span>warning<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> second<span class="token punctuation">.</span>warning<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> locationObjs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  pointsData<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>locationObjs<span class="token punctuation">[</span>item<span class="token punctuation">.</span>network_code<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> arcsData <span class="token operator">=</span> connections    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>bandwidth_usage <span class="token operator">>=</span> currentSetting<span class="token punctuation">.</span>minUtilization <span class="token operator">/</span> <span class="token number">100</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        item<span class="token punctuation">.</span>network_conn<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span>        locationObjs<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>network_conn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>        locationObjs<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>network_conn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> locationPair <span class="token operator">=</span> <span class="token punctuation">[</span>        locationObjs<span class="token punctuation">[</span>item<span class="token punctuation">.</span>network_conn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        locationObjs<span class="token punctuation">[</span>item<span class="token punctuation">.</span>network_conn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>locationPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token operator">!</span>locationPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">"city"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>locationPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span>        <span class="token operator">...</span>item<span class="token punctuation">,</span>        sourceOffice<span class="token punctuation">:</span> item<span class="token punctuation">.</span>network_conn<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        targetOffice<span class="token punctuation">:</span> item<span class="token punctuation">.</span>network_conn<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        sourceCity<span class="token punctuation">:</span> locationPair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>city<span class="token punctuation">,</span>        targetCity<span class="token punctuation">:</span> locationPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>city<span class="token punctuation">,</span>        sourceCoordinate<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token function">parseFloat</span><span class="token punctuation">(</span>locationPair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">parseFloat</span><span class="token punctuation">(</span>locationPair<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        targetCoordinate<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token function">parseFloat</span><span class="token punctuation">(</span>locationPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>longitude<span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token function">parseFloat</span><span class="token punctuation">(</span>locationPair<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>latitude<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> pointsData<span class="token punctuation">,</span> arcsData <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
            <tag> webGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoDB</title>
      <link href="/2020/10/20/bi-ji-mongodb/"/>
      <url>/2020/10/20/bi-ji-mongodb/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>史前时代： LAMP/LNMP（Linux, Apache/Nginx, Mysql, PHP）<br>现在 MEAN（MongoDB, Express,Angular.js,Node）</p><p>Mongo</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js核心基础</title>
      <link href="/2020/10/11/sui-bi-qian-duan-js-he-xin-ji-chu/"/>
      <url>/2020/10/11/sui-bi-qian-duan-js-he-xin-ji-chu/</url>
      
        <content type="html"><![CDATA[<h1 id="术语索引"><a href="#术语索引" class="headerlink" title="术语索引"></a>术语索引</h1><p><a href="https://developer.mozilla.org/en-US/docs/Glossary">https://developer.mozilla.org/en-US/docs/Glossary</a></p><ul><li>可枚举性 <a href="https://en.wikipedia.org/wiki/Enumeration">enumerable</a>： 可枚举是集合的属性，隐式要求每个元素都是唯一的，<code>for ... in</code></li><li>迭代 <a href="https://en.wikipedia.org/wiki/Iteration">iterate</a>： <a href="https://zh.javascript.info/iterable">可迭代</a> 迭代器是借鉴 C++等语言的概念，迭代器的原理就像指针一样，它指向数据集合中的某个元素，你可以获取它指向的元素，也可以移动它以获取其它元素。迭代器类似于数组中下标的拓展，各种数据结构，如链表（List）、集合（Set）、映射（Map）都有与之对应的迭代器。迭代器是专门为了遍历这一操作设计的。迭代是按照某种顺序逐个访问列表中的每一项，是将输出做为输入,再次进行相同动作处理。<code>for ...of</code></li><li>递归 recursion： 自己调用自己，自己包含自己。从计算机角度讲，递归是迭代的特例</li><li>遍历：按规则访问非线性结构中的每一项。强调非线性结构(树, 图). 而迭代一般适用于线性结构(数组, 队列).</li></ul><blockquote><p><a href="https://www.jianshu.com/p/dec28ac0175f">遍历、枚举、迭代</a><br>递归是重复调用函数自身实现循环。迭代是函数内某段代码实现循环，而迭代与普通循环的区别是：循环代码中参与运算的变量同时是保存结果的变量，当前保存的结果作为下一次循环计算的初始值。</p></blockquote><p><strong>数组</strong>对象其实是一个特殊对象，他拥有普通对象的全部特性，所以不止负值索引，小数索引，连字符串索引都是可以的，只是用这些索引向数组添加属性时，数组的 length 不会增加罢了，而只有当索引是正整数或其对应数字串时，length 才会增加</p><p><img src="https://i.loli.net/2021/05/13/SqHcxF7a9JCtBPE.png" alt="自己出的一个面试题 涉及symbol,for, 和..."></p><h2 id="operator-操作符-细节"><a href="#operator-操作符-细节" class="headerlink" title="operator 操作符 细节"></a>operator 操作符 细节</h2><p><a href="https://segmentfault.com/q/1010000011100158">连续声明多个变量</a></p><h2 id="Object-的几个遍历方法-对比"><a href="#Object-的几个遍历方法-对比" class="headerlink" title="Object 的几个遍历方法 对比"></a>Object 的几个遍历方法 对比</h2><ul><li><p><code>for..of</code> 遍历 <code>enumerable</code>, <code>string-keyed</code> 属性</p></li><li><p><code>for..in</code> 遍历 <code>enumerable</code>, <code>string-keyed</code> 属性(包括<code>inherit-property</code>) <em>for in 的顺序问题，准确的说是<a href="http://jartto.wang/2016/10/25/does-js-guarantee-object-property-order/">基于不同浏览器</a>有不同的实现方式。对于大多数是这样的：先遍历出整数属性<code>String(Math.trunc(Number(prop)) === prop</code>（integer properties，按照升序），然后其他属性按照创建时候的顺序遍历出来</em></p></li><li><p><code>...obj</code> 拷贝<code>own</code>, <code>enumerable</code> 属性(包括<code>Symbol-keyed</code>)</p></li><li><p><code>Object.assign(target,...sources)</code> 同…拷贝<code>own</code>, <code>enumerable</code> 属性(包括<code>Symbol-keyed</code>) <em>内部对 target 执行 set,对 source 执行 get。正因为 source-obj 会 invoke property 的 getter<a href="https://stackoverflow.com/questions/45772178/poor-use-case-of-object-assign-simple-example">所以 prototype 不适合做 target</a>,请改用<code>Object.getOwnPropertyDescriptor()</code>配合<code>Object.defineProperty()</code></em></p></li><li><p><code>Object.keys()</code> 返回 <code>own</code>, <code>enumerable</code>, <code>string-keyed</code> 属性</p></li><li><p><code>Object.getOwnPropertyNames()</code> 返回 <code>own</code>, <code>string-keyed</code> 属性(包括<code>non-enumerable</code>) <em>non-enumerable 属性的创建只有一种方式：<code>Object.defineProperty(obj1, &#39;non-enumerable-key1&#39;, &#123;value: &#39;xx&#39;, enumerable: false&#125;)</code></em></p></li><li><p><code>Object.getOwnPropertySymbols()</code> 同上，但是只是 <code>Symbol-keyed</code> 属性</p></li></ul><blockquote><p>Object.is(v1,v2) 判断的还是两个 v 的指针</p></blockquote><h1 id="this-详解"><a href="#this-详解" class="headerlink" title="this 详解"></a>this 详解</h1><p><a href="https://wangdoc.com/javascript/oop/this.html">网道这里解释的很好！！</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">官方 MDN</a><br><a href="https://zhuanlan.zhihu.com/p/346985961">知乎解释</a></p><ul><li>给当前元素的某一个事件行为绑定函数，方法执行时的 this 就是绑定的当前元素本身</li><li>自执行函数中的 this 一般都是 window，严格模式下是 undefined</li><li>回调函数中的 this 一般都是 window，严格模式下是 undefined</li><li>箭头函数在创建执行上下文的时候，在初始化上下文环境时，不会创建 this 属性，所以在箭头函数中如果使用到 this 会根据作用域链向上级上下文寻找,箭头函数中所使用的 this，都是来自上级<strong>函数作用域</strong>链，即上级函数被谁调用这个 this 就是谁</li><li>构造函数时的 this 是指实例</li></ul><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><ul><li>箭头函数有作用域（词法作用域），词法作用域简单来讲就是，一切变量（包括 this）都根据作用域链来查找。.箭头函数中的 this 因为绑定了词法作用域，所以始终指向自身外的第一个 this（由于自身没有声明 this，所以会去作用域链上找 this），也就是始终等于调用它的函数的 this（以为这个 this 离它最近）</li><li>不可以使用 arguments 对象，该对象在函数体内不存在。如果要用，可以用 Rest 参数代替。</li><li>不可以当作构造函数，也就是说，不可以使用 new 命令，否则会抛出一个错误。</li><li>不可以使用 yield 命令，因此箭头函数不能用作 Generator 函数。</li><li>准确的说 this、super、arguments、new.target 都没有自己的，全都来自父作用域，父作用域能找到的 就不会 undefined</li></ul><h1 id="骚操作"><a href="#骚操作" class="headerlink" title="骚操作"></a>骚操作</h1><ul><li><p>实现 sleep 阻塞目的:</p><ol><li>while()限定时间条件达到</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> expire <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1000</span><span class="token keyword">while</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>expire<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// after that, do something</span></code></pre><ol start="2"><li>promise 异步</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> wait <span class="token operator">=</span> <span class="token punctuation">(</span>timeout<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> timeout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setRefreshing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**new promise((reslove, reject) = > {    setTimeout  (()=>{        reslove()    }, 2000)})*/</span></code></pre><h1 id="冷知识"><a href="#冷知识" class="headerlink" title="冷知识"></a>冷知识</h1><p><a href="https://www.cnblogs.com/52cik/p/js-assignment-operators.html">赋值详详详详解</a><br><a href="http://xiaoyuze88.github.io/blog/2013/09/20/%E7%A5%9E%E5%A5%87%E7%9A%84JS%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC%E8%AF%AD%E5%8F%A5">神奇的 JS 连续赋值语句</a><br>JS 赋值语句 永远返回值，声明语句 永远返回 undefined<br>JavaScript 中赋值语句的返回值就是等号右边的值，例子中 obj.getThis 的值是一个匿名函数，非严格模式下 this 会指向 window</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"My Object"</span><span class="token punctuation">,</span>  getThis<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>getThis <span class="token operator">=</span> obj<span class="token punctuation">.</span>getThis<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// window</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 会判断为10，隐式转换为true</span></code></pre></li></ul><h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><ol><li>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象，字符串被转为类数组对象，数值和布尔型则转为包装对象。由于 undefined 和 null 无法转为对象，所以对它们进行解构赋值，都会报错。</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">,</span> e<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "h"</span>b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "e"</span>c<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "l"</span>d<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "l"</span>e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "o"</span><span class="token comment" spellcheck="true">//字符串转为的对象有length属性</span><span class="token keyword">let</span> <span class="token punctuation">{</span> length<span class="token punctuation">:</span> len <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 5</span><span class="token keyword">let</span> <span class="token punctuation">{</span> toString<span class="token punctuation">:</span> s <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>s <span class="token operator">===</span> Number<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">let</span> <span class="token punctuation">{</span> toString<span class="token punctuation">:</span> s <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>s <span class="token operator">===</span> Boolean<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token keyword">let</span> <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> x <span class="token punctuation">}</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError</span><span class="token keyword">let</span> <span class="token punctuation">{</span> prop<span class="token punctuation">:</span> y <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError</span></code></pre><ol start="2"><li>数组是特殊的对象，所以可以对数组进行对象属性的解构</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">:</span> first<span class="token punctuation">,</span> <span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> last <span class="token punctuation">}</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>first<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span>last<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><ol start="3"><li>数组的解构赋值也可以这样使用 <code>let [,m] = [2,3]</code></li><li>设置解构赋值的默认值</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">move</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> y<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>如果解构赋值语句不是变量声明语句（前面没有 var，let，const），即对已经声明的变量进行进行解构赋值需要注意加上括号 <em>注：数组的解构赋值[x,y]=[y,x]好像不用加括号</em></li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> x<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 和立即执行函数一样，该语句的前面一行最好加上分号，否则可能会被当做函数调用</span></code></pre><ol start="6"><li>解构赋值 可以直接提取 JSON 数据，当作 object 处理</li></ol><h1 id="按位运算-妙用"><a href="#按位运算-妙用" class="headerlink" title="按位运算 妙用"></a>按位运算 妙用</h1><ol><li><a href="http://www.matrix67.com/blog/archives/263">http://www.matrix67.com/blog/archives/263</a></li><li><a href="http://www.matrix67.com/blog/archives/264">http://www.matrix67.com/blog/archives/264</a></li><li><a href="http://www.matrix67.com/blog/archives/266">http://www.matrix67.com/blog/archives/266</a></li><li><a href="http://www.matrix67.com/blog/archives/268">http://www.matrix67.com/blog/archives/268</a></li></ol><h1 id="switch-case-不加-break-会怎样"><a href="#switch-case-不加-break-会怎样" class="headerlink" title="switch case 不加 break 会怎样"></a>switch case 不加 break 会怎样</h1><p>看一段代码:</p><pre class=" language-js"><code class="language-js"><span class="token keyword">switch</span> <span class="token punctuation">(</span>direction<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token string">"U"</span><span class="token punctuation">:</span>  <span class="token keyword">case</span> <span class="token string">"R"</span><span class="token punctuation">:</span>  <span class="token keyword">case</span> <span class="token string">"D"</span><span class="token punctuation">:</span>  <span class="token keyword">case</span> <span class="token string">"L"</span><span class="token punctuation">:</span><span class="token punctuation">}</span></code></pre><p>在这个语句中，如果 direction=U。那么四个 case 语句都将执行。如果 direction=R。将执行剩下三个语句。<br>原因是 switch 语句原理是跳转到 caseX 位置执行剩下的语句，直到最后或者遇见 break 为止。<br>比如 React 源码中有过这样使用</p><pre class=" language-js"><code class="language-js"><span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token string">"string"</span><span class="token punctuation">:</span>  <span class="token keyword">case</span> <span class="token string">"number"</span><span class="token punctuation">:</span>    invokeCallback <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> <span class="token string">"object"</span><span class="token punctuation">:</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>$$<span class="token keyword">typeof</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> REACT_ELEMENT_TYPE<span class="token punctuation">:</span>      <span class="token keyword">case</span> REACT_PORTAL_TYPE<span class="token punctuation">:</span>        invokeCallback <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="事件-event-捕获和冒泡详解"><a href="#事件-event-捕获和冒泡详解" class="headerlink" title="事件 event 捕获和冒泡详解"></a>事件 event 捕获和冒泡详解</h1><p><a href="https://wangdoc.com/javascript/events/index.html">一个 event 详解</a></p><p><a href="https://zh.javascript.info/bubbling-and-capturing">https://zh.javascript.info/bubbling-and-capturing</a><br>DOM 事件标准描述了事件传播的 3 个阶段：</p><p>捕获阶段（Capturing phase）—— 事件（从 Window）向下走近元素。<br>目标阶段（Target phase）—— 事件到达目标元素。<em>没有被单独处理：捕获阶段和冒泡阶段的处理程序都在该阶段被触发。</em><br>冒泡阶段（Bubbling phase）—— 事件从元素上开始冒泡。</p><p>如果我们在同一阶段有多个事件处理程序，并通过 addEventListener 分配给了相同的元素，则它们的运行顺序与创建顺序相同</p><h2 id="注册事件-handler-的三种方式"><a href="#注册事件-handler-的三种方式" class="headerlink" title="注册事件 handler 的三种方式"></a>注册事件 handler 的三种方式</h2><ol><li>使用 dom 对象的同名 property 赋值：<code>document.querySelector(&#39;button&#39;).onclick = function (e)&#123;&#125;</code></li><li>使用<code>addEventListener()</code>方法</li><li>在 html 的 dom 的 attribute 中 直接 <a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#inline_event_handlers_%E2%80%94_dont_use_these"><code>inline event handler</code></a> <em>不建议,html 和 js 这样 mix up 在一起不易管理也低效，只能用于一个 handler 只 handle 单个元素的情况</em><br><a href="https://www.htmlgoodies.com/javascript/working-with-inline-event-handlers/">inline event 也有点优点</a><br>实质上，当事件处理程序被指定为 HTML 属性，指定的代码被包装在有 以下参数 的函数中。_<a href="https://developer.mozilla.org/zh-CN/docs/orphaned/Web/Guide/Events/Event_handlers#%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8%E7%9A%84%E5%8F%82%E6%95%B0%EF%BC%8Cthis_%E7%BB%91%E5%AE%9A%E5%92%8C%E8%BF%94%E5%9B%9E%E5%80%BC">该 inline handler 函数的入参：event / this</a>_</li></ol><h2 id="EventTarget-接口"><a href="#EventTarget-接口" class="headerlink" title="EventTarget 接口"></a>EventTarget 接口</h2><p><a href="https://wangdoc.com/javascript/events/eventtarget.html">https://wangdoc.com/javascript/events/eventtarget.html</a></p><ul><li>addEventListener(type, listener[, options={capture, once, passive, signal} / useCapture=false ])</li><li>removeEventListener(type, listener[, options={capture} / useCapture=false])</li><li>dispatchEvent() <code>cancelled = !target.dispatchEvent(event instance)</code></li></ul><h2 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h2><p><code>ul.addEventListener(&#39;click&#39;, function (event) &#123;event.target blabla...&#125;)</code></p><h2 id="取消各种"><a href="#取消各种" class="headerlink" title="取消各种"></a>取消各种</h2><ul><li>event.preventDefault 取消浏览器对当前事件的默认行为。比如点击链接的默认跳转页面</li><li>event.stopPropagation 阻止事件在 DOM 中继续传播（addEventListener 时 默认未指定触发阶段的情况下，这里即取消冒泡阶段），防止再触发定义在别的节点上的监听函数。<em>但是不包括在当前节点上其他的事件监听函数</em></li><li>event.stopImmediatePropagation 阻止同一个事件的其他监听函数被调用。取消冒泡阶段 基础上，取消自己的</li></ul><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a><a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent">自定义事件</a></h2><p><code>new CustomEvent(typeArg, &#123;detail: null&#125;)</code></p><h2 id="判断类型的-4-种方法"><a href="#判断类型的-4-种方法" class="headerlink" title="判断类型的 4 种方法"></a>判断类型的 4 种方法</h2><p><a href="https://www.cnblogs.com/onepixel/p/5126046.html">https://www.cnblogs.com/onepixel/p/5126046.html</a></p><ul><li>typeof</li><li>instanceof 内部实质：<code>A.__proto__ === B.prototype</code>, <em>有个<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray#instanceof_vs_isarray">极端抬扛的情况</a>是，一个网页有多个 iframe 即多个全局执行环境时，iframe1 的 arr1 肯定不会 === iframe2 的 Array 的，这时候用 Array.isArray(arr)来判断</em></li><li>constructor 找到构造函数</li><li>Object.toString() 使用：<code>Object.prototype.toString.call(true)</code> 解释：If this method is not overridden in a custom object, toString() returns “[object type]” 如<code>[].toString.call(&#39;sss&#39;) // &quot;[object String]&quot;</code></li></ul><h1 id="symbol-的应用场景"><a href="#symbol-的应用场景" class="headerlink" title="symbol 的应用场景"></a>symbol 的应用场景</h1><p><a href="/2021/05/31/za-tan-js-symbol-xiang-jie/">Relative Post</a></p><h1 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h1><p><a href="/2021/05/23/za-tan-js-promise-xiang-jie/">Relative Post</a></p><h1 id="深入理解try-catch-error-finally"><a href="#深入理解try-catch-error-finally" class="headerlink" title="深入理解try catch(error) finally"></a>深入理解<code>try catch(error) finally</code></h1><ul><li>try 的 {} 是必须的，即使只有一行</li><li>try 之后至少一个（catch 或 finally）</li><li>可以嵌套 try，最里面 throw 了但是没有 catch 的话，会向上一层层找 catch</li><li>If the finally-block returns a value, this value becomes the return value of the entire <code>try-catch-finally</code> statement；否则就按前面<strong>最后一个</strong>执行的 block 的 return</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch#conditional_catch-blocks">最佳实践</a></li><li><a href="https://zh-hans.reactjs.org/docs/error-boundaries.html">react 的 顶层 try catch - Error Boundaries</a>: <code>componentDidCatch(error, errorInfo) &#123;&#125;</code> &amp; <code>static getDerivedStateFromError(error) &#123;&#125;</code></li><li><a href="https://zhuanlan.zhihu.com/p/340424710">react 中的错误捕获</a> &amp; <a href="https://juejin.cn/post/6844904088950292494#heading-0">错误边界</a>: 错误边界不能捕获的异常有两个<ol><li>事件处理(使用 try catch)；</li><li>异步代码(<a href="https://developer.huawei.com/consumer/cn/forum/topic/0201416830199360473">局部</a>的话就<code>async await</code> + <code>try catch</code>； 全局的解决方案是：window.addEventListener(‘error’, e=&gt;{}) 和 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event">window.addEventListener(“unhandledrejection”,e=&gt;{})</a>)</li><li>服务端渲染</li><li>自身错误(将边界组件和业务组件分离，各司其职)</li></ol></li></ul><h1 id="fetch-amp-xmlhttprequest-amp-axios-对他们的封装-amp-websocket-amp-request-response-header-body-http1-2-协议"><a href="#fetch-amp-xmlhttprequest-amp-axios-对他们的封装-amp-websocket-amp-request-response-header-body-http1-2-协议" class="headerlink" title="fetch &amp; xmlhttprequest &amp; axios 对他们的封装 &amp; websocket &amp; request/response header body, http1/2 协议"></a>fetch &amp; xmlhttprequest &amp; axios 对他们的封装 &amp; websocket &amp; request/response header body, http1/2 协议</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest</a><br><a href="https://zhuanlan.zhihu.com/p/58062212">fetch &amp; Ajax &amp; axois 对比 及 xss 和 csrf 攻击 安全问题</a><br><a href="https://juejin.cn/post/6844904184748195848">https://juejin.cn/post/6844904184748195848</a></p><h1 id="跨域-和-csrf-攻击"><a href="#跨域-和-csrf-攻击" class="headerlink" title="跨域 和 csrf 攻击"></a>跨域 和 csrf 攻击</h1><p><a href="https://juejin.cn/post/6844903934310498312">https://juejin.cn/post/6844903934310498312</a></p><h1 id="localStorage-amp-indexedDB-amp-sessionStorage-amp-cookie-amp-session"><a href="#localStorage-amp-indexedDB-amp-sessionStorage-amp-cookie-amp-session" class="headerlink" title="localStorage &amp; indexedDB &amp; sessionStorage &amp; cookie &amp; session"></a>localStorage &amp; indexedDB &amp; sessionStorage &amp; cookie &amp; session</h1><h1 id="babel-详解"><a href="#babel-详解" class="headerlink" title="babel 详解"></a>babel 详解</h1><p><a href="https://zhuanlan.zhihu.com/p/43249121">https://zhuanlan.zhihu.com/p/43249121</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>handlebars模版引擎</title>
      <link href="/2020/09/17/bi-ji-handlebars-mo-ban-yin-qing/"/>
      <url>/2020/09/17/bi-ji-handlebars-mo-ban-yin-qing/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li><code>Handlebars</code> 是一个 Javascript 模板引擎，能让你轻松高效的编写语义化模板，它是 Mustache 模板引擎的一个扩展，Handlebars 和 Mustache 都是弱逻辑的模板引擎，能将 Web 前端的视图和代码分离，降低两者之间耦合</li><li><code>hbs</code> 是 Express 提供的默认视图引擎, 是对 Handlerbars 的封装.</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://www.jianshu.com/p/6dccc8459cd8">hbs 使用最佳实践</a> &gt; <a href="https://zhuanlan.zhihu.com/p/32742178">Node 与 Express 开发之 Handlebars 模板引擎</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模版引擎 </tag>
            
            <tag> todo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 技术栈的 架构演变</title>
      <link href="/2020/09/02/za-tan-react-jia-gou-yan-bian/"/>
      <url>/2020/09/02/za-tan-react-jia-gou-yan-bian/</url>
      
        <content type="html"><![CDATA[<h1 id="状态管理工具-演变"><a href="#状态管理工具-演变" class="headerlink" title="状态管理工具 演变"></a>状态管理工具 演变</h1><h2 id="redux"><a href="#redux" class="headerlink" title="redux"></a>redux</h2><h3 id="中间件-middleware"><a href="#中间件-middleware" class="headerlink" title="中间件 middleware"></a>中间件 middleware</h3><h3 id="redux-saga-react-redux"><a href="#redux-saga-react-redux" class="headerlink" title="redux-saga/react-redux"></a>redux-saga/react-redux</h3><p>作为 redux 的 中间件</p><h2 id="dva-rematch"><a href="#dva-rematch" class="headerlink" title="dva/rematch"></a>dva/rematch</h2><p>两者的区别主要在于对异步的处理，dva 选择了用 generator，而 rematch 选择了用 async/await。</p><h2 id="dva"><a href="#dva" class="headerlink" title="dva"></a>dva</h2><blockquote><p>dva 是个啥？</p></blockquote><p>看 github 首页就知道了。是基于 React, Redux, redux-saga, react-router 封装的轻量级框架。不过看这个介绍可以知道，它的假设是，你要用 redux, redux-saga, react-router，可能还要用 umi。或者可以这样讲，作者认为这三个库是数据管理、副作用管理、路由管理的最佳实践或默认配置（在 <a href="https://dvajs.com/guide/introduce-class.html#%E6%95%B0%E6%8D%AE%E6%B5%81%E9%97%AE%E9%A2%98">官方文档</a> 可以看到，这个假设是基于数据的）。</p><p>所以这么说吧：</p><pre><code>dva = React-Router + Redux + Redux-Saga</code></pre><blockquote><p>解决了啥问题？</p></blockquote><p>特性部分。讲到 4 点：</p><ul><li>易学。作为进阶用户，我就忽略易学部分。提到配合 umi 后 0 API。那么是要增加一个假设/依赖</li><li>elm 概念。暂且理解为是，更加「模块化」？这可能是一个优点</li><li>插件机制和 HMR。这是默认延续 redux middleware 和 HMR 的配置，是做产品的细活，但可能算不上竞争优势。而且 HMR 还需要另外配置？</li></ul><p>所以，让我们关注在 <strong>效率提升</strong> 和 <strong>API 简单</strong> 这两点优点上。看了一下官方 demo，通过很多约定优于配置，将模板代码减少到了最少。节省的效率确实很爽！</p><blockquote><p>生态圈问题咋解决？</p></blockquote><p>可以看到，三大块：数据、路由、副作用分别只是包装了社区的最佳实践。</p><blockquote><p>带来了啥新的问题？</p></blockquote><p>我会考察的一些点：</p><ul><li>社区支持程度：对 Alipay 团队的依赖。这个团队的响应力会不会成为产品的瓶颈？</li><li>现成方案搜索 🔍</li><li>假设变动的可能性和应对方案：通过约定优于配置，这在目前看来是个很好的提高效率的方案。但如果放在「时间演化」和「团队项目」（当然后者不存在）这个向度上去检验，当其中一者依赖发生更新，它需要这个产品团队去更新 dva；当其中一者不再是社区最佳实践时，这个项目还怎么办？换个角度考虑，不用 dva 而自己引入这三种依赖，是否能让你在同样变化来临时，具备迁移应用的路径？</li></ul><blockquote><p>更具体的一些问题</p></blockquote><ul><li>文件结构：简化了，通过把 actions/reducers/saga 写到一块，不仅导航起来方便一些，还形成了「业务模型」的概念</li><li>文件即路由：简化了 router 的配置</li><li>最佳实践：它定位是框架而非 library，这是设计思想，非常好</li><li>高级定制：可能会有一些很细微的场景是没法 100% out of the box 支持的，但对于简单应用来说应该还好</li></ul><blockquote><p>竞品是啥？</p></blockquote><ul><li><a href="https://github.com/rematch/rematch">rematch</a></li></ul><blockquote><p>学习资料。带着问题去看。写写评论</p></blockquote><ul><li><a href="https://dvajs.com/guide">https://dvajs.com/guide</a></li><li><a href="https://umijs.org/guide">https://umijs.org/guide</a></li></ul><p>总的来说，看完一些简介，目前对 dva 的认识是说：它纯粹是为了<strong>提高开发效率</strong>而创造，没有新的东西，是对前端三大框架的封装。它怎么达到这个目标呢？通过<strong>约定式</strong>、<strong>框架本身隐含最佳实践</strong>的方式。</p><h1 id="从-Dva-到-Umi"><a href="#从-Dva-到-Umi" class="headerlink" title="从 Dva 到 Umi"></a>从 Dva 到 Umi</h1><p>Umi , Dva… 都是阿里出来的 react 栈的框架</p><p>umi 可以简单地理解为 roadhog + 路由，思路类似 next.js/nuxt.js，辅以一套插件机制，目的是通过框架的方式简化 React 开发<br>dva 目前是纯粹的数据流，和 umi 以及 roadhog 之间并没有相互的依赖关系，可以分开使用也可以一起使用，</p><p>dva 是基于现有应用架构 (redux + react-router + redux-saga 等)的一层轻量封装，没有引入任何新概念，全部代码不到 100 行。( Inspired by elm and choo. )<br>所以 dva 首先是一个基于 redux 和 redux-saga 的数据流方案，然后为了简化开发体验，dva 还额外内置了 react-router 和 fetch，于是也可以理解为一个轻量级的应用框架。<br>dva 是 framework，不是 library，类似 emberjs，会很明确地告诉你每个部件应该怎么写，这对于团队而言，会更可控。另外，除了 react 和 react-dom 是 peerDependencies 以外，dva 封装了所有其他依赖。</p><p>Umi 和 Dva 都是基于 React 的框架，Umi 主要以路由为主，Dva 主要管理数据流。</p><h1 id="next-js"><a href="#next-js" class="headerlink" title="next.js"></a>next.js</h1><p>与 umi 相比，next.js 的功能相对比较简单，比如他的路由配置并不支持一些高级的用法，比如布局、嵌套路由、权限路由等等，而这些在企业级的应用中是很常见的。相比 next.js，umi 在约定式路由的功能层面会更像 nuxt.js 一些。<br>虽然 umi 也支持 SSR，</p><h1 id="roadhog"><a href="#roadhog" class="headerlink" title="roadhog"></a>roadhog</h1><p>roadhog 是比较纯粹的 webpack 封装工具，作为一个工具，他能做的就比较有限（限于 webpack 层）。而 umi 则等于 roadhog + 路由 + HTML 生成 + 完善的插件机制，所以能在提升开发者效率方面发挥出更大的价值。</p><blockquote><p><a href="https://github.com/linesh-simplicity/linesh-simplicity.github.io/issues/208">参考 架构选型</a><br><a href="https://segmentfault.com/a/1190000017406286">参考 架构选型演进</a><br><a href="https://juejin.im/post/6844904138124296205">参考状态管理框架演变</a> &gt; <a href="https://blog.csdn.net/Ctrus/article/details/107212259">Next Js 服务端渲染实战</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 函数式编程扫盲</title>
      <link href="/2020/09/02/za-tan-js-han-shu-shi-bian-cheng-sao-mang/"/>
      <url>/2020/09/02/za-tan-js-han-shu-shi-bian-cheng-sao-mang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>面向对象编程(OOP)通过封装变化使得代码更易理解。 函数式编程(FP)通过最小化变化使得代码更易理解。 – Michacel Feathers（Twitter）</p></blockquote><h2 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h2><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><ol><li><a href="https://llh911001.gitbooks.io/mostly-adequate-guide-chinese/content/ch5.html">函数式编程指南</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/02/fp-tutorial.html">阮一峰函数式编程入门教程</a></li></ol><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>函数式编程倡导<strong>利用若干简单的执行单元</strong>让计算结果不断渐进，逐层推导复杂的运算。</p><p>函数式编程有两个最基本的运算：合成（compose）和柯里化（Currying）。</p><h4 id="合成（compose）"><a href="#合成（compose）" class="headerlink" title="合成（compose）"></a>合成（compose）</h4><p>如果一个值要经过多个函数，才能变成另外一个值，就可以把所有中间步骤合并成一个函数，这叫做”函数的合成”（compose）。</p><p>合成的好处显而易见，它让代码变得简单而富有可读性，同时通过不同的组合方式，我们可以轻易组合出其他常用函数，让我们的代码更具表现力。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"f1"</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"f2"</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"f3"</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>funcs<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>funcs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> arg<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>funcs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> funcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> funcs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"omg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//f1(f2(f3("omg")));</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"res"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//sy-log</span></code></pre><h4 id="柯里化（Currying）"><a href="#柯里化（Currying）" class="headerlink" title="柯里化（Currying）"></a>柯里化（Currying）</h4><p><strong>柯里化</strong>（英语：Currying），又译为<strong>卡瑞化</strong>或<strong>加里化</strong>，是把接受多个<a href="https://zh.wikipedia.org/wiki/%E5%8F%83%E6%95%B8_(%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)">参数</a>的<a href="https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0">函数</a>变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><p>所谓”柯里化”，就是把一个多参数的函数，转化为单参数函数。</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 柯里化之前</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token comment" spellcheck="true">// 柯里化之后</span><span class="token keyword">function</span> <span class="token function">addX</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">addX</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span></code></pre><p>这样调用上述函数：<code>(foo(3))(4)</code>，或直接<code>foo(3)(4)</code>。</p><p>看下面的例子，这里我们定义了一个 <code>add</code> 函数，它接受一个参数并返回一个新的函数。调用 <code>add</code> 之后，返回的函数就通过闭包的方式记住了 <code>add</code> 的第一个参数。一次性地调用它实在是有点繁琐，好在我们可以使用一个特殊的 <code>curry</code> 帮助函数（helper function）使这类函数的定义和调用更加容易。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> increment <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> addTen <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3</span><span class="token function">addTen</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 12</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 源码拜读</title>
      <link href="/2020/08/24/bi-ji-vue3-yuan-ma-bai-du/"/>
      <url>/2020/08/24/bi-ji-vue3-yuan-ma-bai-du/</url>
      
        <content type="html"><![CDATA[<p>todo</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://github.com/su37josephxia/vue3-study">vue3-study</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>node Koa</title>
      <link href="/2020/08/08/bi-ji-node-koa/"/>
      <url>/2020/08/08/bi-ji-node-koa/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.php.cn/js-tutorial-475116.html">值得关注的几个 Node.js 框架</a><br>todo</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    <entry>
      <title>node EggJs</title>
      <link href="/2020/07/17/bi-ji-node-eggjs/"/>
      <url>/2020/07/17/bi-ji-node-eggjs/</url>
      
        <content type="html"><![CDATA[<h1 id="科普"><a href="#科普" class="headerlink" title="科普"></a>科普</h1><p><a href="https://www.php.cn/js-tutorial-475116.html">值得关注的几个 Node.js 框架</a><br><a href="https://segmentfault.com/a/1190000020510357">https://segmentfault.com/a/1190000020510357</a><br><a href="https://juejin.im/post/6844903906028290061">egg vs nest</a></p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><p>eggJs, NestJs, Koa, Express</p><h2 id="基于插件的-Swagger-doc-接⼝定义"><a href="#基于插件的-Swagger-doc-接⼝定义" class="headerlink" title="基于插件的 Swagger-doc 接⼝定义"></a>基于插件的 Swagger-doc 接⼝定义</h2><p>统⼀一异常处理理<br>基于扩展的 helper 响应统⼀一处理理<br>Validate 接⼝口格式检查<br>三层结构<br>jwt 统⼀一鉴权<br>⽂文件上传</p><h2 id="手写-eggjs"><a href="#手写-eggjs" class="headerlink" title="手写 eggjs"></a>手写 eggjs</h2><ul><li>下载<code>npm i egg-init -g</code>脚手架</li><li>约定大于配置 3 层结构： controler,model,service</li><li>model 层 安装 mysql2 和 egg-sequelize 插件，在 config/plugin.js 中指定调用</li><li>手写简单版 egg - 文件夹 kgg<ul><li>routes, controller, service, model, middleware, schedule</li><li>loader.js 加载以上</li></ul></li></ul><h2 id="最佳实践例子"><a href="#最佳实践例子" class="headerlink" title="最佳实践例子"></a>最佳实践例子</h2><ul><li>api 接口文档 - egg-swagger-doc-feat</li><li>restful 服务</li><li>表单校验</li><li>鉴权</li><li>生命周期函数</li><li>上传</li><li>持久化 - egg-mongoose</li></ul><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>controller -&gt; user.js<ul><li>注释中 接口描述定义 contract 文件夹</li><li>npm i swagger-doc-feat，配置在 config-&gt;plugin 和 config.default.js</li><li>接口文档自动生成 &amp; 自动注册路由</li></ul></li><li>统一异常处理<ul><li>middleware 文件夹 -&gt; error_handle.js</li></ul></li><li>统一正常处理<ul><li>eggJS 提供一个扩展 extend 文件夹 -&gt; helper</li></ul></li><li>校验 validate<ul><li>npm i egg-validate -S，配置在 config-&gt;plugin 和 config.default.js</li><li>ctx.validate(ctx.rule.createUserRequest)</li><li>注： ctx.rule 是 swagger-doc-feat 插件自动生成的给到了 ctx</li></ul></li><li>持久化 mogoose<ul><li>密码 hash 化 插件 npm i egg-bcrypt -S</li><li>npm i egg-mongoose -S</li><li>controller 下<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> payload <span class="token operator">=</span> ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>body <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用 Service 进行业务处理</span><span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> service<span class="token punctuation">.</span>user<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>service 下<pre class=" language-js"><code class="language-js"><span class="token keyword">async</span> <span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> <span class="token punctuation">{</span> ctx<span class="token punctuation">,</span> service <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span>payload<span class="token punctuation">.</span>password <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ctx<span class="token punctuation">.</span><span class="token function">genHash</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>password<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// genHash是插件bcrypt提供的</span><span class="token keyword">return</span> ctx<span class="token punctuation">.</span>model<span class="token punctuation">.</span>User<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre></li></ul></li><li>生命周期中实现 startup,teardown 方便测试接口<br>egg 并没有暴露生命周期，如果想使用生命周期函数就声明一个 app.js。在生命周期 didReady 中执行</li><li>鉴权<ul><li>npm i jwt -S 配置在 config….</li><li>service -&gt; actionToken.js 派发 token</li><li>service -&gt; userAccess.js 登录，登出和获取当前用户 实现</li></ul></li><li>上传下载优化<ul><li>必须保证上传完才返回 responese , 需要使用插件 await-stream-ready，封装 stream.pipe()</li><li>存在一种情况：还没上传完，流还没有完全消化，服务器崩溃，导致了前端页面卡死卡顿，就需要使用插件 stream-wormhole,使输入流完全消化掉，防止前端卡死</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MapboxGl &amp; DeckGl</title>
      <link href="/2020/07/07/bi-ji-mapboxgl-deckgl/"/>
      <url>/2020/07/07/bi-ji-mapboxgl-deckgl/</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> StaticMap <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-map-gl"</span><span class="token punctuation">;</span><span class="token keyword">import</span> DeckGL<span class="token punctuation">,</span> <span class="token punctuation">{</span> GeoJsonLayer<span class="token punctuation">,</span> ArcLayer<span class="token punctuation">,</span> PolygonLayer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"deck.gl"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> MAPBOX_ACCESS_TOKEN_PUBLIC <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../../data/mapbox-token"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Set your mapbox token here</span><span class="token keyword">const</span> MAPBOX_TOKEN <span class="token operator">=</span> MAPBOX_ACCESS_TOKEN_PUBLIC<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// source: Natural Earth http://www.naturalearthdata.com/ via geojson.xyz</span><span class="token keyword">const</span> AIR_PORTS <span class="token operator">=</span>  <span class="token string">"https://d2ad6b4ur7yvpq.cloudfront.net/naturalearth-3.3.0/ne_10m_airports.geojson"</span><span class="token punctuation">;</span><span class="token keyword">const</span> INITIAL_VIEW_STATE <span class="token operator">=</span> <span class="token punctuation">{</span>  latitude<span class="token punctuation">:</span> <span class="token number">51.47</span><span class="token punctuation">,</span>  longitude<span class="token punctuation">:</span> <span class="token number">0.45</span><span class="token punctuation">,</span>  zoom<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  maxZoom<span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span>  bearing<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// pitch: 30</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> ployData <span class="token operator">=</span>  <span class="token string">"https://raw.githubusercontent.com/visgl/deck.gl-data/master/website/sf-zipcodes.json"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Map2D</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> ref<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">_onClick</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>info<span class="token punctuation">.</span>object<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// eslint-disable-next-line</span>      <span class="token function">alert</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>object<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>info<span class="token punctuation">.</span>object<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>abbrev<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)`</span></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> initialLayers <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">GeoJsonLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token string">"airports"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> AIR_PORTS<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// Styles</span>      filled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      pointRadiusMinPixels<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      pointRadiusScale<span class="token punctuation">:</span> <span class="token number">2000</span><span class="token punctuation">,</span>      getRadius<span class="token punctuation">:</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token number">11</span> <span class="token operator">-</span> f<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>scalerank<span class="token punctuation">,</span>      getFillColor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// Interactive props</span>      pickable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      autoHighlight<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      onClick<span class="token punctuation">:</span> _onClick<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ArcLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token string">"arcs"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> AIR_PORTS<span class="token punctuation">,</span>      dataTransform<span class="token punctuation">:</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        d<span class="token punctuation">.</span>features<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> f<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>scalerank <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// Styles</span>      getSourcePosition<span class="token punctuation">:</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">0.4531566</span><span class="token punctuation">,</span> <span class="token number">51.4709959</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// London</span>      getTargetPosition<span class="token punctuation">:</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> f<span class="token punctuation">.</span>geometry<span class="token punctuation">.</span>coordinates<span class="token punctuation">,</span>      getSourceColor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      getTargetColor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      getWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      opacity<span class="token punctuation">:</span> <span class="token number">0.4</span><span class="token punctuation">,</span>      coef<span class="token punctuation">:</span> <span class="token number">0.005</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">PolygonLayer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      id<span class="token punctuation">:</span> <span class="token string">"polygon-layer"</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> ployData<span class="token punctuation">,</span>      pickable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      stroked<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      filled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      opacity<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      wireframe<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      autoHighlight<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      lineWidthMinPixels<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      getPolygon<span class="token punctuation">:</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> d<span class="token punctuation">.</span>contour<span class="token punctuation">,</span>      getElevation<span class="token punctuation">:</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> d<span class="token punctuation">.</span>population <span class="token operator">/</span> d<span class="token punctuation">.</span>area <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">,</span>      getFillColor<span class="token punctuation">:</span> <span class="token string">"#de6868"</span><span class="token punctuation">,</span>      getLineColor<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      getLineWidth<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      extruded<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      visible<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>layers<span class="token punctuation">,</span> setLayers<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialLayers<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//   cleanup</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>DeckGL      initialViewState<span class="token operator">=</span><span class="token punctuation">{</span>INITIAL_VIEW_STATE<span class="token punctuation">}</span>      controller      layers<span class="token operator">=</span><span class="token punctuation">{</span>layers<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// getTooltip={({object}) => object &amp;&amp; `${object.zipcode}\nPopulation: ${object.population}`}</span>    <span class="token operator">></span>      <span class="token operator">&lt;</span>StaticMap        mapboxApiAccessToken<span class="token operator">=</span><span class="token punctuation">{</span>MAPBOX_TOKEN<span class="token punctuation">}</span>        mapStyle<span class="token operator">=</span><span class="token string">"mapbox://styles/mapbox/light-v10"</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>DeckGL<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>笔记-webSocket</title>
      <link href="/2020/07/01/bi-ji-wang-luo-websocket/"/>
      <url>/2020/07/01/bi-ji-wang-luo-websocket/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GIS-几个地图可视化工具-对比试用</title>
      <link href="/2020/06/28/sui-bi-gis-ji-ge-di-tu-ke-shi-hua-gong-ju/"/>
      <url>/2020/06/28/sui-bi-gis-ji-ge-di-tu-ke-shi-hua-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>我们常常听说的数据可视化大多指狭义的数据可视化以及部分信息可视化。根据数据类型和性质的差异，经常分为以下几种类型：</p><ul><li>统计数据可视化：用于对统计数据进行展示、分析，一般都是以数据库表的形式提供，常见的有 <strong>HighCharts</strong>、<strong>ECharts</strong>、<strong>G2</strong>、<strong>Chart.js</strong> 、<strong>FineBI</strong>等等；</li><li>关系数据可视化：主要表现为节点和边的关系，比如流程图、网络图、UML 图、力导图等。常见的关系可视化类库有 mxGraph、JointJS、GoJS、G6 等；</li><li>地理空间数据可视化：常见类库如 Leaflet、Turf、Polymaps 等等；</li><li>还有时间序列数据可视化（如 timeline）、文本数据可视化（如 worldcloud）等等</li></ul><h1 id="GIS-即-地理信息系统"><a href="#GIS-即-地理信息系统" class="headerlink" title="GIS 即 地理信息系统"></a>GIS 即 地理信息系统</h1><p>国外有设计优秀的地图以及相关应用的公司，知名的如 mapbox、 cartoDB、 stamen 工作室等等</p><ul><li>mapbox 几乎是最美地图的设计公司（简而言之，他家主要生产地图底图），公司孜孜不倦地提高视觉水准</li><li>cartoDB 是一个支持 GIS 的数据库，你有了数据要展现，数量可能很大，需要找个地方增删改查，cartoDB 就干这个，carto 的主页上长着许多有趣的应用</li><li>stamen 则是一家非常有个性的地图以及数据可视化的设计工作室，东西做的非常惊艳，但个性化有余而平台化不足</li></ul><h2 id="Deck-gl"><a href="#Deck-gl" class="headerlink" title="Deck.gl"></a>Deck.gl</h2><p>Uber 开源的地理空间分析工具箱，基于 Mapbox 的底层设计，提供更加简洁易行的位置数据分析能力</p><h2 id="kepler-gl"><a href="#kepler-gl" class="headerlink" title="kepler.gl"></a>kepler.gl</h2><p>基于 deck.gl 构建的 React 组件，应用于大规模地理定位数据集的可视化探索</p><h2 id="WebGL-Globe"><a href="#WebGL-Globe" class="headerlink" title="WebGL Globe"></a>WebGL Globe</h2><p>an open platform for geographic data visualization</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><ul><li>GIS 有哪些酷炫的应用？ - 周宁奕的回答 - 知乎<a href="https://www.zhihu.com/question/30616181/answer/63052745">https://www.zhihu.com/question/30616181/answer/63052745</a></li><li>一般用哪些工具做大数据可视化分析？ - 帆软的回答 - 知乎<a href="https://www.zhihu.com/question/33692103/answer/796113370">https://www.zhihu.com/question/33692103/answer/796113370</a></li><li>大数据可视化的”轮子” - 知乎文章 - <a href="https://zhuanlan.zhihu.com/p/82174830">https://zhuanlan.zhihu.com/p/82174830</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    
    
    
    
    <entry>
      <title>css tips</title>
      <link href="/2020/05/14/za-tan-css-xiao-ji-qiao-tips/"/>
      <url>/2020/05/14/za-tan-css-xiao-ji-qiao-tips/</url>
      
        <content type="html"><![CDATA[<h1 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a>border-radius</h1><p>非固定长宽的长方形，4 个角都是最大程度的 45 度角： <code>border-radius: 10000000px</code>设置一个无限大（至少大于最小边一半长度）的 px 值</p><h1 id="省略单位"><a href="#省略单位" class="headerlink" title="省略单位"></a>省略单位</h1><p>冷知识： <code>height: 2</code> 和<code>height: 2px</code>的区别是 不加 px，默认单位是<code>em</code></p><h1 id="css-里的函数"><a href="#css-里的函数" class="headerlink" title="css 里的函数"></a>css 里的函数</h1><p>如<code>attr()</code>, <code>format()</code></p><h1 id="position-absolute"><a href="#position-absolute" class="headerlink" title="position: absolute"></a>position: absolute</h1><p><code>position: absolute</code>定位有个特点是，尽量收缩大小。通常用于自适应宽高的场景，比如移动端的刘海屏适配</p><h1 id="legend-的-css-特性"><a href="#legend-的-css-特性" class="headerlink" title="legend 的 css 特性"></a>legend 的 css 特性</h1><p>fieldset &amp; legend 的妙用<br><a href="https://www.zhangxinxu.com/wordpress/2016/11/html-fieldset-legend-element-css-layout/">https://www.zhangxinxu.com/wordpress/2016/11/html-fieldset-legend-element-css-layout/</a></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>vw<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>vh</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> aqua</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token property">background-color</span><span class="token punctuation">:</span> blue</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span>        <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>          position: absolute;          top: -5px;          left: 0;          right: 0;          bottom: 0;          margin: 0;          padding: 0 8px;          overflow: hidden;          /* border: 1px solid #000; */          border-style: solid;          border-width: 1px;          border-radius: inherit;          pointer-events: none;        <span class="token punctuation">"</span></span>      <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>Outlined<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="几种布局"><a href="#几种布局" class="headerlink" title="几种布局"></a>几种布局</h1><h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><h2 id="Flex"><a href="#Flex" class="headerlink" title="Flex"></a>Flex</h2><h2 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h2><h2 id="multiCol"><a href="#multiCol" class="headerlink" title="multiCol"></a>multiCol</h2><p>从上到下，从左到右填满<br><code>column-count: 3</code>; 指定容器内有几列，由浏览器计算出每一列分配多少空间<br><code>column-width: 200px</code>; 将按照你指定的宽度尽可能多的创建列；任何剩余的空间之后会被现有的列平分<br>创建的列无法单独的设定样式。 不存在让单独某一列比其他列更大的方法，同样无法为某一特定的列设置独特的背景色、文本颜色，<br>只有两个机会改变列的样式</p><ul><li><code>column-gap: 20px</code>; 更改列间间隙，接受任何长度单位</li><li><code>column-rule:4px dotted rgb(79, 185, 227)</code> 相当于每列之间的 border(相同属性值)，是 column-rule-color 和 column-rule-style 的缩写<strong>这条分割线本身并不占用宽度。它置于用 column-gap 创建的间隙内</strong></li><li><code>break-inside: avoid</code> 可以强制 item 里的内容不会溢出换列</li></ul><h1 id="background"><a href="#background" class="headerlink" title="background"></a>background</h1><p>一种常用的全屏滑动，背景固定的布局常用</p><pre class=" language-css"><code class="language-css"><span class="token property">background-attachment</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span><span class="token property">background-repeat</span><span class="token punctuation">:</span> no-repeat<span class="token punctuation">;</span><span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span><span class="token property">background-position</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span></code></pre><h1 id="回流-reflow-和-重绘-repaint"><a href="#回流-reflow-和-重绘-repaint" class="headerlink" title="回流 reflow 和 重绘 repaint"></a>回流 reflow 和 重绘 repaint</h1><p><a href="https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24">https://github.com/Advanced-Frontend/Daily-Interview-Question/issues/24</a><br>减少重绘与回流</p><ul><li>使用 transform 替代 top</li><li>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流（改变了布局</li><li>避免使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局。</li><li>尽可能在 DOM 树的最末端改变 class，回流是不可避免的，但可以减少其影响。尽可能在 DOM 树的最末端改变 class，可以限制了回流的范围，使其影响尽可能少的节点。</li><li>避免设置多层内联样式，CSS 选择符从右往左匹配查找，避免节点层级过多。比如<code>div &gt; a &gt; span</code></li><li>将动画效果应用到 position 属性为 absolute 或 fixed 的元素上，避免影响其他元素的布局，这样只是一个重绘，而不是回流，同时，控制动画速度可以选择 <code>requestAnimationFrame</code>（自带函数节流功能，采用系统时间间隔，保持最佳绘制效率，不会因为间隔时间的过短，造成过度绘制，增加页面开销，也不会因为间隔时间过长，造成动画卡顿，不流程，影响页面美观。）</li><li>避免使用 CSS 表达式<code>expression(js statement)</code>，可能会引发回流。</li></ul><h2 id="css3-contain-控制重排和重绘"><a href="#css3-contain-控制重排和重绘" class="headerlink" title="css3 contain 控制重排和重绘"></a>css3 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/contain">contain</a> 控制重排和重绘</h2><p><a href="https://juejin.cn/post/6958990366888607757">https://juejin.cn/post/6958990366888607757</a></p><h1 id="requestAnimationFrame"><a href="#requestAnimationFrame" class="headerlink" title="requestAnimationFrame"></a>requestAnimationFrame</h1><p><a href="https://github.com/sisterAn/blog/issues/30">探讨 requestAnimationFrame</a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul><li><a href="https://codepen.io/">CodePen</a>：代码演示 很多 CSS Demo</li><li><a href="https://caniuse.com/">Caniuse</a>：浏览器兼容性</li><li><a href="https://csstriggers.com/">CssTriggers</a>：CSS 触发</li><li><a href="https://cubic-bezier.com/">CubicBezier</a>：贝塞尔曲线</li><li><a href="https://xluos.github.io/demo/flexbox">Flexbox</a>：Flex 布局</li><li><a href="https://gs.statcounter.com/">StatCounter</a>：浏览器统计</li></ul><h1 id="技术博客"><a href="#技术博客" class="headerlink" title="技术博客"></a>技术博客</h1><ul><li><a href="https://juejin.cn/user/4089838985290910/posts">张鑫旭</a></li><li><a href="https://juejin.cn/user/2330620350437678/posts">Chokcoco</a> <a href="https://github.com/chokcoco/iCSS">icss</a></li><li><a href="https://juejin.cn/user/2330620350432110/posts">JowayYoung</a></li><li><a href="https://juejin.cn/user/4353721774401623/posts">alphardex</a></li><li><a href="https://juejin.cn/book/6850413616484040711">一个小册 - 玩转 CSS 的艺术之美</a></li></ul><h1 id="css-粗略思维导图"><a href="#css-粗略思维导图" class="headerlink" title="css 粗略思维导图"></a>css 粗略思维导图</h1><p>掌握 CSS 核心知识点：<code>盒模型</code>、<code>格式化上下文</code>、<code>文档流</code>、<code>优先级别</code>、<code>布局方式</code></p><p><img src="https://i.loli.net/2021/04/29/leL1I5w3BaDVT84.png" alt="image.png"></p><h1 id="由-reflow-amp-repaint-引申的-硬件加速"><a href="#由-reflow-amp-repaint-引申的-硬件加速" class="headerlink" title="由 reflow&amp;repaint 引申的 硬件加速"></a>由 reflow&amp;repaint 引申的 硬件加速</h1><p><a href="https://juejin.cn/post/6844903597772111886">https://juejin.cn/post/6844903597772111886</a><br><a href="https://juejin.cn/post/6844903649974435854">https://juejin.cn/post/6844903649974435854</a><br><a href="https://juejin.cn/post/6889226357851553805">https://juejin.cn/post/6889226357851553805</a></p><p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex实现-隔行正反向换行</title>
      <link href="/2020/05/03/za-tan-css-flex-shi-xian-ge-xing-zheng-fan-xiang-huan-xing/"/>
      <url>/2020/05/03/za-tan-css-flex-shi-xian-ge-xing-zheng-fan-xiang-huan-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="css-实现-flex-布局下，奇数行正向排序，偶数行反向排序"><a href="#css-实现-flex-布局下，奇数行正向排序，偶数行反向排序" class="headerlink" title="css 实现 flex 布局下，奇数行正向排序，偶数行反向排序"></a>css 实现 flex 布局下，奇数行正向排序，偶数行反向排序</h1><p>目标效果：<br><a href="https://imgchr.com/i/Jx4v0P"><img src="https://s1.ax1x.com/2020/05/03/Jx4v0P.md.png" alt="Jx4v0P.md.png"></a><br><a href="https://imgchr.com/i/Jx4jmt"><img src="https://s1.ax1x.com/2020/05/03/Jx4jmt.md.png" alt="Jx4jmt.md.png"></a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in listArr<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ index }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><h3 id="第一种解决方案-scss-flex-order"><a href="#第一种解决方案-scss-flex-order" class="headerlink" title="第一种解决方案 - scss/flex-order"></a>第一种解决方案 - scss/flex-order</h3><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// scss</span><span class="token selector">ul </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>  <span class="token selector">li </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 为::before做absolute position 准备</span>    <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 掩护单行没到达5个item的情况，配合 偶数行第一个不要grow</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20%</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 宽度是5个item平分</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">160</span>px<span class="token punctuation">;</span>    <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">12</span>rpx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 为::before腾出空间</span>    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">0</span> solid <span class="token hexcode">#b3b3b3</span><span class="token punctuation">;</span>    <span class="token property">border-top-width</span><span class="token punctuation">:</span> <span class="token number">2</span>rpx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 预留border-top</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 偶数行最后（左）一个item的left:0会在边缘，要避免</span>    <span class="token selector"><span class="token parent important">&amp;</span>.active </span><span class="token punctuation">{</span>      <span class="token property">border-top-color</span><span class="token punctuation">:</span> <span class="token hexcode">#3f4c8c</span><span class="token punctuation">;</span>      <span class="token selector"><span class="token parent important">&amp;</span>::before </span><span class="token punctuation">{</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">4</span>rpx solid <span class="token hexcode">#3f4c8c</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token parent important">&amp;</span>::before </span><span class="token punctuation">{</span>      <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>      <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">24</span>rpx<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">24</span>rpx<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ffffff</span><span class="token punctuation">;</span>      <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">4</span>rpx solid <span class="token hexcode">#999999</span><span class="token punctuation">;</span>      <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    &amp;<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span><span class="token number">10</span>n <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token selector">:last-child </span><span class="token punctuation">{</span>      <span class="token property">border-top-width</span><span class="token punctuation">:</span> <span class="token number">2</span>rpx<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 宽度是4个item的总长</span>    <span class="token punctuation">}</span>    <span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> <span class="token number">0</span> <span class="token keyword">through</span> <span class="token selector">150 </span><span class="token punctuation">{</span>      &amp;<span class="token punctuation">:</span><span class="token function">nth-child</span><span class="token punctuation">(</span>#<span class="token punctuation">{</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// @if ($i+1)/5 % 2==0 or $i/5 % 2==0{</span>        <span class="token comment" spellcheck="true">//     box-sizing: content-box;</span>        <span class="token comment" spellcheck="true">//     padding-left: 80rpx;</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token keyword">@if</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token selector">/5 % 2==1 </span><span class="token punctuation">{</span>          <span class="token property">border-right-width</span><span class="token punctuation">:</span> <span class="token number">2</span>rpx<span class="token punctuation">;</span>          <span class="token property">border-bottom-width</span><span class="token punctuation">:</span> <span class="token number">2</span>rpx<span class="token punctuation">;</span>          <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">50%</span> <span class="token number">50%</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">@else if</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token selector">/5 % 2==0 </span><span class="token punctuation">{</span>          <span class="token property">border-left-width</span><span class="token punctuation">:</span> <span class="token number">2</span>rpx<span class="token punctuation">;</span>          <span class="token property">border-bottom-width</span><span class="token punctuation">:</span> <span class="token number">2</span>rpx<span class="token punctuation">;</span>          <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">50%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">@else if</span> <span class="token selector"><span class="token variable">$i</span><span class="token placeholder">%5</span>==0 and <span class="token variable">$i</span>!=0 </span><span class="token punctuation">{</span>          <span class="token property">border-top-width</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token property">flex-grow</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 偶数行第一个 不要grow，以便后续兄弟的border-top-width能撑满这行</span>        <span class="token punctuation">}</span>        <span class="token keyword">@if</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token selector">% 2 == 0 </span><span class="token punctuation">{</span>          <span class="token property">order</span><span class="token punctuation">:</span> <span class="token variable">#{$i}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">@else</span> <span class="token punctuation">{</span>          <span class="token property">order</span><span class="token punctuation">:</span> #<span class="token punctuation">{</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token number">%</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">@if</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token variable">$i</span>/<span class="token number">5</span><span class="token punctuation">)</span> <span class="token selector">>0 </span><span class="token punctuation">{</span>          <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">2</span>rpx<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 除第一行以为 统一向上缩进一个border-top-width的高度，以便这行线无缝连接</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="第二种解决方案-float-nth-child"><a href="#第二种解决方案-float-nth-child" class="headerlink" title="第二种解决方案 float/nth-child()"></a>第二种解决方案 float/nth-child()</h3><pre class=" language-css"><code class="language-css"><span class="token selector">ul > li<span class="token pseudo-class">:nth-child(10n + 6)</span>,ul > li<span class="token pseudo-class">:nth-child(10n + 7)</span>,ul > li<span class="token pseudo-class">:nth-child(10n + 8)</span>,ul > li<span class="token pseudo-class">:nth-child(10n + 9)</span>,ul > li<span class="token pseudo-class">:nth-child(10n)</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node 中间层系统架构</title>
      <link href="/2020/05/02/za-tan-node-zhong-jian-ceng-xi-tong-jia-gou/"/>
      <url>/2020/05/02/za-tan-node-zhong-jian-ceng-xi-tong-jia-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="Nextjs"><a href="#Nextjs" class="headerlink" title="Nextjs"></a>Nextjs</h2><p><img src="https://i.loli.net/2020/09/02/dfeiv39XGDkYyR5.png" alt="nextjs流程示例图"><br>假设这是一个 blog 网站，首页是文章列表 (/ 和 /articles 都是渲染文章列表)，整个工作流程是这样的：</p><p>第一步，打开浏览器，访问这个 blog 网站的文章列表页面 (/ 或者 /articles)。<br>第二步，请求到达服务器的 nginx，nginx 设置的规则是，如果请求匹配 /api/v1/_，则转给 API 服务处理，否则如果匹配 /_，则转给 next.js 服务处理，所以 /articles 请求发送给了 next.js 服务。<br>第三步到第六步，next.js 收到 /articles 请求后，会选择渲染文章列表界面，假如这个 page 叫 ArticleListPage，在这个 component 中，next.js 的 getInitialProps() 方法会去访问 API 服务的 /api/v1/articles API，获得所有的 articles 数据 (不考虑分页)，然后渲染出 html，html head 中 link 了 bundle 的所有 js 代码，html 返给浏览器。<br>第七步，浏览器得到了 html 后，进行首屏渲染，用户马上就看到了内容。浏览器解析完 html 后，会继续下载 html 中 link 的 js 代码并执行，然后该网站就变成了一个 SPA，js 接管剩余的所有路由，并且 js 会把此页面用 js 再重新渲染一遍 (用户没有感知)。<br>第八步到第九步，用户点击某篇文章查看详情，比如 /articles/1，由于 js 在客户端已经接管了路由，所以这个请求并不会发送到服务端的 nginx，js 代码根据路由，切换到详情页面 (比如 ArticlePage) 组件，在这个组件在 getInitialProps() 方法中，它会发送 /api/v1/articles/1 的 ajax 请求去访问 API 获取文章的详情数据。<br>第十步到第十一步，/api/v1/articles/1 的请求到达服务端的 nginx 后，转发给 API 服务处理，API 从数据库查询得到结果返回给浏览器，浏览器渲染之。整个流程结束。<br>从上面可以看出，next.js 在服务端仅负责首屏渲染，剩余的都在客户端进行渲染，只有首次访问的请求会经过服务端的 next.js，剩余所有请求都直接到达 API 服务。</p><h1 id="Koa"><a href="#Koa" class="headerlink" title="Koa"></a>Koa</h1><blockquote><p><a href="https://baurine.netlify.app/2019/08/16/website-architectures/#%E9%9C%80%E8%A6%81-ssr---nextjs">流程详解参考</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uniapp 小程序开发踩坑</title>
      <link href="/2020/04/21/bi-ji-uniapp-xiao-cheng-xu-kai-fa/"/>
      <url>/2020/04/21/bi-ji-uniapp-xiao-cheng-xu-kai-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="学习要点"><a href="#学习要点" class="headerlink" title="学习要点"></a>学习要点</h2><ol><li><code>uni</code>扩展 API，同微信小程序 API，前缀<code>uni.</code>代替<code>wx.</code></li></ol><h2 id="关于-SCSS"><a href="#关于-SCSS" class="headerlink" title="关于 SCSS"></a>关于 SCSS</h2><ol><li>识别<code>&amp;</code>父选择器占位符，但不识别<code>&amp;</code>处于非行首的情况。如*.first-row &amp;{}*</li><li>font-size 设置 fonticon 时，align-items :center 无效</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 跨端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人 MAC/Linux 开发环境配置备忘</title>
      <link href="/2020/04/14/wan-ji-mac-linux-kai-fa-huan-jing-bei-wang/"/>
      <url>/2020/04/14/wan-ji-mac-linux-kai-fa-huan-jing-bei-wang/</url>
      
        <content type="html"><![CDATA[<h1 id="安装-homebrew"><a href="#安装-homebrew" class="headerlink" title="安装 homebrew"></a>安装 homebrew</h1><p><code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code></p><h1 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h1><p><code>apt-get install git</code></p><h2 id="git-全局-config-配置"><a href="#git-全局-config-配置" class="headerlink" title="git 全局 config 配置"></a>git 全局 config 配置</h2><p><a href="https://hojondo.com/2019/11/07/bi-ji-git/#toc-heading-14">详细教程</a></p><ul><li>设置代理<ul><li>  Clone with HTTPS： <code>git config --global http.https://github.com.proxy http://127.0.0.1:8889</code>，在<code>~/gitconfig</code>中可见。[取消代理<code>git config --global --unset http.proxy</code>]</li><li>  Clone with SSH： 在<code>~/.ssh/config</code>中添加两行 <code>Host github.com</code>\n<code>ProxyCommand nc -X 5 -x 127.0.0.1:8889 %h %p</code></li></ul></li><li>user 配置<br>  <code>git config --global user.name &quot;XXX&quot;</code><br>  <code>git config --global user.email &quot;xxx@gmail.com&quot;</code></li><li>简单的快速 push alias<br>  <code>git config --global alias.fpush &#39;!git add . &amp;&amp; git commit -m &quot;update&quot; &amp;&amp; git push&#39;</code></li><li>alias 厂内代码提交到 icode 的代码仓库时，需要先过评审，无法直接 push 到该仓库，只能 push 到缓冲区。可以设置个名 bpush 的快捷指令：<br>  <code>git config --global alias.bpush &#39;!f() &#123; : push ; r=$1; [[ -z $r ]] &amp;&amp; r=origin; b=$2; t=$(awk &quot;&#123; print \$2 &#125;&quot; $(git rev-parse --git-dir)/HEAD); t=$&#123;t#refs/heads/&#125;; [[ -z $b ]] &amp;&amp; b=$t; cmd=&quot;git push $r HEAD:refs/for/$b%topic=$t&quot;; echo $cmd; echo; $cmd; &#125;; f&#39;</code></li></ul><h1 id="安装-最新-python-和-pip"><a href="#安装-最新-python-和-pip" class="headerlink" title="安装 最新 python 和 pip"></a>安装 最新 python 和 pip</h1><p><code>brew install python</code><br>因为 mac 系统自带 2.x，安装 python 后 最好不要直接修改默认的 python2，防止导致系统某些用 python2 写的系统文件出错<br>可以执行<code>python3 xx.py</code><br>check:<br><code>python3 --version</code><br><code>python3 -m pip --version</code></p><p><a href="https://pip.pypa.io/en/stable/">pip 是 python 的 package installer</a></p><h1 id="安装-iterm2"><a href="#安装-iterm2" class="headerlink" title="安装 iterm2"></a>安装 iterm2</h1><p><a href="https://iterm2.com/downloads.html">https://iterm2.com/downloads.html</a><br>默认 zsh shell<br>iterm2 删除整行<code>control + u</code>， 删除前一个单词<code>control + w</code>， 不删除直接下一行重新输入<code>ctrl+c</code></p><h2 id="更改-shell-为-zsh"><a href="#更改-shell-为-zsh" class="headerlink" title="更改 shell 为 zsh"></a>更改 shell 为 zsh</h2><p><em>安装 iterm2 可忽略该步骤</em></p><p>系统自带 shell：<br>/bin/bash, /bin/csh, /bin/dash, /bin/ksh, /bin/sh, /bin/tcsh, /bin/zsh</p><ul><li>  查看系统中已安装的 shell <code>cat /etc/shells</code> 当前应用的 shell<code>echo $SHELL</code></li><li>  安装 zsh<code>brew install zsh zsh-completions</code> / <code>sudo apt install zsh</code></li><li>  设置 zsh 为默认 shell<code>[sudo] chsh -s $(which zsh)</code> / <code>chsh -s /usr/local/bin/zsh</code></li></ul><h1 id="安装-oh-my-zsh-For-ZSH-shell"><a href="#安装-oh-my-zsh-For-ZSH-shell" class="headerlink" title="安装 oh-my-zsh For ZSH shell"></a>安装 oh-my-zsh For ZSH shell</h1><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Installing-ZSH">官方引导</a><br><a href="https://juejin.im/post/6844903939121348616">推荐教程</a></p><ul><li>通过 github <code>git clone git@//github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</code><br>  或通过 curl/wget<br>  <code>sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code><br>  <code>sh -c &quot;$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></li><li>  备份旧 zsh 配置文件<code>cp ~/.zsh ~/.zshrc.originBackup</code>，使用 oh-my-zsh 提供的模板配置<code>cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</code></li></ul><h2 id="oh-my-zsh-插件推荐"><a href="#oh-my-zsh-插件推荐" class="headerlink" title="oh-my-zsh 插件推荐"></a>oh-my-zsh 插件推荐</h2><p><a href="https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins">官方 Plugins list</a><br>check all the installed plugins: <code>ls ~/.oh-my-zsh/plugins</code></p><ul><li>  <a href="https://github.com/wting/autojump">autojump</a>,实现目录间快速跳转，想去哪个目录直接 j + 目录名，不用在频繁的 cd</li><li>  <a href="https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md#oh-my-zsh">zsh-autosuggestions</a> ,命令进一步补全</li><li>  <a href="https://github.com/zsh-users/zsh-syntax-highlighting/blob/master/INSTALL.md#oh-my-zsh">zsh-syntax-highlighting</a>, 日常用的命令会高亮显示，命令错误显示红色</li><li>  <a href="https://asciinema.org/docs/embedding">embedding</a></li><li>  <a href="https://powerline.readthedocs.io/en/latest/overview.html">powerline</a> 这里需要 pip 安装</li></ul><h3 id="安装-highlighting-示例"><a href="#安装-highlighting-示例" class="headerlink" title="安装 highlighting 示例"></a>安装 highlighting 示例</h3><p><code>git clone git://github.com/zsh-users/zsh-syntax-highlighting $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</code><br>并在<code>.zshrc</code>中添加</p><pre class=" language-JS"><code class="language-JS">plugins=(  autojump  zsh-autosuggestions  zsh-syntax-highlighting)</code></pre><h1 id="转移-bash-中的配置到-zsh"><a href="#转移-bash-中的配置到-zsh" class="headerlink" title="转移 bash 中的配置到 zsh"></a>转移 bash 中的配置到 zsh</h1><p><em>如果 nvm / node 在 zsh 之前安装的话 需要</em></p><blockquote><p>注：切换成 zsh 后，需要把 bash shell <code>.bashrc</code> 的 PATH 配置项 合并到 <code>.zshrc</code><br>如：nvm 配置：<a href="https://github.com/nvm-sh/nvm#zsh">https://github.com/nvm-sh/nvm#zsh</a><br>在 .zshrc 结尾加：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$HOME</span>/bin:/usr/local/bin:<span class="token variable">$PATH</span><span class="token function">export</span> NVM_DIR<span class="token operator">=</span><span class="token string">"<span class="token variable">$HOME</span>/.nvm"</span><span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> \. <span class="token string">"<span class="token variable">$NVM_DIR</span>/nvm.sh"</span>  <span class="token comment" spellcheck="true"># This loads nvm</span><span class="token punctuation">[</span> -s <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> \. <span class="token string">"<span class="token variable">$NVM_DIR</span>/bash_completion"</span>  <span class="token comment" spellcheck="true"># This loads nvm bash_completion</span></code></pre></blockquote><h1 id="安装-nvm"><a href="#安装-nvm" class="headerlink" title="安装 nvm"></a>安装 nvm</h1><p>在 bash shell 下<br><a href="https://github.com/nvm-sh/nvm">官方链接</a><br><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</code> / <code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash</code><br>或<a href="https://github.com/nvm-sh/nvm#git-install">通过 git</a></p><h2 id="切换-node-version"><a href="#切换-node-version" class="headerlink" title="切换 node version"></a>切换 node version</h2><pre class=" language-bash"><code class="language-bash">nvm <span class="token function">install</span> node <span class="token comment" spellcheck="true"># "node" is an alias for the latest version`</span><span class="token comment" spellcheck="true"># nvm install 6.14.4 # or 10.10.0, 8.9.1, etc</span>nvm use nodenvm <span class="token function">which</span> 5.0 <span class="token comment" spellcheck="true">#get the path to the executable to where it was installed</span></code></pre><h1 id="安装-yarn"><a href="#安装-yarn" class="headerlink" title="安装 yarn"></a>安装 yarn</h1><p><code>npm i -g yarn</code><br><code>yarn init</code><br><code>yarn install / yarn</code><br><code>yarn add [package] --dev</code></p><h1 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h1><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove docker docker-engine docker.io containerd runc<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> \    apt-transport-https \    ca-certificates \    curl \    gnupg-agent \    software-properties-common<span class="token comment" spellcheck="true"># 添加</span>curl -fsSL https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add -<span class="token function">sudo</span> apt-key fingerprint 0EBFCD88<span class="token comment" spellcheck="true"># 启动docker</span><span class="token function">sudo</span> systemctl <span class="token function">enable</span> docker<span class="token function">sudo</span> systemctl start docker<span class="token comment" spellcheck="true"># 建立 docker 用户组</span><span class="token function">sudo</span> <span class="token function">groupadd</span> docker<span class="token function">sudo</span> <span class="token function">usermod</span> -aG docker <span class="token variable">$USER</span><span class="token comment" spellcheck="true"># 解决ubuntu安装docker很慢的问题，把官方的仓库源https://download.docker.com/linux/ubuntu 替换成阿里的</span><span class="token function">sudo</span> add-apt-repository \   <span class="token string">"deb [arch=amd64] https://mirrors.aliyun.com/docker-ce/linux/ubuntu \   <span class="token variable"><span class="token variable">$(</span>lsb_release -cs<span class="token variable">)</span></span> \   stable"</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io<span class="token comment" spellcheck="true"># 换docker hub仓库源，改成阿里云申请的私人镜像[镜像中心-镜像加速器](https://account.aliyun.com/login/login.htm?oauth_callback=https://cr.console.aliyun.com/#/imageList)</span><span class="token function">sudo</span> <span class="token function">tee</span> /etc/docker/daemon.json <span class="token operator">&lt;&lt;</span>-<span class="token string">'EOF'</span>\<span class="token punctuation">{</span>\  <span class="token string">"registry-mirrors"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"https://d0usu3nm.mirror.aliyuncs.com"</span><span class="token punctuation">]</span>\<span class="token punctuation">}</span>\EOF<span class="token comment" spellcheck="true"># 重启docker</span><span class="token function">sudo</span> systemctl daemon-reload<span class="token function">sudo</span> systemctl restart docker<span class="token comment" spellcheck="true"># 测试 是否安装成功可pull image</span>docker run hello-world</code></pre><h1 id="安装-vscode"><a href="#安装-vscode" class="headerlink" title="安装 vscode"></a>安装 vscode</h1><p>Settings sync 同步插件及 setting.config</p><h1 id="把全局配置文件拷贝到-根目录"><a href="#把全局配置文件拷贝到-根目录" class="headerlink" title="把全局配置文件拷贝到 ~根目录"></a>把全局配置文件拷贝到 ~根目录</h1><p>如 .prettierrc, .vuerc, .gitconfig, .zshrc<br><del>.eslintrc</del><br>线上备份都存在了 github utils 中</p><hr><h1 id="linux-安装-synaptic"><a href="#linux-安装-synaptic" class="headerlink" title="linux 安装 synaptic"></a>linux 安装 synaptic</h1><h1 id="linux-美化"><a href="#linux-美化" class="headerlink" title="linux 美化"></a>linux 美化</h1><h1 id="linux-安装-wine"><a href="#linux-安装-wine" class="headerlink" title="linux 安装 wine"></a>linux 安装 wine</h1><p>wget -O- <a href="https://deepin-wine.i-m.dev/setup.sh">https://deepin-wine.i-m.dev/setup.sh</a> | sh<br>sudo apt-get install deepin.com.wechat</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://segmentfault.com/a/1190000013857738">Mac、Linux 安装 zsh &amp; oh my zsh - 零点开始 Coding - SegmentFault 思否</a></p><ul><li>  linux 命令行中的 curl &amp; wget <a href="https://www.cnblogs.com/lsdb/p/7171779.html">对比</a></li></ul></blockquote><ul><li>  sh 命令</li></ul>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端架构</title>
      <link href="/2020/04/02/sui-bi-qian-duan-jia-gou/"/>
      <url>/2020/04/02/sui-bi-qian-duan-jia-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="工程化-工作流"><a href="#工程化-工作流" class="headerlink" title="工程化 工作流"></a>工程化 工作流</h1><ul><li>开发<ul><li>脚手架：创建前端应用的目录结构，并生成样板代码</li><li>公共库：维护着可复用的 UI 组件、工具模块等公共资源</li><li>包管理器：引入第三方库/组件，并跟踪管理这些依赖项</li><li>编辑器：提供语法高亮、智能提示、引用跳转等功能，提升开发体验</li><li>构建工具：提供语法校验、编译、打包、DevServer 等功能，简化工作流</li><li>调试套件：提供预览、DevTools、Mock、性能分析诊断等调试功能，加速修改-验证的主循环</li></ul></li><li>测试<ul><li>单元测试框架：提供针对组件、逻辑的测试支持</li><li>静态扫描工具：从代码质量、构建产物质量、最佳实践/开发规约等多个维度做静态检查</li><li>自动化测试工具：针对 UI 效果和业务流程，提供测试支持</li><li>性能测试工具：监测并统计出相对准确的性能数据</li></ul></li><li>构建<ul><li>打包脚本：在语法校验、编译、打包的基础上，进行合并、压缩、<a href="http://www.ayqy.net/blog/react-suspense/#articleHeader1">代码拆分</a>、图片处理、<a href="http://www.ayqy.net/blog/csr-vs-ssr-vs-prerendering-vs-hydration/#articleHeader3">SSR</a>等极限优化</li><li>构建服务：支持多任务并行打包、通知</li></ul></li><li>部署<ul><li>发布平台：将前端资源上传至 CDN 或 SSR 渲染服务，或者以离线包的形式集成到移动客户端</li><li>迭代管理平台：提供 CI/CD 支持</li></ul></li><li>监控<ul><li>埋点平台：统计、分析业务数据，跟踪性能指标</li><li>监控平台：观察线上的异常信息，包括报错、白屏、流量异常等</li></ul></li></ul><h1 id="前端架构-细则"><a href="#前端架构-细则" class="headerlink" title="前端架构 细则"></a>前端架构 细则</h1><h2 id="基础层"><a href="#基础层" class="headerlink" title="基础层"></a>基础层</h2><ol><li><p>版本库</p><p>Gitlab 自搭建，或者 svn；每个版本一个分支，发布后锁死分支，并且每个分支独立线上地址并存方便回滚</p></li><li><p>纯前端版本发布</p><p>简单的<code>gulp.task(gulp-sftp库)</code>实现；或者<a href="https://juejin.im/post/5dbd80aef265da4cf77c894d">Jenkins</a></p></li><li><p>统一脚手架</p><p>统一脚手架搭建，加快项目前期效率</p></li><li><p>node 中间层</p><ul><li>代理：在开发环境下，我们可以利用代理来，解决最常见的跨域问题比如直接 node setHeader()；在线上环境下，我们可以利用代理，转发请求到多个服务端，减少客户端请求，比如一个 table 里拿员工信息列表，每个员工的姓名年龄是一个接口，头像又是另一个接口，这些可以放在 node 层去和 java 后端发出实际请求统一给到前端</li><li>缓存：缓存其实是更靠近前端的需求，用户的动作触发数据的更新，node 中间层可以直接处理一部分缓存需求。</li><li>限流：node 中间层，可以针对接口或者路由做响应的限流。</li><li>日志：相比其他服务端语言，node 中间层的日志记录，能更方便快捷的定位问题（是在浏览器端还是服务端）。</li><li>监控：擅长高并发的请求处理，做监控也是合适的选项。</li><li>鉴权：有一个中间层去鉴权，也是一种单一职责的实现。</li><li>路由：前端更需要掌握页面路由的权限和逻辑。</li><li>服务端渲染：node 中间层的解决方案更灵活，比如 SSR Nuxt 框架、模板直出、利用一些 JS 库做预渲染等等。</li></ul></li><li><p>埋点监控数据</p><p>比如 百度统计、腾讯移动统计接口；可以分析出用户点击量，各场景对比；并且遇到反常情况可以发出警报灯</p></li><li><p>安全</p><p>XSS 对用户输入需要转码（大部分时候要 server 端来处理）、</p><p>CSRF 攻击 要求 server 端加入 CSRF 的处理方法</p><p>https 协议</p></li><li><p>eslint</p><p>硬性统一代码风格，团队协作</p></li><li><p>灰度发布</p><p>指在发布版本时，初始情况下，只允许小比例（比如 1~5%比例的用户使用），若出现问题时，可以快速回滚使用老版本，适用于主链路和访问量极大的页面。</p></li><li><p>前后端分离</p><ul><li>中小项目常见的情况是后端只提供接口和让某个 url 指向某个 html，前端负责 html、css、js 等静态资源。</li><li>大型项目，建议前端负责除 html 以外的静态资源，而 html 交给后端处理。因为<ul><li>后端进行渲染，方便统一插入一些代码和资源，例如埋点 js，监控 js，国际化文本资源，页面标识符等</li><li>当页面需要统一的头尾时（参考淘宝里我的淘宝页面），前端不应该关注这些跟当前页面无关的东西；</li><li>如果通过 html 来管理，那么耦合度太高了，违背了解耦和分离的原则</li></ul></li></ul></li><li><p>Mock</p><p>解决在后端接口未好时，生成返回的数据。更好的 Mock 手法是直接嵌入到脚手架之中</p></li></ol><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><ol><li><p>单页和多页 架构</p><ul><li>页面和页面之间是独立的，不存在交互，因此当一个页面需要单独重构时，不会影响其他页面，对于有长期历史的项目来说，可维护性、可重构性要高很多</li><li>多页项目可以单次只更新一个页面的版本</li><li>多页项目的版本控制更简单，如果需要页面拆分，调整部分页面的使用流程，难度也会更低</li><li>利于灰度发布</li><li>多页项目的缺点是不同页面切换时，会有一个白屏时间</li></ul></li><li><p>以应用为单位进行开发、发布</p><p>所谓应用即指一个业务涉及到的前后端代码。项目比较大的时候如果将所有页面的前端项目放在一起会很难维护，不方便权限管理，即使改一个页面整个项目页会更新所有资源</p><ul><li>方便进行管理，当某个业务有需求变更时，可以只给研发人员该业务前端应用的 developer 权限；</li><li>在需要发布某业务时，只需要发布该业务的所属应用即可</li></ul></li><li><p>基础组件库的建设</p><p>比如公司内多个产品系统共用 UI 风格组件库。</p><p>设计基础组件库的前提，是要求统一技术栈，比如使用 ts</p><p>要求：可扩展性强，文档清楚详细，版本隔离，和 UI 协调统一</p></li><li><p>技术栈要统一,方便招人，简化团队成员培养成本</p><ul><li>三大框架选其一</li><li>需要兼容 IE8，建议 jQuery</li><li>组件库自建或者统一选择一个固定的第三方</li><li>一些特殊第三方库统一使用一个版本，例如需要使用地图时，固定使用高德或百度或腾讯地图</li><li>基础设施建设应避免重复造轮子，所有团队尽量共用，并有专门的前端平台负责统一这些东西，对于特殊需求，可以新建，但应当有说服力</li></ul></li><li><p>浏览器兼容</p><ul><li>配置 postcss，让某些 css 增加兼容性前缀</li><li>自写一个 wepback 的 loader，处理某些特殊场景</li><li>规范团队代码，使用更稳定的写法（例如移动端避免使用 fixed 进行布局）</li></ul></li><li><p>CDN</p><p>把图片资源加到 CDN 服务器，降低服务器带宽成本</p></li><li><p>负载均衡</p></li><li><p>建一个内部技术平台</p></li></ol><h1 id="微前端"><a href="#微前端" class="headerlink" title="微前端"></a>微前端</h1><p>微前端的想法是将前端单体分解为许多更小、更易管理的片段。每个团队可以端到端地拥有自己的功能，可以在自己的代码库中工作，可以独立发布版本，可以不断进行小的增量升级，还可以通过 API 与其他团队集成，以便他们可以一起组建和管理页面及应用程序。</p><ul><li>技术栈无关<br>主框架不限制接入应用的技术栈，微应用具备完全自主权</li><li>独立开发、独立部署<br>微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新</li><li>增量升级<br>在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略</li><li>独立运行时<br>每个微应用之间状态隔离，运行时状态不共享</li></ul><p><a href="https://www.infoq.cn/article/22ciyqbs3s0bhekvnorp">https://www.infoq.cn/article/22ciyqbs3s0bhekvnorp</a><br><a href="https://zhuanlan.zhihu.com/p/149780712">https://zhuanlan.zhihu.com/p/149780712</a><br><a href="https://single-spa.js.org/">https://single-spa.js.org/</a><br><a href="https://lerna.js.org/">https://lerna.js.org/</a></p><h2 id="关于应用间通信，可以使用DOM原生提供的自定义事件能力（CustomEvent），当然也可以选择额外的库。"><a href="#关于应用间通信，可以使用DOM原生提供的自定义事件能力（CustomEvent），当然也可以选择额外的库。" class="headerlink" title="关于应用间通信，可以使用DOM原生提供的自定义事件能力（CustomEvent），当然也可以选择额外的库。"></a>关于应用间通信，可以使用DOM原生提供的自定义事件能力（CustomEvent），当然也可以选择额外的库。</h2><blockquote><p>参考 <a href="https://juejin.im/post/5cea1f705188250640005472">https://juejin.im/post/5cea1f705188250640005472</a><br><a href="https://segmentfault.com/a/1190000023943703">https://segmentfault.com/a/1190000023943703</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Event and event-loop</title>
      <link href="/2020/03/24/za-tan-js-event-loop/"/>
      <url>/2020/03/24/za-tan-js-event-loop/</url>
      
        <content type="html"><![CDATA[<h1 id="Event-全局对象"><a href="#Event-全局对象" class="headerlink" title="Event 全局对象"></a>Event 全局对象</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event">https://developer.mozilla.org/en-US/docs/Web/API/Event</a></p><h1 id="事件循环机制-event-loop"><a href="#事件循环机制-event-loop" class="headerlink" title="事件循环机制 event loop"></a>事件循环机制 event loop</h1><p><img src="https://i.loli.net/2021/05/23/VayoDAEWe9mOH47.png" alt="image.png"><br><a href="https://cloud.tencent.com/developer/article/1448150">https://cloud.tencent.com/developer/article/1448150</a><br><a href="https://ths.js.org/2020/12/13/%E7%94%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F%E8%A7%A3%E9%87%8A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%92%8CPromise/">https://ths.js.org/2020/12/13/%E7%94%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F%E8%A7%A3%E9%87%8A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%92%8CPromise/</a></p><h2 id="浏览器-javascript-的机制"><a href="#浏览器-javascript-的机制" class="headerlink" title="浏览器 javascript 的机制"></a>浏览器 javascript 的机制</h2><p><a href="https://learnku.com/articles/38802">https://learnku.com/articles/38802</a></p><h3 id="setTimeout-fn-0-的原因及妙用-比如防抖函数"><a href="#setTimeout-fn-0-的原因及妙用-比如防抖函数" class="headerlink" title="setTimeout(fn,0)的原因及妙用 比如防抖函数"></a>setTimeout(fn,0)的原因及妙用 比如防抖函数</h3><p><a href="https://segmentfault.com/a/1190000013538587">https://segmentfault.com/a/1190000013538587</a></p><h3 id="setInterval-fn-100-执行间隔非预期"><a href="#setInterval-fn-100-执行间隔非预期" class="headerlink" title="setInterval(fn, 100) 执行间隔非预期"></a>setInterval(fn, 100) 执行间隔非预期</h3><p><a href="https://article.itxueyuan.com/9vEZ8">https://article.itxueyuan.com/9vEZ8</a></p><p>setTimeout()和 setInterval()的运行机制是，将指定的代码移出本次执行，等到下一轮 Event Loop 时，再检查是否到了指定时间。<br>如果到了，就执行对应的代码；如果不到，就等到再下一轮 Event Loop 时重新判断。这意味着，setTimeout()指定的代码，必须等到本次执行的所有代码都执行完，才会执行。<br>比如一个 setTimeout，指定 100 毫秒以后运行一个任务。但是，如果后面立即运行的任务（当前脚本的同步任务））非常耗时，过了 100 毫秒还无法结束，那么被推迟运行的 someTask 就只有等着，等到前面的 veryLongTask 运行结束，才轮到它执行</p><h2 id="NodeJs-端的机制"><a href="#NodeJs-端的机制" class="headerlink" title="NodeJs 端的机制"></a>NodeJs 端的机制</h2><h2 id="两个环境下的动图对比"><a href="#两个环境下的动图对比" class="headerlink" title="两个环境下的动图对比"></a>两个环境下的动图对比</h2><p><a href="http://lynnelv.github.io/js-event-loop-nodejs">http://lynnelv.github.io/js-event-loop-nodejs</a></p><p><a href="https://www.ruanyifeng.com/blog/2013/10/event_loop.html">阮一峰文章</a></p><blockquote><p><a href="https://zh.javascript.info/dispatch-events#shi-jian-zhong-de-shi-jian-shi-tong-bu-de">事件中的事件是同步的</a><br><a href="https://cloud.tencent.com/developer/article/1448150">从 Promise 对象讲解事件循环机制</a><br><a href="https://ths.js.org/2020/12/13/%E7%94%A8%E5%8F%AF%E8%A7%86%E5%8C%96%E7%9A%84%E6%96%B9%E5%BC%8F%E8%A7%A3%E9%87%8A%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF%E5%92%8CPromise/">gif 图 详解 event loop 和 Promise</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> webAPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动端H5集合</title>
      <link href="/2020/03/22/xiang-mu-h5/"/>
      <url>/2020/03/22/xiang-mu-h5/</url>
      
        <content type="html"><![CDATA[<ul><li>招商银行 - 未来联名卡活动 <a href="https://hojondo.gitee.io/projects-h5-cmb">H5 在线体验链接</a></li><li>苏宁易购 - 中国家庭购物活动 <a href="https://hojondo.gitee.io/projects-h5-suning">H5 在线体验链接</a></li><li>天猫 - 年货节开屏页 <a href="https://hojondo.gitee.io/projects-h5-tmall">H5 在线体验链接</a></li><li>兴业银行 - 梵高主题信用卡活动 <a href="http://client.elloworld.cn/xingye/">H5 在线体验链接</a></li><li>途牛 - 收集旅行照片活动 <a href="https://game.elloworld.cn/tuniu/">H5 在线体验链接</a></li><li>教育类游戏 - 模拟捏陶瓷 <a href="http://client.elloworld.cn/web3d/pottery2">H5 在线体验链接</a></li></ul><p>…todo description</p>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>官网门户</title>
      <link href="/2020/03/22/xiang-mu-portal/"/>
      <url>/2020/03/22/xiang-mu-portal/</url>
      
        <content type="html"><![CDATA[<!-- # 官网 React版 --><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>使用react搭建的官网页面，特点在于多入口多出口打包，实现各页面在服务器端分隔，优化单页面应用导致的庞大js的问题。</p><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><code>React</code>前端开发框架.</li><li><code>antd</code>UI库</li><li><code>scss</code>css预处理</li><li><code>gulp</code>vinyl-ftp自动部署静态资源到服务器</li><li><code>webpack</code>自搭建.webpack-devServer、webpack-merge、html-webpack-plugin、resolve.alias</li><li><code>babel</code> stage-3、ployfill、react</li></ul><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><pre class=" language-bash"><code class="language-bash">    <span class="token operator">|</span>-dist*    <span class="token operator">|</span>-build                     <span class="token comment" spellcheck="true"># webpack 配置文件</span>    <span class="token operator">|</span>-public                    <span class="token comment" spellcheck="true"># 静态文件</span>    <span class="token operator">|</span>-src        <span class="token operator">|</span>-main.js               <span class="token comment" spellcheck="true"># webpack 的入口文件；</span>        <span class="token operator">|</span>-App.vue               <span class="token comment" spellcheck="true"># 根组件</span>        <span class="token operator">|</span>-layout                <span class="token comment" spellcheck="true"># 整体布局</span>        <span class="token operator">|</span>-api                   <span class="token comment" spellcheck="true"># 存放api请求(文件名与模型名称基本一致,文件名使用小驼峰, 方法名称与后端restful控制器一致)</span>        <span class="token operator">|</span>-components            <span class="token comment" spellcheck="true"># 存放项目共用的组件,通常是一些可复用的组件会单独存放在该目录</span>        <span class="token operator">|</span>-pages                 <span class="token comment" spellcheck="true"># 存放项目业务代码</span>            <span class="token operator">|</span>-page1                <span class="token operator">|</span>-app.js        <span class="token comment" spellcheck="true"># 独立页面入口文件</span>                <span class="token operator">|</span>-index.js      <span class="token comment" spellcheck="true"># 单页面jsx</span>                <span class="token operator">|</span>-index.scss    <span class="token comment" spellcheck="true"># 样式</span>                <span class="token operator">|</span>-component.js  <span class="token comment" spellcheck="true"># 局部组件</span>            <span class="token operator">|</span>-<span class="token punctuation">..</span>.        <span class="token operator">|</span>-common                <span class="token comment" spellcheck="true"># 存放项目共用的资源，如：常用的图片、图标，样式，常量文件等等</span>            <span class="token operator">|</span>-assets            <span class="token comment" spellcheck="true"># 存放项目共用的代码以外的资源，如：图片、图标、视频、字体 等</span>            <span class="token operator">|</span>-styles            <span class="token comment" spellcheck="true">#</span>                <span class="token operator">|</span>-index.scss    <span class="token comment" spellcheck="true"># 全局样式，出口文件</span>                <span class="token operator">|</span>-mixin.scss    <span class="token comment" spellcheck="true"># 混合指令 定义可重复使用的样式（字体通用样式</span>                <span class="token operator">|</span>-constant.scss <span class="token comment" spellcheck="true"># 存放scss的常量（主题相关通用颜色</span>                <span class="token operator">|</span>-<span class="token punctuation">..</span>.            <span class="token operator">|</span>-<span class="token punctuation">..</span>.    <span class="token operator">|</span>-package.json              <span class="token comment" spellcheck="true"># npm包配置文件，里面定义了项目的npm脚本，依赖包等信息</span>    <span class="token operator">|</span>-README.md                 <span class="token comment" spellcheck="true"># 项目说明文件</span>    <span class="token operator">|</span>-.babelrc                  <span class="token comment" spellcheck="true"># babel 的配置文件</span></code></pre><h2 id="重点Mark"><a href="#重点Mark" class="headerlink" title="重点Mark"></a>重点Mark</h2><h3 id="Webpack多入口多出口-实现各页面独立index-html-js"><a href="#Webpack多入口多出口-实现各页面独立index-html-js" class="headerlink" title="Webpack多入口多出口 实现各页面独立index.html/js"></a>Webpack多入口多出口 实现各页面独立index.html/js</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// webpack.base.js</span><span class="token keyword">const</span> Creator_entries <span class="token operator">=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>element <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>               a<span class="token punctuation">[</span>element<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`../src/pages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>element<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/app.js`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> Creator_HtmlWebpackPlugin <span class="token operator">=</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>title <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            title<span class="token punctuation">:</span>title<span class="token punctuation">.</span>title<span class="token punctuation">,</span>            filename<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>title<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/index.html`</span></span><span class="token punctuation">,</span>               chunks<span class="token punctuation">:</span><span class="token punctuation">[</span>title<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span>            template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../public/index.html'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token function">Creator_entries</span><span class="token punctuation">(</span>outArr<span class="token punctuation">)</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        filename<span class="token punctuation">:</span> <span class="token string">'[name]/[name].bundle.js'</span><span class="token punctuation">,</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        chunkFilename<span class="token punctuation">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 关键</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token operator">...</span><span class="token function">Creator_HtmlWebpackPlugin</span><span class="token punctuation">(</span>outArr<span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>洗衣管家</title>
      <link href="/2020/03/22/xiang-mu-wash/"/>
      <url>/2020/03/22/xiang-mu-wash/</url>
      
        <content type="html"><![CDATA[<!-- # 洗衣管家 --><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>服务于产品-洗衣管家-致力于实现线上线下提供一站式洗衣服务的终端系统，用于实体店嵌入式设备</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><blockquote><p><a href="https://hojondo.gitee.io/projects-vue-washsys">Mock随机数据 在线预览地址</a><br><img src="https://i.loli.net/2021/04/25/Oh7Fvac82VYiLMp.png"></p></blockquote><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><code>Vue</code>前端开发框架.vuex、vue-router</li><li><code>element</code>UI库</li><li><code>scss</code>css预处理</li><li><code>eslint</code>recommended</li><li><code>mockJs</code>拦截Ajax请求 生成随机数据</li><li><code>axios</code>promis库 前后端对接</li><li><code>vue-cli</code>脚手架</li></ul><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><pre class=" language-bash"><code class="language-bash">    <span class="token operator">|</span>-dist*    <span class="token operator">|</span>-public                    <span class="token comment" spellcheck="true"># 静态文件</span>    <span class="token operator">|</span>-src        <span class="token operator">|</span>-main.js               <span class="token comment" spellcheck="true"># webpack 的入口文件；</span>        <span class="token operator">|</span>-App.vue               <span class="token comment" spellcheck="true"># 根组件</span>        <span class="token operator">|</span>-app                   <span class="token comment" spellcheck="true"># 存放项目业务代码</span>            <span class="token operator">|</span>-<span class="token punctuation">..</span>.        <span class="token operator">|</span>-api                   <span class="token comment" spellcheck="true"># 存放api请求(文件名与模型名称基本一致,文件名使用小驼峰, 方法名称与后端restful控制器一致)</span>        <span class="token operator">|</span>-components            <span class="token comment" spellcheck="true"># 存放项目共用的组件,通常是一些可复用的组件会单独存放在该目录</span>        <span class="token operator">|</span>-assets                <span class="token comment" spellcheck="true"># 存放项目共用的代码以外的资源，如：图片、图标、视频、字体 等</span>            <span class="token operator">|</span>-css            <span class="token operator">|</span>-img        <span class="token operator">|</span>-router                <span class="token comment" spellcheck="true"># 存放前端路由相关配置</span>        <span class="token operator">|</span>-store                 <span class="token comment" spellcheck="true"># vuex的目录</span>        <span class="token operator">|</span>-layout                <span class="token comment" spellcheck="true"># 整体布局</span>        <span class="token operator">|</span>-util                  <span class="token comment" spellcheck="true"># 第三方静态引用库</span>    <span class="token operator">|</span>-package.json              <span class="token comment" spellcheck="true"># npm包配置文件，里面定义了项目的npm脚本，依赖包等信息</span>    <span class="token operator">|</span>-README.md                 <span class="token comment" spellcheck="true"># 项目说明文件</span>    <span class="token operator">|</span>-babel.config.js           <span class="token comment" spellcheck="true"># babel 的配置文件</span>    <span class="token operator">|</span>-vue.config.js             <span class="token comment" spellcheck="true"># vue-cli的额外自定配置文件</span></code></pre><h2 id="页面组件嵌套逻辑"><a href="#页面组件嵌套逻辑" class="headerlink" title="页面组件嵌套逻辑"></a>页面组件嵌套逻辑</h2><p><img src="http://assets.processon.com/chart_image/5e76f366e4b092510f6b12e0.png" alt="思维导图"></p><h2 id="重点Mark"><a href="#重点Mark" class="headerlink" title="重点Mark"></a>重点Mark</h2><h3 id="自定义通用组件Tabs-TabPane"><a href="#自定义通用组件Tabs-TabPane" class="headerlink" title="自定义通用组件Tabs/TabPane"></a>自定义通用组件Tabs/TabPane</h3><pre class=" language-html"><code class="language-html">// CustomTabs.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clothsort<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--标题页的标题 v-for遍历, :class 动态绑定class--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span>          <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tabCls(item)<span class="token punctuation">"</span></span>          <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in navList<span class="token punctuation">"</span></span>          <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span>          <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handleChange(index)<span class="token punctuation">"</span></span>        <span class="token punctuation">></span></span>{{item.label}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cloth_con<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--这里的slot就是嵌套的pane组件的内容--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    navList<span class="token punctuation">,</span>    currentValue<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">value</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>currentValue <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">currentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//tab发生变化时，更新pane的显示状态</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">updateNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">updateNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>pane<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            _this<span class="token punctuation">.</span>navList<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            label<span class="token punctuation">:</span> pane<span class="token punctuation">.</span>label<span class="token punctuation">,</span>            name<span class="token punctuation">:</span> pane<span class="token punctuation">.</span>name <span class="token operator">||</span> index            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span>tab<span class="token punctuation">.</span>show <span class="token operator">=</span> tab<span class="token punctuation">.</span>name <span class="token operator">===</span> _this<span class="token punctuation">.</span>currentValue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">handleChangeTab</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        _this<span class="token punctuation">.</span>currentValue <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//改变当前选中的tab，触发watch</span>        _this<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实现子组件与父组件通信</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">// CustomPane.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pane<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">props<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//设置pane的标识</span>    name<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//label是设置标题</span>    label<span class="token punctuation">:</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span>data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    show<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="自定义通用组件-Modal"><a href="#自定义通用组件-Modal" class="headerlink" title="自定义通用组件 Modal"></a>自定义通用组件 Modal</h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">999999</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>close<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>icon icon-close<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$emit(<span class="token punctuation">'</span>close<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pop-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    props<span class="token punctuation">:</span> <span class="token punctuation">{</span>        show<span class="token punctuation">:</span> <span class="token punctuation">{</span>            type<span class="token punctuation">:</span> Boolean<span class="token punctuation">,</span>            required<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="自定义通用组件-Alert"><a href="#自定义通用组件-Alert" class="headerlink" title="自定义通用组件 Alert"></a>自定义通用组件 Alert</h3><pre class=" language-html"><code class="language-html">// CustomAlert.vue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customAlert<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      {{ message }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// CustomAlert.js</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Alert <span class="token keyword">from</span> <span class="token string">'./customAlert.vue'</span><span class="token keyword">const</span> AlertBox <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>Alert<span class="token punctuation">)</span><span class="token punctuation">;</span>Alert<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AlertBox</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Popup</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> CustomAlert <span class="token keyword">from</span> <span class="token string">'_components/customAlert.js'</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$customAlert <span class="token operator">=</span> CustomAlert<span class="token punctuation">.</span>install<span class="token punctuation">;</span></code></pre><h3 id="调用H5-navigator-API-打开摄像头和canvas截图"><a href="#调用H5-navigator-API-打开摄像头和canvas截图" class="headerlink" title="调用H5 navigator API 打开摄像头和canvas截图"></a>调用H5 navigator API 打开摄像头和canvas截图</h3><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">function</span> getCompetence <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> _this <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>thisCanvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'canvasCamera'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>thisContext <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>thisCanvas<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">'2d'</span><span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>thisVideo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'videoCamera'</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 旧版本浏览器可能根本不支持mediaDevices，我们首先设置一个空对象</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>mediaDevices <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        navigator<span class="token punctuation">.</span>mediaDevices <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 一些浏览器实现了部分mediaDevices，我们不能只分配一个对象</span>      <span class="token comment" spellcheck="true">// 使用getUserMedia，因为它会覆盖现有的属性。</span>      <span class="token comment" spellcheck="true">// 这里，如果缺少getUserMedia属性，就添加它。</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span>getUserMedia <span class="token operator">===</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>        navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span>getUserMedia <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>constraints<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 首先获取现存的getUserMedia(如果存在)</span>          <span class="token keyword">var</span> getUserMedia <span class="token operator">=</span> navigator<span class="token punctuation">.</span>webkitGetUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>mozGetUserMedia <span class="token operator">||</span> navigator<span class="token punctuation">.</span>getUserMedia          <span class="token comment" spellcheck="true">// 有些浏览器不支持，会返回错误信息</span>          <span class="token comment" spellcheck="true">// 保持接口一致</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>getUserMedia<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'getUserMedia is not implemented in this browser'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>          <span class="token comment" spellcheck="true">// 否则，使用Promise将调用包装到旧的navigator.getUserMedia</span>          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            getUserMedia<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>navigator<span class="token punctuation">,</span> constraints<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">var</span> constraints <span class="token operator">=</span> <span class="token punctuation">{</span> audio<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> video<span class="token punctuation">:</span> <span class="token punctuation">{</span> width<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>videoCamera<span class="token punctuation">.</span>clientWidth<span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>videoCamera<span class="token punctuation">.</span>clientHeight <span class="token punctuation">}</span> <span class="token punctuation">}</span>        navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>stream<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 旧的浏览器可能没有srcObject</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'srcObject'</span> <span class="token keyword">in</span> _this<span class="token punctuation">.</span>thisVideo<span class="token punctuation">)</span> <span class="token punctuation">{</span>            _this<span class="token punctuation">.</span>thisVideo<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> stream          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 避免在新的浏览器中使用它，因为它正在被弃用。</span>            _this<span class="token punctuation">.</span>thisVideo<span class="token punctuation">.</span>src <span class="token operator">=</span> window<span class="token punctuation">.</span>URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>stream<span class="token punctuation">)</span>          <span class="token punctuation">}</span>          _this<span class="token punctuation">.</span>thisVideo<span class="token punctuation">.</span>onloadedmetadata <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            _this<span class="token punctuation">.</span>thisVideo<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> stopNavigator <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 关闭摄像头</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>thisVideo<span class="token punctuation">.</span>srcObject<span class="token punctuation">.</span><span class="token function">getTracks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>团队协作工具</title>
      <link href="/2020/03/22/xiang-mu-teamholder/"/>
      <url>/2020/03/22/xiang-mu-teamholder/</url>
      
        <content type="html"><![CDATA[<!-- # 协同创作管理平台 --><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>本系统 模仿Tower.im，面向建模开发者团队 实现安排工作任务，管理项目进度等功能。</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><blockquote><p><a href="https://hojondo.gitee.io/projects-vue-teamholder">Mock随机数据 在线预览地址</a><br><img src="https://i.loli.net/2021/04/25/a4OlMgfcot9zTJk.png"></p></blockquote><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><code>Vue</code>前端开发框架.vuex、vue-router</li><li><code>ant-design-vue</code>UI库</li><li><code>sass</code>css预处理</li><li><code>eslint</code>airbnb标准</li><li><code>mockJs</code>拦截Ajax请求 生成随机数据</li><li><code>axios</code>promis库 前后端对接</li><li><code>gulp</code>vinyl-ftp自动部署静态资源到服务器</li><li><code>vue-cli</code>脚手架</li><li><code>clipboard/moment/namedavatar</code>第三方库</li></ul><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><pre class=" language-bash"><code class="language-bash">    <span class="token operator">|</span>-dist*    <span class="token operator">|</span>-public                    <span class="token comment" spellcheck="true"># 静态文件</span>    <span class="token operator">|</span>-src        <span class="token operator">|</span>-main.js               <span class="token comment" spellcheck="true"># webpack 的入口文件；</span>        <span class="token operator">|</span>-App.vue               <span class="token comment" spellcheck="true"># 根组件</span>        <span class="token operator">|</span>-app                   <span class="token comment" spellcheck="true"># 存放项目业务代码</span>            <span class="token operator">|</span>-<span class="token punctuation">..</span>.        <span class="token operator">|</span>-api                   <span class="token comment" spellcheck="true"># 存放api请求(文件名与模型名称基本一致,文件名使用小驼峰, 方法名称与后端restful控制器一致)</span>        <span class="token operator">|</span>-components            <span class="token comment" spellcheck="true"># 存放项目共用的组件,通常是一些可复用的组件会单独存放在该目录</span>        <span class="token operator">|</span>-assets                <span class="token comment" spellcheck="true"># 存放项目共用的代码以外的资源，如：图片、图标、视频、字体 等</span>            <span class="token operator">|</span>-img        <span class="token operator">|</span>-styles                <span class="token comment" spellcheck="true"># 全局通用样式文件</span>        <span class="token operator">|</span>-router                <span class="token comment" spellcheck="true"># 存放前端路由相关配置</span>        <span class="token operator">|</span>-store                 <span class="token comment" spellcheck="true"># vuex的目录</span>        <span class="token operator">|</span>-layout                <span class="token comment" spellcheck="true"># 整体布局</span>        <span class="token operator">|</span>-mock                  <span class="token comment" spellcheck="true"># mockJs文件</span>    <span class="token operator">|</span>-static                    <span class="token comment" spellcheck="true"># 第三方静态引用库</span>    <span class="token operator">|</span>-package.json              <span class="token comment" spellcheck="true"># npm包配置文件，里面定义了项目的npm脚本，依赖包等信息</span>    <span class="token operator">|</span>-README.md                 <span class="token comment" spellcheck="true"># 项目说明文件</span>    <span class="token operator">|</span>-babel.config.js           <span class="token comment" spellcheck="true"># babel 的配置文件</span>    <span class="token operator">|</span>-vue.config.js             <span class="token comment" spellcheck="true"># vue-cli的额外自定配置文件</span></code></pre><h2 id="页面组件嵌套逻辑"><a href="#页面组件嵌套逻辑" class="headerlink" title="页面组件嵌套逻辑"></a>页面组件嵌套逻辑</h2><p><img src="http://assets.processon.com/chart_image/5e770d14e4b03b99652aaf31.png" alt="思维导图"></p><h2 id="Mark"><a href="#Mark" class="headerlink" title="Mark"></a>Mark</h2>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CMS后台应用管理系统</title>
      <link href="/2020/03/21/xiang-mu-cms/"/>
      <url>/2020/03/21/xiang-mu-cms/</url>
      
        <content type="html"><![CDATA[<!-- # 后台应用管理系统 --><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>一个企业OA系统 服务于企业内部存储和分享建模模型仓库的人员、部门及模型库管理。分4大方面：员工管理；建模软件权限分配；模型库管理及统计；企业信息及本系统设置</p><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><blockquote><p><a href="https://hojondo.gitee.io/projects-vue-cms">Mock随机数据 在线预览地址</a><br><img src="https://i.loli.net/2021/04/25/YZrdvzMxNyoaGi6.png"></p></blockquote><h2 id="技术栈"><a href="#技术栈" class="headerlink" title="技术栈"></a>技术栈</h2><ul><li><code>Vue</code>前端开发框架.vuex、vue-router</li><li><code>iview</code>UI库</li><li><code>scss</code>css预处理</li><li><code>eslint</code>google代码规范</li><li><code>mockJs</code>拦截Ajax请求 生成随机数据</li><li><code>axios</code>promis库 前后端对接</li><li><code>gulp</code>vinyl-ftp自动部署静态资源到服务器</li><li><code>webpack</code>自搭建.webpack-devServer、webpack-merge、html-webpack-plugin、resolve.alias</li><li><code>babel</code> stage-3、ployfill</li><li><code>echartsjs, </code> 等第三方库</li></ul><h2 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h2><pre class=" language-bash"><code class="language-bash">    <span class="token operator">|</span>-dist*    <span class="token operator">|</span>-build                     <span class="token comment" spellcheck="true"># webpack 配置文件</span>    <span class="token operator">|</span>-config                    <span class="token comment" spellcheck="true"># 与项目构建相关的常用的配置选项</span>        <span class="token operator">|</span>-index.js              <span class="token comment" spellcheck="true"># 主配置文件</span>        <span class="token operator">|</span>-dev.env.js            <span class="token comment" spellcheck="true"># 开发环境变量</span>        <span class="token operator">|</span>-prod.env.js           <span class="token comment" spellcheck="true"># 生产环境变量</span>    <span class="token operator">|</span>-src        <span class="token operator">|</span>-main.js               <span class="token comment" spellcheck="true"># webpack 的入口文件；</span>        <span class="token operator">|</span>-api                   <span class="token comment" spellcheck="true"># 存放api请求(文件名与模型名称基本一致,文件名使用小驼峰, 方法名称与后端restful控制器一致)</span>        <span class="token operator">|</span>-components            <span class="token comment" spellcheck="true"># 存放项目共用的组件,通常是一些可复用的组件会单独存放在该目录</span>        <span class="token operator">|</span>-router                <span class="token comment" spellcheck="true"># 存放前端路由相关配置</span>        <span class="token operator">|</span>-store                 <span class="token comment" spellcheck="true"># vuex的目录</span>        <span class="token operator">|</span>-directive             <span class="token comment" spellcheck="true"># 存放vue自定义指令</span>        <span class="token operator">|</span>-filters               <span class="token comment" spellcheck="true"># 存放vue过滤器</span>        <span class="token operator">|</span>-app/view              <span class="token comment" spellcheck="true"># 存放项目业务代码</span>            <span class="token operator">|</span>-App.vue           <span class="token comment" spellcheck="true"># 根组件</span>            <span class="token operator">|</span>-layout            <span class="token comment" spellcheck="true"># 整体布局</span>            <span class="token operator">|</span>-<span class="token punctuation">..</span>.        <span class="token operator">|</span>-common                <span class="token comment" spellcheck="true"># 存放项目共用的资源，如：常用的图片、图标，样式，常量文件等等</span>            <span class="token operator">|</span>-assets            <span class="token comment" spellcheck="true"># 存放项目共用的代码以外的资源，如：图片、图标、视频、字体 等</span>            <span class="token operator">|</span>-libraries         <span class="token comment" spellcheck="true"># 存放自己封装的或者引用的库,如momentJS,clipboard ...</span>            <span class="token operator">|</span>-styles            <span class="token comment" spellcheck="true">#</span>                <span class="token operator">|</span>-index.scss    <span class="token comment" spellcheck="true"># 全局样式，出口文件</span>                <span class="token operator">|</span>-mixin.scss    <span class="token comment" spellcheck="true"># 混合指令 定义可重复使用的样式（字体通用样式</span>                <span class="token operator">|</span>-constant.scss <span class="token comment" spellcheck="true"># 存放scss的常量（主题相关通用颜色</span>                <span class="token operator">|</span>-<span class="token punctuation">..</span>.            <span class="token operator">|</span>-<span class="token punctuation">..</span>.    <span class="token operator">|</span>-static                    <span class="token comment" spellcheck="true"># 存放不会被webpack处理，它们会被拷贝到输出目录下。适合与 webpack 不兼容的库，或在构建输出中必须使用特定名称的文件，</span>    <span class="token operator">|</span>-package.json              <span class="token comment" spellcheck="true"># npm包配置文件，里面定义了项目的npm脚本，依赖包等信息</span>    <span class="token operator">|</span>-README.md                 <span class="token comment" spellcheck="true"># 项目说明文件</span>    <span class="token operator">|</span>-index.html                <span class="token comment" spellcheck="true"># HTML模板,webpack插件 html-webpack-plugin使用</span>    <span class="token operator">|</span>-.babelrc                  <span class="token comment" spellcheck="true"># babel 的配置文件</span>    <span class="token operator">|</span>-.editorconfig             <span class="token comment" spellcheck="true"># 编辑器的配置文件；可配置如缩进、空格、制表类似的参数</span>    <span class="token operator">|</span>-.eslintrc.json              <span class="token comment" spellcheck="true"># eslint 的配置文件</span>    <span class="token operator">|</span>-.eslintignore             <span class="token comment" spellcheck="true"># eslint 的忽略规则</span></code></pre><h2 id="页面组件嵌套逻辑"><a href="#页面组件嵌套逻辑" class="headerlink" title="页面组件嵌套逻辑"></a>页面组件嵌套逻辑</h2><p><img src="http://assets.processon.com/chart_image/5e764d4ee4b092510f6aa817.png" alt="思维导图"></p><h2 id="重点Mark"><a href="#重点Mark" class="headerlink" title="重点Mark"></a>重点Mark</h2><h3 id="自定义实现跨父子多层分发机制"><a href="#自定义实现跨父子多层分发机制" class="headerlink" title="自定义实现跨父子多层分发机制"></a>自定义实现跨父子多层分发机制</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 后代改祖先数据 */</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$dispatch <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> parent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>parent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    parent<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    parent <span class="token operator">=</span> parent<span class="token punctuation">.</span>$parent<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 祖先改后代数据 */</span><span class="token comment" spellcheck="true">// 递归向上传播</span><span class="token keyword">function</span> <span class="token function">boardcast</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>$children<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 每一个子组件</span>    child<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>$children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>      boardcast<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$boardcast <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>  boardcast<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> eventName<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="路由守卫实现loading-各页面document-title等赋值操作"><a href="#路由守卫实现loading-各页面document-title等赋值操作" class="headerlink" title="路由守卫实现loading,各页面document.title等赋值操作"></a>路由守卫实现loading,各页面document.title等赋值操作</h3><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>to<span class="token punctuation">,</span> <span class="token keyword">from</span><span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 路由发生变化修改页面title</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token punctuation">{</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'EBM - '</span> <span class="token operator">+</span> to<span class="token punctuation">.</span>meta<span class="token punctuation">.</span>title<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  iView<span class="token punctuation">.</span>LoadingBar<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>route<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  iView<span class="token punctuation">.</span>LoadingBar<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="通过scss实现通用风格样式整合和切换整体主题"><a href="#通过scss实现通用风格样式整合和切换整体主题" class="headerlink" title="通过scss实现通用风格样式整合和切换整体主题"></a>通过<code>scss</code>实现通用风格样式整合和切换整体主题</h3><p>颜色：</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">// common color</span><span class="token property"><span class="token variable">$color_adjunctive_sub</span></span><span class="token punctuation">:</span> <span class="token hexcode">#808695</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color_adjunctive_disabled</span></span><span class="token punctuation">:</span> <span class="token hexcode">#C5C8CE</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color_adjunctive_border</span></span><span class="token punctuation">:</span> <span class="token hexcode">#DCDEE2</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color_adjunctive_divider</span></span><span class="token punctuation">:</span> <span class="token hexcode">#E8EAEC</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color_intersperse_info</span></span><span class="token punctuation">:</span> <span class="token hexcode">#2DB7F5</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color_intersperse_success</span></span><span class="token punctuation">:</span> <span class="token hexcode">#19BE6B</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color_intersperse_warning</span></span><span class="token punctuation">:</span> <span class="token hexcode">#FA9600</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color_intersperse_error</span></span><span class="token punctuation">:</span> <span class="token hexcode">#ED4014</span><span class="token punctuation">;</span><span class="token property"><span class="token variable">$color_adjunctive_foreground</span></span> <span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** theme class: theTheme values vary in [theme_cyan, theme_blue, theme_red] */</span><span class="token property"><span class="token variable">$theTheme</span></span><span class="token punctuation">:</span> theme_cyan<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// primary</span><span class="token selector">.theme_color_primary</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#2D8CF0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#156ECC</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#D4575A</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.theme_bg_primary</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#2D8CF0</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#2D8CF0</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#156ECC</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#156ECC</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#D4575A</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#D4575A</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// lightPrimary</span><span class="token selector">.theme_color_lightPrimary</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#5CADFF</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#3F90E6</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#F27578</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.theme_bg_lightPrimary</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#5CADFF</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#5CADFF</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#3F90E6</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#3F90E6</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#F27578</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F27578</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// darkPrimary</span><span class="token selector">.theme_color_darkPrimary</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#2B85E4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#0B55A4</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#BE3F42</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.theme_bg_darkPrimary</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#2B85E4</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#2B85E4</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#0B55A4</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#0B55A4</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#BE3F42</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#BE3F42</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// label</span><span class="token selector">.theme_color_label</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#E9F3FE</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#E7F0FA</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FBEEEE</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">.theme_bg_label</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#E9F3FE</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#E9F3FE</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#E7F0FA</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#E7F0FA</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#FBEEEE</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FBEEEE</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// adjunctive_content</span><span class="token selector">.theme_color_adjunctive_content</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#515A6E</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#515A6E</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#313C53</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#313C53</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#534D4D</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#534D4D</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// adjunctive_darkContent</span><span class="token selector">.theme_color_adjunctive_darkContent</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#363E4F</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#363E4F</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#253048</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#253048</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#4A4444</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#4A4444</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// adjunctive_background</span><span class="token selector">.theme_color_adjunctive_background</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#F2F4F5</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F2F4F5</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#F2F4F5</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F2F4F5</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#F5F2F2</span>!important<span class="token punctuation">;</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token hexcode">#F5F2F2</span>!important<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// intersperse_combined</span><span class="token selector">.theme_color_intersperse_combined</span><span class="token punctuation">{</span>  <span class="token selector">.theme_cyan <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#D7DEE9</span>, <span class="token hexcode">#A2ADC1</span><span class="token punctuation">)</span><span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_blue <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#4770BB</span>, <span class="token hexcode">#13387A</span><span class="token punctuation">)</span><span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">.theme_red <span class="token parent important">&amp;</span></span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to bottom, <span class="token hexcode">#D4575A</span>, <span class="token hexcode">#8E1317</span><span class="token punctuation">)</span><span class="token important">!important</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token selector">:export </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// the :export directive is the magic sauce for webpack</span>  <span class="token property">theTheme</span><span class="token punctuation">:</span> <span class="token variable">$theTheme</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>改变主题：<code>document.getElementById(&#39;app&#39;).setAttribute(&#39;class&#39;, theTheme)</code><br>字体</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">/**全局字体定义 */</span><span class="token selector">html </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//font-size: 100px;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">625%</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//基准 1rem = 100px</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 字体大小变量 规定引用font时 内部参数必须用该变量</span><span class="token property"><span class="token variable">$font_size_xl</span></span><span class="token punctuation">:</span> <span class="token number">.18</span>rem<span class="token punctuation">;</span><span class="token property"><span class="token variable">$font_size_lg</span></span><span class="token punctuation">:</span> <span class="token number">.16</span>rem<span class="token punctuation">;</span><span class="token property"><span class="token variable">$font_size_md</span></span><span class="token punctuation">:</span> <span class="token number">.14</span>rem<span class="token punctuation">;</span><span class="token property"><span class="token variable">$font_size_sm</span></span><span class="token punctuation">:</span> <span class="token number">.12</span>rem<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 字体</span><span class="token keyword">@mixin</span> <span class="token selector">font_title </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">.32</span>rem<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#17233D</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*标题 */</span><span class="token keyword">@mixin</span> <span class="token selector">font_head </span><span class="token punctuation">{</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#464C5B</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_mainHead </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_xl</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_subHead </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_lg</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_smallHead </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_md</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//反</span><span class="token keyword">@mixin</span> <span class="token selector">font_inverse_head </span><span class="token punctuation">{</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_inverse_mainHead </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_xl</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_inverse_head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_inverse_subHead </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_lg</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_inverse_head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_inverse_smallHead </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_md</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_inverse_head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*正文 */</span><span class="token keyword">@mixin</span> <span class="token selector">font_text_color </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#657180</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_xlargeText</span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span><span class="token variable">$font_size_xl</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_text_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_largeText </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_lg</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_text_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_text </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_md</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_text_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_smallText </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_sm</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_text_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//反</span><span class="token keyword">@mixin</span> <span class="token selector">font_inverse_text_color </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FFFFFF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_inverse_largeText </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_lg</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_inverse_text_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_inverse_text </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_md</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_inverse_text_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_inverse_smallText </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_sm</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_inverse_text_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*辅助 */</span><span class="token keyword">@mixin</span> <span class="token selector">font_help_color </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#9EA7B4</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_help </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_md</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_help_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_smallHelp </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_sm</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_help_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*失效 */</span><span class="token keyword">@mixin</span> <span class="token selector">font_disabled_color </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#C3CBD6</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_disabled </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_md</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_disabled_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_smallDisabled </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_sm</span><span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#C3CBD6</span>FF<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*链接 */</span><span class="token keyword">@mixin</span> <span class="token selector">font_link_color </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#3399FF</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_link </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_md</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_link_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_smallLink </span><span class="token punctuation">{</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_sm</span><span class="token punctuation">;</span>    <span class="token keyword">@include</span> font_link_color<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*提示 */</span><span class="token selector">.font_tipError </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ED4014</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_sm</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_tipWarning </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#FA9600</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_sm</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.font_tipSuccess </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#19BE6B</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$font_size_sm</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目经验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序-原生</title>
      <link href="/2020/03/02/bi-ji-wei-xin-xiao-cheng-xu-yuan-sheng/"/>
      <url>/2020/03/02/bi-ji-wei-xin-xiao-cheng-xu-yuan-sheng/</url>
      
        <content type="html"><![CDATA[<p><a href="https://tgideas.qq.com/doc/index.html">腾讯 H5 文档库</a></p><h1 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h1><h1 id="0-文件类型"><a href="#0-文件类型" class="headerlink" title="0.文件类型"></a>0.文件类型</h1><ul><li>.json<ul><li><code>app.json</code> 是当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部 tab 等</li><li><code>project.config.json</code> 小程序开发者工具在每个项目的根目录都会生成一个 <code>project.config.json</code>，你在工具上做的任何配置都会写入到这个文件，当你重新安装工具或者换电脑工作时，你只要载入同一个项目的代码包，开发者工具就自动会帮你恢复到当时你开发项目时的个性化配置，其中会包括编辑器的颜色、代码上传时自动压缩等等一系列选项</li><li><code>page.json</code> 用来表示 pages/logs 目录下的 <code>logs.json</code> 这类和小程序页面相关的配置。</li></ul></li><li>.wxml<ul><li>标签：是 <code>view</code>, <code>button</code>, <code>text</code> 等等，这些标签就是小程序给开发者包装好的基本能力，还提供了地图、视频、音频等等组件能力</li><li>MVVM 开发模式 ：<code>&#123;&#123;value&#125;&#125;</code> <code>wx:if</code>等</li></ul></li><li>.wxss<ul><li>提供了新的尺寸单位：<code>rpx</code></li><li>提供全局样式<code>app.wxss</code>和局部样式<code>page.wxss</code></li></ul></li><li>.js<ul><li><code>wxml</code>中 <code>[bindtap=&#39;funcX&#39;]</code>， <code>js</code>中 <code>funcX:function()&#123;&#125;</code></li></ul></li></ul><h1 id="1-json-配置参数"><a href="#1-json-配置参数" class="headerlink" title="1. json 配置参数"></a>1. json 配置参数</h1><h3 id="1-1-app-json-配置参数"><a href="#1-1-app-json-配置参数" class="headerlink" title="1.1 app.json 配置参数"></a>1.1 app.json 配置参数</h3><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#pages">pages</a></td><td>String Array</td><td>是</td><td>页面路径列表</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#window">window</a></td><td>Object</td><td>否</td><td>全局的默认窗口表现</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#tabbar">tabBar</a></td><td>Object</td><td>否</td><td>底部 <code>tab</code> 栏的表现</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#networktimeout">networkTimeout</a></td><td>Object</td><td>否</td><td>网络超时时间</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#debug">debug</a></td><td>Boolean</td><td>否</td><td>是否开启 debug 模式，默认关闭</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#functionalpages">functionalPages</a></td><td>Boolean</td><td>否</td><td>是否启用插件功能页，默认关闭</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#subpackages">subPackages</a></td><td>Object Array</td><td>否</td><td>分包结构配置</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#workers">workers</a></td><td>String</td><td>否</td><td><code>Worker</code> 代码放置的目录</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#requiredbackgroundmodes">requiredBackgroundModes</a></td><td>Array</td><td>否</td><td>需要在后台使用的能力，如“音乐播放”</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#plugins">plugins</a></td><td>Object</td><td>否</td><td>使用到的插件</td></tr></tbody></table><blockquote><p>示例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"pages"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"pages/index/index"</span><span class="token punctuation">,</span> <span class="token string">"pages/logs/index"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"window"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"navigationBarTitleText"</span><span class="token operator">:</span> <span class="token string">"Demo"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"tabBar"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"list"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/index/index"</span><span class="token punctuation">,</span>        <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"首页"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"pagePath"</span><span class="token operator">:</span> <span class="token string">"pages/logs/logs"</span><span class="token punctuation">,</span>        <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"日志"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"networkTimeout"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"request"</span><span class="token operator">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>    <span class="token property">"downloadFile"</span><span class="token operator">:</span> <span class="token number">10000</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"debug"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre></blockquote><ul><li><p><strong>pages</strong></p><p>用于指定小程序由哪些页面组成，每一项都对应一个页面的 路径+文件名 信息。文件名不需要写文件后缀，框架会自动去寻找对于位置的 <code>.json</code>, <code>.js</code>, <code>.wxml</code>, <code>.wxss</code> 四个文件进行处理</p></li><li><p><strong>window</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th><th>最低版本</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor(十六进制颜色)</td><td>#000000</td><td>导航栏背景颜色，如 <code>#000000</code></td><td></td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色，仅支持 <code>black</code> / <code>white</code></td><td></td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td><td></td></tr><tr><td>navigationStyle</td><td>String</td><td>default</td><td>导航栏样式，仅支持以下值： <code>default</code> 默认样式 <code>custom</code> 自定义导航栏，只保留右上角胶囊按钮</td><td>微信版本 6.6.0</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td><td></td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 <code>dark</code> / <code>light</code></td><td></td></tr><tr><td>backgroundColorTop</td><td>String</td><td>#ffffff</td><td>顶部窗口的背景色，仅 iOS 支持</td><td>微信版本 6.5.16</td></tr><tr><td>backgroundColorBottom</td><td>String</td><td>#ffffff</td><td>底部窗口的背景色，仅 iOS 支持</td><td>微信版本 6.5.16</td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否全局开启下拉刷新。 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onpulldownrefresh">Page.onPullDownRefresh</a></td><td></td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位为 px。 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onreachbottom">Page.onReachButom</a></td><td></td></tr></tbody></table></li><li><p><strong>tabBar</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>color</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字默认颜色</td></tr><tr><td>selectedColor</td><td>HexColor</td><td>是</td><td></td><td>tab 上的文字选中时的颜色</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>是</td><td></td><td>tab 的背景色</td></tr><tr><td>borderStyle</td><td>String</td><td>否</td><td>black</td><td>tabbar 上边框的颜色， 仅支持 <code>black</code> / <code>white</code></td></tr><tr><td>list</td><td>Array</td><td>是</td><td></td><td>tab 的列表，详见 <code>list</code> 属性说明，最少 2 个、最多 5 个 tab</td></tr><tr><td>position</td><td>String</td><td>否</td><td>bottom</td><td>tabBar 的位置，仅支持 <code>bottom</code> / <code>top</code></td></tr></tbody></table><p>其中 List 接受一个数组 。只能配置（2-5）个 tab，tab 按数组的顺序排序，每个项都是一个对象，其属性值如下</p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>说明</th></tr></thead><tbody><tr><td>pagePath</td><td>String</td><td>是</td><td>页面路径，必须在 pages 中先定义</td></tr><tr><td>text</td><td>String</td><td>是</td><td>tab 上按钮文字</td></tr><tr><td>iconPath</td><td>String</td><td>否</td><td>图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，不支持网络图片。 <strong>当 postion 为 top 时，不显示 icon。</strong></td></tr><tr><td>selectedIconPath</td><td>String</td><td>否</td><td>选中时的图片路径，icon 大小限制为 40kb，建议尺寸为 81px * 81px，不支持网络图片。 <strong>当 postion 为 top 时，不显示 icon。</strong></td></tr></tbody></table></li><li><p><strong>networkTimeout</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>request</td><td>Number</td><td>否</td><td>60000</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network-request.html">wx.request</a> 的超时时间，单位毫秒。</td></tr><tr><td>connectSocket</td><td>Number</td><td>否</td><td>60000</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network-socket.html">wx.connectSocket</a> 的超时时间，单位毫秒。</td></tr><tr><td>uploadFile</td><td>Number</td><td>否</td><td>60000</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network-file.html#wxuploadfileobject">wx.uploadFile</a> 的超时时间，单位毫秒。</td></tr><tr><td>downloadFile</td><td>Number</td><td>否</td><td>60000</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network-file.html#wxdownloadfileobject">wx.downloadFile</a> 的超时时间，单位毫秒。</td></tr></tbody></table></li><li><p><strong>debug</strong></p><p>可以在开发者工具中开启 <code>debug</code> 模式，在开发者工具的控制台面板，调试信息以 <code>info</code> 的形式给出，其信息有 Page 的注册，页面路由，数据更新，事件触发等。可以帮助开发者快速定位一些常见的问题。</p></li><li><p><strong>functionalPages</strong> <em>基础库 2.1.0 开始支持，低版本需做兼容处理</em></p><p>启用<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/functional-pages.html">插件功能页</a>时，插件所有者小程序需要设置其 <code>functionalPages</code> 为 <code>true</code>。</p></li><li><p><strong>subPackages</strong> <em>微信客户端 6.6.0 ，基础库 1.7.3 及以上版本支持</em></p><p>启用<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/subpackages.html">分包加载</a>时，声明项目分包结构。</p></li><li><p><strong>workers</strong> <em>基础库 1.9.90 开始支持，低版本需做兼容处理</em></p><p>使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/workers.html">Worker</a> 处理多线程任务时，设置 <code>Worker</code> 代码放置的目录</p></li><li><p><strong>requiredBackgroundModes</strong> <em>微信客户端 6.7.2 及以上版本支持</em></p><p>申明需要后台运行的能力，类型为数组。目前暂只支持 audio：</p><p>如 <code>&quot;requiredBackgroundModes&quot;: [&quot;audio&quot;],</code></p></li><li><p><strong>plugins</strong> <em>基础库 1.9.6 开始支持，低版本需做兼容处理</em></p><p>声明小程序需要使用的<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/plugin/using.html">插件</a>。</p></li></ul><h3 id="1-2-page-json-配置参数"><a href="#1-2-page-json-配置参数" class="headerlink" title="1.2 page.json 配置参数"></a>1.2 page.json 配置参数</h3><p>每一个小程序页面也可以使用<code>.json</code>文件来对本页面的窗口表现进行配置。页面的配置只能设置 <code>app.json</code> 中部分 <code>window</code> 配置项的内容，页面中配置项会覆盖 <code>app.json</code> 的 <code>window</code> 中相同的配置项。</p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>navigationBarBackgroundColor</td><td>HexColor</td><td>#000000</td><td>导航栏背景颜色，如 <code>#000000</code></td></tr><tr><td>navigationBarTextStyle</td><td>String</td><td>white</td><td>导航栏标题颜色，仅支持 <code>black</code> / <code>white</code></td></tr><tr><td>navigationBarTitleText</td><td>String</td><td></td><td>导航栏标题文字内容</td></tr><tr><td>backgroundColor</td><td>HexColor</td><td>#ffffff</td><td>窗口的背景色</td></tr><tr><td>backgroundTextStyle</td><td>String</td><td>dark</td><td>下拉 loading 的样式，仅支持 <code>dark</code> / <code>light</code></td></tr><tr><td>enablePullDownRefresh</td><td>Boolean</td><td>false</td><td>是否全局开启下拉刷新。 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onpulldownrefresh">Page.onPullDownRefresh</a></td></tr><tr><td>onReachBottomDistance</td><td>Number</td><td>50</td><td>页面上拉触底事件触发时距页面底部距离，单位为 px。 详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onreachbottom">Page.onReachButom</a></td></tr><tr><td>disableScroll</td><td>Boolean</td><td>false</td><td>设置为 <code>true</code> 则页面整体不能上下滚动；只在页面配置中有效，无法在 <code>app.json</code> 中设置该项</td></tr></tbody></table><h1 id="2-视图层"><a href="#2-视图层" class="headerlink" title="2 视图层"></a>2 视图层</h1><ul><li><strong>WXML</strong>(WeiXin Markup language) 用于描述页面的结构。</li><li><strong>WXS</strong>(WeiXin Script) 是小程序的一套脚本语言，结合 <code>WXML</code>，可以构建出页面的结构。</li><li><strong>WXSS</strong>(WeiXin Style Sheet) 用于描述页面的样式。</li><li><strong>组件</strong>(Component)是视图的基本组成单元。</li></ul><h2 id="2-1-WXML"><a href="#2-1-WXML" class="headerlink" title="2.1 WXML"></a>2.1 WXML</h2><ul><li><p>数据绑定</p><ul><li><p>简单绑定</p><ul><li>内容 ：<code>&lt;view&gt; &#123;&#123; message &#125;&#125; &lt;/view&gt;</code></li><li>组件属性：<code>&lt;view id=&quot;item-&#123;&#123;id&#125;&#125;&quot;&gt; &lt;/view&gt;</code></li><li>控制属性：<code>&lt;view wx:if=&quot;&#123;&#123;condition&#125;&#125;&quot;&gt; &lt;/view&gt;</code></li><li>关键字：<code>&lt;checkbox checked=&quot;&#123;&#123;false&#125;&#125;&quot;&gt; &lt;/checkbox&gt;</code></li></ul></li><li><p>运算</p><ul><li>三元运算：<code>&lt;view hidden=&quot;&#123; &#123;flag ? true : false&#125; &#125;&quot;&gt; Hidden &lt;/view&gt;</code></li><li>算术运算：<code>&lt;view&gt; &#123;&#123;a + b&#125;&#125; + &#123;&#123;c&#125;&#125; + d &lt;/view&gt;</code></li><li>逻辑判断：<code>&lt;view wx:if=&quot;&#123;&#123;length > 5&#125;&#125;&quot;&gt; &lt;/view&gt;</code></li><li>字符串运算：<code>&lt;view&gt;&#123;&#123;"hello" + name&#125;&#125;&lt;/view&gt;</code></li><li>数据路径运算：<code>&lt;view&gt;&#123;&#123;object.key&#125;&#125; &#123;&#123;array[0]&#125;&#125;&lt;/view&gt;</code></li></ul></li><li><p>组合</p><ul><li><p>数组：<code>&lt;view wx:for=&quot;&#123;&#123;[id, 1, 2, 3, 4]&#125;&#125;&quot;&gt; &#123;&#123;item&#125;&#125; &lt;/view&gt;</code></p></li><li><p>对象：<code>&lt;template is=&quot;objectCombine&quot; data=&quot;&#123; &#123;for: object.key, bar: array[0]&#125; &#125;&quot;&gt;&lt;/template&gt;</code></p><pre><code>或`...`将 对象展开 `&lt;template is=&quot;objectCombine&quot; data=&quot;&#123;&#123;...obj1, ...obj2, e: 5&#125;&#125;&quot;&gt;&lt;/template&gt;`</code></pre></li></ul></li></ul><blockquote><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">"Hello MINA!"</span><span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"MINA"</span><span class="token punctuation">,</span>    id<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    condition<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    object<span class="token punctuation">:</span> <span class="token punctuation">{</span>      key<span class="token punctuation">:</span> <span class="token string">"Hello "</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"MINA"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    obj1<span class="token punctuation">:</span> <span class="token punctuation">{</span>      a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    obj2<span class="token punctuation">:</span> <span class="token punctuation">{</span>      c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      d<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>列表渲染</p><ul><li><p><code>wx:for</code> / <code>block wx:for</code></p><blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{array}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{index}}: {{item.message}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--默认数组的当前项的下标变量名默认为 index，数组当前项的变量名默认为 item--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{array}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>idx<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>itemName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{idx}}: {{itemName.message}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--wx:for-item 可以指定数组当前元素的变量名，wx:for-index 可以指定数组当前下标的变量名：--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3, 4, 5, 6, 7, 8, 9]}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>for-item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>j<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{i &lt;<span class="token punctuation">=</span> j}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      {{i}} * {{j}} = {{i * j}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--wx:for 也可以嵌套，下边是一个九九乘法表--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3]}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> {{index}}: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> {{item}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--将 wx:for 用在&lt;block/>标签上，以渲染一个包含多节点的结构块--></span></code></pre></blockquote></li><li><p><code>wx:key</code></p><p>如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <code>&lt;input/&gt;</code> 中的输入内容，<code>&lt;switch/&gt;</code> 的选中状态），需要使用 <code>wx:key</code> 来指定列表中项目的唯一的标识符。 <strong>如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略</strong></p><p><code>wx:key</code> 的值以两种形式提供</p><ol><li>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。</li><li>保留关键字 <code>*this</code> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字</li></ol><blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>switch</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{objectArray}}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">wx:</span>key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>unique<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  {{item.id}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>switch</span><span class="token punctuation">></span></span></code></pre></blockquote><p>见 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/list.html">详情</a></p></li></ul></li><li><p>条件渲染</p><ul><li><p><code>wx:if</code> / <code>block wx:if</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{length <span class="token punctuation">></span> 5}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>elif</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{length <span class="token punctuation">></span> 2}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name"><span class="token namespace">wx:</span>else</span><span class="token punctuation">></span></span> 3 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{true}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> view1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> view2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>模板</p><ul><li><p>定义模板</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msgItem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span> {{index}}: {{msg}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span> Time: {{time}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>odd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> odd <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>even<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> even <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用模板</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msgItem<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{...item}}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>block</span> <span class="token attr-name"><span class="token namespace">wx:</span>for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{[1, 2, 3, 4, 5]}}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{item % 2 <span class="token punctuation">=</span><span class="token punctuation">=</span> 0 ? <span class="token punctuation">'</span>even<span class="token punctuation">'</span> : <span class="token punctuation">'</span>odd<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>block</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      item<span class="token punctuation">:</span> <span class="token punctuation">{</span>        index<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        msg<span class="token punctuation">:</span> <span class="token string">"this is a template"</span><span class="token punctuation">,</span>        time<span class="token punctuation">:</span> <span class="token string">"2016-09-15"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>事件</p><ul><li><p>使用示例</p><blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tapTest<span class="token punctuation">"</span></span> <span class="token attr-name">data-hi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WeChat<span class="token punctuation">"</span></span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tapName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Click me! <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  tapName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>事件类型</p><ul><li><p>常见冒泡事件：</p><table><thead><tr><th>类型</th><th>触发条件</th><th>最低版本</th></tr></thead><tbody><tr><td>touchstart</td><td>手指触摸动作开始</td><td></td></tr><tr><td>touchmove</td><td>手指触摸后移动</td><td></td></tr><tr><td>touchcancel</td><td>手指触摸动作被打断，如来电提醒，弹窗</td><td></td></tr><tr><td>touchend</td><td>手指触摸动作结束</td><td></td></tr><tr><td>tap</td><td>手指触摸后马上离开</td><td></td></tr><tr><td>longpress</td><td>手指触摸后，超过 350ms 再离开，如果指定了事件回调函数并触发了这个事件，tap 事件将不被触发</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>longtap</td><td>手指触摸后，超过 350ms 再离开（推荐使用 longpress 事件代替）</td><td></td></tr><tr><td>transitionend</td><td>会在 WXSS transition 或 wx.createAnimation 动画结束后触发</td><td></td></tr><tr><td>animationstart</td><td>会在一个 WXSS animation 动画开始时触发</td><td></td></tr><tr><td>animationiteration</td><td>会在一个 WXSS animation 一次迭代结束时触发</td><td></td></tr><tr><td>animationend</td><td>会在一个 WXSS animation 动画完成时触发</td><td></td></tr><tr><td>touchforcechange</td><td>在支持 3D Touch 的 iPhone 设备，重按时会触发</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr></tbody></table></li><li><p>除上表之外的其他组件自定义事件如无特殊声明都是非冒泡事件，<em>如<code>&lt;form/&gt;</code>的 submit 事件，<code>&lt;input/&gt;</code>的 input 事件，<code>&lt;scroll-view/&gt;</code>的 scroll 事件</em></p></li></ul></li><li><p>事件绑定和冒泡 &amp; 捕获</p><ul><li>key ：冒泡事件和捕获事件不同。<em>在非<a href="https://developers.weixin.qq.com/miniprogram/dev/component/native-component.html">原生组件</a>中，<code>bind</code>和<code>catch</code>后可以紧跟一个冒号，其含义不变，如<code>bind:tap</code>、<code>catch:touchstart</code></em><ul><li><strong>冒泡</strong> ：以<code>bind</code>或<code>catch</code>开头，然后跟上事件的类型，如<code>bindtap</code>、<code>catchtouchstart</code></li><li><strong>捕获</strong> ：采用<code>capture-bind:type</code>、<code>capture-catch:type</code>关键字。（<code>capture-catch</code>会中断捕获阶段和取消冒泡阶段）</li></ul></li><li>value： 是一个字符串，需要在对应的 Page 中定义同名的函数。不然当触发事件的时候会报错。</li></ul></li><li><p>事件对象</p><ul><li><p>BaseEvent 基础事件对象属性列表</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#type">type</a></td><td>String</td><td>事件类型</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#timestamp">timeStamp</a></td><td>Integer</td><td>事件生成时的时间戳</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#target">target</a></td><td>Object</td><td>触发事件的源组件，object 是其一些属性值集合</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#currenttarget">currentTarget</a></td><td>Object</td><td>当前组件，object 是其一些属性值集合<em>特殊： <code>&lt;canvas/&gt;</code> 中的触摸事件不可冒泡，所以没有 currentTarget。</em></td></tr></tbody></table></li><li><p>CustomEvent 自定义事件对象属性列表（继承 BaseEvent）</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#detail">detail</a></td><td>Object</td><td>自定义事件所携带的数据，如表单组件的提交事件会携带用户的输入，媒体的错误事件会携带错误信息</td></tr></tbody></table></li><li><p>TouchEvent 触摸事件对象属性列表（继承 BaseEvent）</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#touches">touches</a></td><td>Array</td><td>触摸事件，当前停留在屏幕中的触摸点信息的数组</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html#changedtouches">changedTouches</a></td><td>Array</td><td>触摸事件，当前变化的触摸点信息的数组。表示有变化的触摸点，如从无变有（touchstart），位置变化（touchmove），从有变无（touchend、touchcancel）</td></tr></tbody></table></li></ul></li></ul></li><li><p>引用</p><ul><li><p>import</p><blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- item.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>text</span><span class="token punctuation">></span></span>{{text}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>text</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item.wxml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">is</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">data</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{{text: <span class="token punctuation">'</span>forbar<span class="token punctuation">'</span>}}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>import 有作用域的概念，只会 import 目标文件中定义的 template，而不会 import 目标文件 import 的 template。</p></blockquote></li><li><p>include</p><blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- index.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>header.wxml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> body <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer.wxml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- header.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> header <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- header.wxml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> header <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><p><code>include</code> 可将目标文件除了 <code>&lt;template/&gt;</code> <code>&lt;wxs/&gt;</code> 外的整个代码引入，相当于是拷贝到 <code>include</code> 位置</p></blockquote></li></ul></li></ul><h2 id="2-2-WXS"><a href="#2-2-WXS" class="headerlink" title="2.2 WXS"></a>2.2 WXS</h2><ol><li>wxs 与 javascript 是不同的语言，有自己的语法，并不和 javascript 一致。</li><li>wxs 的运行环境和其他 javascript 代码是隔离的，wxs 中不能调用其他 javascript 文件中定义的函数，也不能调用小程序提供的 API</li><li>wxs 函数不能作为组件的事件回调</li></ol><ul><li><p>模块 ：</p><blockquote><p>示例：WXS 代码可以编写在 wxml 文件中的 <code>&lt;wxs&gt;</code> 标签内，或以 <code>.wxs</code> 为后缀名的文件内</p><p>每一个 <code>.wxs</code> 文件和 <code>&lt;wxs&gt;</code> 标签都是一个单独的模块。每个模块都有自己独立的作用域。即在一个模块里面定义的变量与函数，默认为私有的，对其他模块不可见。</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--wxml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wxs</span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>m1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--&lt;wxs>标签 :module属性唯一且必填，--></span>  var msg = "hello world"; module.exports.message = msg;  //一个模块要想对外暴露其内部的私有变量与函数，只能通过 module.exports  实现。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>wxs</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> {{m1.message}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wxs</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./../tools.wxs<span class="token punctuation">"</span></span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tools<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--src属性 只能引用 .wxs 文件模块，且必须使用相对路径--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> {{tools.msg}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span><span class="token punctuation">></span></span> {{tools.bar(tools.FOO)}} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>wxs</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./../logic.wxs<span class="token punctuation">"</span></span> <span class="token attr-name">module</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// /pages/tools.wxs</span><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">"'hello world' from tools.wxs"</span><span class="token punctuation">;</span><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  FOO<span class="token punctuation">:</span> foo<span class="token punctuation">,</span>  bar<span class="token punctuation">:</span> bar<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"some msg"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//每个 wxs 模块均有一个内置的 module 对象。</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//logic.wxs</span><span class="token keyword">var</span> tools <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./tools.wxs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tools<span class="token punctuation">.</span>FOO<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tools<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token string">"logic.wxs"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tools<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>变量 ：</p><p>var 表现与 javascript 一致，会有变量提升，没有声明的变量直接赋值使用，会被定义为全局变量。</p><p>保留标识符 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/02variate.html">见官方文档</a></p></li><li><p>注释 ：同 js <code>//</code> <code>/* */</code></p></li><li><p>运算符 ：</p><p>运算符优先级 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/04operator.html">见官方文档</a></p><ul><li>基本 加减乘除取余，</li><li>一元运算符<ul><li>a++ ,++a</li><li>a–, –a</li><li>~a （否运算</li><li>!a（取反</li><li>delete a.attr1 （delete 运算</li><li>void a （void 运算</li><li>typeof a （typeof 运算</li></ul></li><li>位运算符 <a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxs/04operator.html">见官方文档</a></li><li>比较运算符</li><li>等值运算符</li><li>赋值</li><li>二元逻辑运算符 &amp;&amp; ||</li><li>条件三元运算符 (a &gt;= 10 ? a + 10 : b + 10)</li><li>逗号运算符 顺序执行两个表达式 (a, b)</li></ul></li><li><p>语句 ：</p><ul><li><code>if()&#123;&#125;else if()&#123;&#125; eles&#123;&#125;</code></li><li><code>switch()&#123;case x1:break;case x2:break;default:&#125;</code></li><li><code>for(;;)&#123;&#125;</code></li><li><code>while()&#123;&#125;</code> / <code>do&#123;&#125;while()</code></li></ul></li><li><p>数据类型 ：</p><ul><li><code>number</code> ： 数值</li><li><code>string</code> ：字符串</li><li><code>boolean</code>：布尔值</li><li><code>object</code>：对象</li><li><code>function</code>：函数</li><li><code>array</code> : 数组</li><li><code>date</code>：日期</li><li><code>regexp</code>：正则</li></ul></li><li><p>基础类库 ：</p><ul><li><code>console</code></li><li><code>Math</code></li><li><code>Json</code></li><li><code>Number</code></li><li><code>Date</code></li><li><code>Global</code></li></ul></li></ul><h2 id="2-3-WXSS"><a href="#2-3-WXSS" class="headerlink" title="2.3 WXSS"></a>2.3 WXSS</h2><ul><li>尺寸单位 rpx</li><li>样式导入 <code>@import &quot;xx.wxss&quot;</code></li><li>内联样式 <code>&lt;view style=&quot;color:&#123;&#123;color&#125;&#125;;&quot; /&gt;</code> / <code>&lt;view class=&quot;xxclass&quot; /&gt;</code></li></ul><h2 id="2-4-基础组件"><a href="#2-4-基础组件" class="headerlink" title="2.4 基础组件"></a>2.4 基础组件</h2><blockquote><p>通用属性：</p><table><thead><tr><th>属性名</th><th>类型</th><th>描述</th><th>注解</th></tr></thead><tbody><tr><td>id</td><td>String</td><td>组件的唯一标示</td><td>保持整个页面唯一</td></tr><tr><td>class</td><td>String</td><td>组件的样式类</td><td>在对应的 WXSS 中定义的样式类</td></tr><tr><td>style</td><td>String</td><td>组件的内联样式</td><td>可以动态设置的内联样式</td></tr><tr><td>hidden</td><td>Boolean</td><td>组件是否显示</td><td>所有组件默认显示</td></tr><tr><td>data-*</td><td>Any</td><td>自定义属性</td><td>组件上触发的事件时，会发送给事件处理函数</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>bind* / catch*</td><td>EventHandler</td><td>组件的事件</td><td>详见<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件</a></td></tr></tbody></table></blockquote><ul><li><p>视图容器</p><ul><li><strong>view</strong> 视图容器</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>hover-class</td><td>String</td><td>none</td><td>指定按下去的样式类。当 <code>hover-class=&quot;none&quot;</code> 时，没有点击态效果</td><td></td></tr><tr><td>hover-stop-propagation</td><td>Boolean</td><td>false</td><td>指定是否阻止本节点的祖先节点出现点击态</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>hover-start-time</td><td>Number</td><td>50</td><td>按住后多久出现点击态，单位毫秒</td><td></td></tr><tr><td>hover-stay-time</td><td>Number</td><td>400</td><td>手指松开后点击态保留时间，单位毫秒</td><td></td></tr></tbody></table></blockquote><ul><li><strong>scroll-view</strong> 可滚动视图区域</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>scroll-x</td><td>Boolean</td><td>false</td><td>允许横向滚动</td></tr><tr><td>scroll-y</td><td>Boolean</td><td>false</td><td>允许纵向滚动</td></tr><tr><td>upper-threshold</td><td>Number</td><td>50</td><td>距顶部/左边多远时（单位 px），触发 scrolltoupper 事件</td></tr><tr><td>lower-threshold</td><td>Number</td><td>50</td><td>距底部/右边多远时（单位 px），触发 scrolltolower 事件</td></tr><tr><td>scroll-top</td><td>Number</td><td></td><td>设置竖向滚动条位置</td></tr><tr><td>scroll-left</td><td>Number</td><td></td><td>设置横向滚动条位置</td></tr><tr><td>scroll-into-view</td><td>String</td><td></td><td>值应为某子元素 id（id 不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素</td></tr><tr><td>scroll-with-animation</td><td>Boolean</td><td>false</td><td>在设置滚动条位置时使用动画过渡</td></tr><tr><td>enable-back-to-top</td><td>Boolean</td><td>false</td><td>iOS 点击顶部状态栏、安卓双击标题栏时，滚动条返回顶部，只支持竖向</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>bindscrolltoupper</td><td>EventHandle</td><td></td><td>滚动到顶部/左边，会触发 scrolltoupper 事件</td></tr><tr><td>bindscrolltolower</td><td>EventHandle</td><td></td><td>滚动到底部/右边，会触发 scrolltolower 事件</td></tr><tr><td>bindscroll</td><td>EventHandle</td><td></td><td>滚动时触发，event.detail = {scrollLeft, scrollTop, scrollHeight, scrollWidth, deltaX, deltaY}</td></tr></tbody></table></blockquote><ul><li><strong>swiper</strong> 滑块视图容</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>indicator-dots</td><td>Boolean</td><td>false</td><td>是否显示面板指示点</td><td></td></tr><tr><td>indicator-color</td><td>Color</td><td>rgba(0, 0, 0, .3)</td><td>指示点颜色</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td>indicator-active-color</td><td>Color</td><td>#000000</td><td>当前选中的指示点颜色</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td>autoplay</td><td>Boolean</td><td>false</td><td>是否自动切换</td><td></td></tr><tr><td>current</td><td>Number</td><td>0</td><td>当前所在滑块的 index</td><td></td></tr><tr><td>current-item-id</td><td>String</td><td>“”</td><td>当前所在滑块的 item-id ，不能与 current 被同时指定</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>interval</td><td>Number</td><td>5000</td><td>自动切换时间间隔</td><td></td></tr><tr><td>duration</td><td>Number</td><td>500</td><td>滑动动画时长</td><td></td></tr><tr><td>circular</td><td>Boolean</td><td>false</td><td>是否采用衔接滑动</td><td></td></tr><tr><td>vertical</td><td>Boolean</td><td>false</td><td>滑动方向是否为纵向</td><td></td></tr><tr><td>previous-margin</td><td>String</td><td>“0px”</td><td>前边距，可用于露出前一项的一小部分，接受 px 和 rpx 值</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>next-margin</td><td>String</td><td>“0px”</td><td>后边距，可用于露出后一项的一小部分，接受 px 和 rpx 值</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>display-multiple-items</td><td>Number</td><td>1</td><td>同时显示的滑块数量</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>skip-hidden-item-layout</td><td>Boolean</td><td>false</td><td>是否跳过未显示的滑块布局，设为 true 可优化复杂情况下的滑动性能，但会丢失隐藏状态滑块的布局信息</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>bindchange</td><td>EventHandle</td><td></td><td>current 改变时会触发 change 事件，event.detail = {current: current, source: source}</td><td></td></tr><tr><td>bindanimationfinish</td><td>EventHandle</td><td></td><td>动画结束时会触发 animationfinish 事件，event.detail 同上</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr></tbody></table></blockquote><ul><li><strong>movable-area&gt;movable-view</strong> 可移动的视图容器，在页面中可以拖拽滑动</li></ul><blockquote><table><thead><tr><th>movable-view 的属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>direction</td><td>String</td><td>none</td><td>movable-view 的移动方向，属性值有 all、vertical、horizontal、none</td><td></td></tr><tr><td>inertia</td><td>Boolean</td><td>false</td><td>movable-view 是否带有惯性</td><td></td></tr><tr><td>out-of-bounds</td><td>Boolean</td><td>false</td><td>超过可移动区域后，movable-view 是否还可以移动</td><td></td></tr><tr><td>x</td><td>Number / String</td><td></td><td>定义 x 轴方向的偏移，如果 x 的值不在可移动范围内，会自动移动到可移动范围；改变 x 的值会触发动画</td><td></td></tr><tr><td>y</td><td>Number / String</td><td></td><td>定义 y 轴方向的偏移，如果 y 的值不在可移动范围内，会自动移动到可移动范围；改变 y 的值会触发动画</td><td></td></tr><tr><td>damping</td><td>Number</td><td>20</td><td>阻尼系数，用于控制 x 或 y 改变时的动画和过界回弹的动画，值越大移动越快</td><td></td></tr><tr><td>friction</td><td>Number</td><td>2</td><td>摩擦系数，用于控制惯性滑动的动画，值越大摩擦力越大，滑动越快停止；必须大于 0，否则会被设置成默认值</td><td></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>scale</td><td>Boolean</td><td>false</td><td>是否支持双指缩放，默认缩放手势生效区域是在 movable-view 内,在<code>movable-view</code>中添加<code>scale-area</code>属性可将手势生效区域修改为整个<code>movable-view</code></td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>scale-min</td><td>Number</td><td>0.5</td><td>定义缩放倍数最小值</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>scale-max</td><td>Number</td><td>10</td><td>定义缩放倍数最大值</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>scale-value</td><td>Number</td><td>1</td><td>定义缩放倍数，取值范围为 0.5 - 10</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>animation</td><td>Boolean</td><td>true</td><td>是否使用动画</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>bindchange</td><td>EventHandle</td><td></td><td>拖动过程中触发的事件，event.detail = {x: x, y: y, source: source}，其中 source 表示产生移动的原因，值可为 touch（拖动）、touch-out-of-bounds（超出移动范围）、out-of-bounds（超出移动范围后的回弹）、friction（惯性）和空字符串（setData）</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>bindscale</td><td>EventHandle</td><td></td><td>缩放过程中触发的事件，event.detail = {x: x, y: y, scale: scale}，其中 x 和 y 字段在<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a>之后开始支持返回</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>htouchmove</td><td>EventHandle</td><td></td><td>初次手指触摸后移动为横向的移动，如果 catch 此事件，则意味着 touchmove 事件也被 catch</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>vtouchmove</td><td>EventHandle</td><td></td><td>初次手指触摸后移动为纵向的移动，如果 catch 此事件，则意味着 touchmove 事件也被 catch</td><td></td></tr></tbody></table></blockquote><ul><li><strong>cover-view&gt;cover-view + cover-image</strong> 覆盖在原生组件之上的文本视图 <em>只支持嵌套<code>cover-view</code>、<code>cover-image</code>，可在<code>cover-view</code>中使用<code>button</code></em></li></ul><blockquote><table><thead><tr><th>cover-image 的属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图标路径，支持临时路径、网络地址（1.6.0 起支持）、云文件 ID（2.2.3 起支持）。暂不支持 base64 格式。</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>bindload</td><td>EventHandle</td><td></td><td>图片加载成功时触发 事件</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr><tr><td>binderror</td><td>EventHandle</td><td></td><td>图片加载失败时触发 事件</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>cover-view 属性名:</td><td></td><td></td><td></td><td></td></tr><tr><td>scroll-top</td><td>Number</td><td></td><td>设置顶部滚动偏移量，仅在设置了 overflow-y: scroll 成为滚动元素后生效</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.1.0</a></td></tr></tbody></table></blockquote></li><li><p>基础内容</p><ul><li><strong>icon</strong> 图标</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>String</td><td></td><td>icon 的类型，有效值：success, success_no_circle, info, warn, waiting, cancel, download, search, clear</td></tr><tr><td>size</td><td>Number</td><td>23</td><td>icon 的大小，单位 px</td></tr><tr><td>color</td><td>Color</td><td></td><td>icon 的颜色，同 css 的 color</td></tr></tbody></table></blockquote><ul><li><strong>text</strong> 文本</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>selectable</td><td>Boolean</td><td>false</td><td>文本是否可选</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td>space</td><td>String</td><td>false</td><td>显示连续空格 有效值：<a href="%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E7%A9%BA%E6%A0%BC%E4%B8%80%E5%8D%8A%E5%A4%A7%E5%B0%8F">ensp</a>，<a href="%E4%B8%AD%E6%96%87%E5%AD%97%E7%AC%A6%E7%A9%BA%E6%A0%BC%E5%A4%A7%E5%B0%8F">emsp</a>，<a href="%E6%A0%B9%E6%8D%AE%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE%E7%9A%84%E7%A9%BA%E6%A0%BC%E5%A4%A7%E5%B0%8F">nbsp</a></td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.4.0</a></td></tr><tr><td>decode</td><td>Boolean</td><td>false</td><td>是否解码</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.4.0</a></td></tr></tbody></table></blockquote><ul><li><strong>rich-text</strong> 富文本 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/rich-text.html">https://developers.weixin.qq.com/miniprogram/dev/component/rich-text.html</a></li><li><strong>progress</strong> 进度条</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>percent</td><td>Float</td><td>无</td><td>百分比 0~100</td><td></td></tr><tr><td>show-info</td><td>Boolean</td><td>false</td><td>在进度条右侧显示百分比</td><td></td></tr><tr><td>stroke-width</td><td>Number</td><td>6</td><td>进度条线的宽度，单位 px</td><td></td></tr><tr><td>color</td><td>Color</td><td>#09BB07</td><td>进度条颜色 （请使用 activeColor）</td><td></td></tr><tr><td>activeColor</td><td>Color</td><td></td><td>已选择的进度条的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>Color</td><td></td><td>未选择的进度条的颜色</td><td></td></tr><tr><td>active</td><td>Boolean</td><td>false</td><td>进度条从左往右的动画</td><td></td></tr><tr><td>active-mode</td><td>String</td><td>backwards</td><td>backwards: 动画从头播；forwards：动画从上次结束点接着播</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.7.0</a></td></tr></tbody></table></blockquote></li><li><p>表单 Form</p><ul><li><strong>button</strong></li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>生效时机</th><th>最低版本</th></tr></thead><tbody><tr><td>size</td><td>String</td><td>default</td><td>按钮的大小</td><td></td><td></td></tr><tr><td>type</td><td>String</td><td>default</td><td>按钮的样式类型</td><td></td><td></td></tr><tr><td>plain</td><td>Boolean</td><td>false</td><td>按钮是否镂空，背景色透明</td><td></td><td></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td></td><td></td></tr><tr><td>loading</td><td>Boolean</td><td>false</td><td>名称前是否带 loading 图标</td><td></td><td></td></tr><tr><td>form-type</td><td>String</td><td></td><td>用于 <code>&lt;form/&gt;</code> 组件，点击分别会触发 <code>&lt;form/&gt;</code> 组件的 submit/reset 事件</td><td></td><td></td></tr><tr><td>open-type</td><td>String</td><td></td><td>微信开放能力</td><td></td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td>hover-class</td><td>String</td><td>button-hover</td><td>指定按钮按下去的样式类。当 <code>hover-class=&quot;none&quot;</code> 时，没有点击态效果</td><td></td><td></td></tr><tr><td>hover-stop-propagation</td><td>Boolean</td><td>false</td><td>指定是否阻止本节点的祖先节点出现点击态</td><td></td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>hover-start-time</td><td>Number</td><td>20</td><td>按住后多久出现点击态，单位毫秒</td><td></td><td></td></tr><tr><td>hover-stay-time</td><td>Number</td><td>70</td><td>手指松开后点击态保留时间，单位毫秒</td><td></td><td></td></tr><tr><td>lang</td><td>String</td><td>en</td><td>指定返回用户信息的语言，zh_CN 简体中文，zh_TW 繁体中文，en 英文。</td><td>open-type=”getUserInfo”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.3.0</a></td></tr><tr><td>bindgetuserinfo</td><td>Handler</td><td></td><td>用户点击该按钮时，会返回获取到的用户信息，回调的 detail 数据与<a href="https://developers.weixin.qq.com/miniprogram/dev/api/open.html#wxgetuserinfoobject">wx.getUserInfo</a>返回的一致</td><td>open-type=”getUserInfo”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.3.0</a></td></tr><tr><td>session-from</td><td>String</td><td></td><td>会话来源</td><td>open-type=”contact”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.4.0</a></td></tr><tr><td>send-message-title</td><td>String</td><td>当前标题</td><td>会话内消息卡片标题</td><td>open-type=”contact”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>send-message-path</td><td>String</td><td>当前分享路径</td><td>会话内消息卡片点击跳转小程序路径</td><td>open-type=”contact”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>send-message-img</td><td>String</td><td>截图</td><td>会话内消息卡片图片</td><td>open-type=”contact”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>show-message-card</td><td>Boolean</td><td>false</td><td>显示会话内消息卡片</td><td>open-type=”contact”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>bindcontact</td><td>Handler</td><td></td><td>客服消息回调</td><td>open-type=”contact”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>bindgetphonenumber</td><td>Handler</td><td></td><td>获取用户手机号回调</td><td>open-type=”getPhoneNumber”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.0</a></td></tr><tr><td>app-parameter</td><td>String</td><td></td><td>打开 APP 时，向 APP 传递的参数</td><td>open-type=”launchApp”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.5</a></td></tr><tr><td>binderror</td><td>Handler</td><td></td><td>当使用开放能力时，发生错误的回调</td><td>open-type=”launchApp”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.5</a></td></tr><tr><td>bindopensetting</td><td>Handler</td><td></td><td>在打开授权设置页后回调</td><td>open-type=”openSetting”</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr></tbody></table></blockquote><ul><li><strong>form</strong></li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>report-submit</td><td>Boolean</td><td>是否返回 formId 用于发送<a href="https://developers.weixin.qq.com/miniprogram/dev/api/notice.html">模板消息</a></td><td></td></tr><tr><td>bindsubmit</td><td>EventHandle</td><td>携带 form 中的数据触发 submit 事件，event.detail = {value : {‘name’: ‘value’} , formId: ‘’}</td><td></td></tr><tr><td>bindreset</td><td>EventHandle</td><td>表单重置时会触发 reset 事件</td><td></td></tr></tbody></table></blockquote><ul><li><strong>label</strong></li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>for</td><td>String</td><td>绑定控件的 id <em>目前可以绑定的控件有：<code>&lt;button/&gt;</code>, <code>&lt;checkbox/&gt;</code>, <code>&lt;radio/&gt;</code>, <code>&lt;switch/&gt;</code></em></td></tr></tbody></table></blockquote><ul><li><strong>input</strong> <em>(原生组件)</em></li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>value</td><td>String</td><td></td><td>输入框的初始内容</td><td></td></tr><tr><td>type</td><td>String</td><td>“text”</td><td>input 的类型</td><td></td></tr><tr><td>password</td><td>Boolean</td><td>false</td><td>是否是密码类型</td><td></td></tr><tr><td>placeholder</td><td>String</td><td></td><td>输入框为空时占位符</td><td></td></tr><tr><td>placeholder-style</td><td>String</td><td></td><td>指定 placeholder 的样式</td><td></td></tr><tr><td>placeholder-class</td><td>String</td><td>“input-placeholder”</td><td>指定 placeholder 的样式类</td><td></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td></td></tr><tr><td>maxlength</td><td>Number</td><td>140</td><td>最大输入长度，设置为 -1 的时候不限制最大长度</td><td></td></tr><tr><td>cursor-spacing</td><td>Number</td><td>0</td><td>指定光标与键盘的距离，单位 px 。取 input 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离</td><td></td></tr><tr><td>auto-focus</td><td>Boolean</td><td>false</td><td>(即将废弃，请直接使用 focus )自动聚焦，拉起键盘</td><td></td></tr><tr><td>focus</td><td>Boolean</td><td>false</td><td>获取焦点</td><td></td></tr><tr><td>confirm-type</td><td>String</td><td>“done”</td><td>设置键盘右下角按钮的文字，仅在 type=’text’时生效</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td>confirm-hold</td><td>Boolean</td><td>false</td><td>点击键盘右下角按钮时是否保持键盘不收起</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td>cursor</td><td>Number</td><td></td><td>指定 focus 时的光标位置</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>selection-start</td><td>Number</td><td>-1</td><td>光标起始位置，自动聚集时有效，需与 selection-end 搭配使用</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>selection-end</td><td>Number</td><td>-1</td><td>光标结束位置，自动聚集时有效，需与 selection-start 搭配使用</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>adjust-position</td><td>Boolean</td><td>true</td><td>键盘弹起时，是否自动上推页面</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>bindinput</td><td>EventHandle</td><td></td><td>键盘输入时触发，event.detail = {value, cursor, keyCode}，keyCode 为键值，2.1.0 起支持，处理函数可以直接 return 一个字符串，将替换输入框的内容。</td><td></td></tr><tr><td>bindfocus</td><td>EventHandle</td><td></td><td>输入框聚焦时触发，event.detail = { value, height }，height 为键盘高度，在基础库 1.9.90 起支持</td><td></td></tr><tr><td>bindblur</td><td>EventHandle</td><td></td><td>输入框失去焦点时触发，event.detail = {value: value}</td><td></td></tr><tr><td>bindconfirm</td><td>EventHandle</td><td></td><td>点击完成按钮时触发，event.detail = {value: value}</td><td></td></tr></tbody></table></blockquote><ul><li><strong>checkbox-group</strong></li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>bindchange</td><td>EventHandle</td><td></td><td><code>&lt;checkbox-group/&gt;</code>中选中项发生改变是触发 change 事件，detail = {value:[选中的 checkbox 的 value 的数组]}</td></tr></tbody></table></blockquote><ul><li><strong>checkbox</strong></li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>String</td><td></td><td><code>&lt;checkbox/&gt;</code>标识，选中时触发<code>&lt;checkbox-group/&gt;</code>的 change 事件，并携带 <code>&lt;checkbox/&gt;</code> 的 value</td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td></tr><tr><td>checked</td><td>Boolean</td><td>false</td><td>当前是否选中，可用来设置默认选中</td></tr><tr><td>color</td><td>Color</td><td></td><td>checkbox 的颜色，同 css 的 color</td></tr></tbody></table></blockquote><ul><li><strong>radio-group&gt;radio</strong></li></ul><blockquote><table><thead><tr><th>radio-group 属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>bindchange</td><td>EventHandle</td><td></td><td><code>&lt;radio-group/&gt;</code> 中的选中项发生变化时触发 change 事件，event.detail = {value: 选中项 radio 的 value}</td></tr></tbody></table><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>String</td><td></td><td><code>&lt;radio/&gt;</code> 标识。当该<code>&lt;radio/&gt;</code> 选中时，<code>&lt;radio-group/&gt;</code> 的 change 事件会携带<code>&lt;radio/&gt;</code>的 value</td></tr><tr><td>checked</td><td>Boolean</td><td>false</td><td>当前是否选中</td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td></tr><tr><td>color</td><td>Color</td><td></td><td>radio 的颜色，同 css 的 color</td></tr></tbody></table></blockquote><ul><li><strong>picker</strong> 从底部弹起的滚动选择器 现支持 5 种选择器<code>mode=&quot;&quot;</code>：普通选择器(默认<code>selector</code>)，多列选择器(<code>multiSelector</code>)，时间选择器(<code>time</code>)，日期选择器(<code>date</code>)，省市区选择器(<code>region</code>)</li></ul><blockquote><p>普通：</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>range</td><td>Array / Object Array</td><td>[]</td><td>mode 为 selector 或 multiSelector 时，range 有效</td><td></td></tr><tr><td>range-key</td><td>String</td><td></td><td>当 range 是一个 Object Array 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容</td><td></td></tr><tr><td>value</td><td>Number</td><td>0</td><td>value 的值表示选择了 range 中的第几个（下标从 0 开始）</td><td></td></tr><tr><td>bindchange</td><td>EventHandle</td><td></td><td>value 改变时触发 change 事件，event.detail = {value: value}</td><td></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td></td></tr><tr><td>bindcancel</td><td>EventHandle</td><td></td><td>取消选择或点遮罩层收起 picker 时触发</td><td></td></tr></tbody></table></blockquote><blockquote><p>多列</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>range</td><td>二维 Array / 二维 Object Array</td><td>[]</td><td>mode 为 selector 或 multiSelector 时，range 有效。二维数组，长度表示多少列，数组的每项表示每列的数据，如<code>[[&quot;a&quot;,&quot;b&quot;], [&quot;c&quot;,&quot;d&quot;]]</code></td><td></td></tr><tr><td>range-key</td><td>String</td><td></td><td>当 range 是一个 二维 Object Array 时，通过 range-key 来指定 Object 中 key 的值作为选择器显示内容</td><td></td></tr><tr><td>value</td><td>Array</td><td>[]</td><td>value 每一项的值表示选择了 range 对应项中的第几个（下标从 0 开始）</td><td></td></tr><tr><td>bindchange</td><td>EventHandle</td><td></td><td>value 改变时触发 change 事件，event.detail = {value: value}</td><td></td></tr><tr><td>bindcolumnchange</td><td>EventHandle</td><td></td><td>某一列的值改变时触发 columnchange 事件，event.detail = {column: column, value: value}，column 的值表示改变了第几列（下标从 0 开始），value 的值表示变更值的下标</td><td></td></tr><tr><td>bindcancel</td><td>EventHandle</td><td></td><td>取消选择时触发</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td></td></tr></tbody></table></blockquote><blockquote><p>时间</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>value</td><td>String</td><td></td><td>表示选中的时间，格式为”hh:mm”</td><td></td></tr><tr><td>start</td><td>String</td><td></td><td>表示有效时间范围的开始，字符串格式为”hh:mm”</td><td></td></tr><tr><td>end</td><td>String</td><td></td><td>表示有效时间范围的结束，字符串格式为”hh:mm”</td><td></td></tr><tr><td>bindchange</td><td>EventHandle</td><td></td><td>value 改变时触发 change 事件，event.detail = {value: value}</td><td></td></tr><tr><td>bindcancel</td><td>EventHandle</td><td></td><td>取消选择时触发</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td></td></tr></tbody></table></blockquote><blockquote><p>日期</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>0</td><td>表示选中的日期，格式为”YYYY-MM-DD”</td><td></td></tr><tr><td>start</td><td>String</td><td></td><td>表示有效日期范围的开始，字符串格式为”YYYY-MM-DD”</td><td></td></tr><tr><td>end</td><td>String</td><td></td><td>表示有效日期范围的结束，字符串格式为”YYYY-MM-DD”</td><td></td></tr><tr><td>fields</td><td>String</td><td>day</td><td>有效值 year,month,day，表示选择器的粒度</td><td></td></tr><tr><td>bindchange</td><td>EventHandle</td><td></td><td>value 改变时触发 change 事件，event.detail = {value: value}</td><td></td></tr><tr><td>bindcancel</td><td>EventHandle</td><td></td><td>取消选择时触发</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td></td></tr></tbody></table></blockquote><blockquote><p>省市</p><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>value</td><td>Array</td><td>[]</td><td>表示选中的省市区，默认选中每一列的第一个值</td><td></td></tr><tr><td>custom-item</td><td>String</td><td></td><td>可为每一列的顶部添加一个自定义的项</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>bindchange</td><td>EventHandle</td><td></td><td>value 改变时触发 change 事件，event.detail = {value: value, code: code, postcode: postcode}，其中字段 code 是统计用区划代码，postcode 是邮政编码</td><td></td></tr><tr><td>bindcancel</td><td>EventHandle</td><td></td><td>取消选择时触发</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td></td></tr></tbody></table></blockquote><ul><li><strong>picker-view&gt;picker-view-column</strong> 嵌入页面的滚动选择器 只可放置<code>&lt;picker-view-column/&gt;</code>组件</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>value</td><td>NumberArray</td><td>数组中的数字依次表示 picker-view 内的 picker-view-column 选择的第几项（下标从 0 开始），数字大于 picker-view-column 可选项长度时，选择最后一项。</td><td></td></tr><tr><td>indicator-style</td><td>String</td><td>设置选择器中间选中框的样式</td><td></td></tr><tr><td>indicator-class</td><td>String</td><td>设置选择器中间选中框的类名</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.1.0</a></td></tr><tr><td>mask-style</td><td>String</td><td>设置蒙层的样式</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>mask-class</td><td>String</td><td>设置蒙层的类名</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>bindchange</td><td>EventHandle</td><td>当滚动选择，value 改变时触发 change 事件，event.detail = {value: value}；value 为数组，表示 picker-view 内的 picker-view-column 当前选择的是第几项（下标从 0 开始）</td><td></td></tr></tbody></table></blockquote><ul><li><strong>slider</strong> 滑动选择器</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>min</td><td>Number</td><td>0</td><td>最小值</td><td></td></tr><tr><td>max</td><td>Number</td><td>100</td><td>最大值</td><td></td></tr><tr><td>step</td><td>Number</td><td>1</td><td>步长，取值必须大于 0，并且可被(max - min)整除</td><td></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td></td></tr><tr><td>value</td><td>Number</td><td>0</td><td>当前取值</td><td></td></tr><tr><td>color</td><td>Color</td><td>#e9e9e9</td><td>背景条的颜色（请使用 backgroundColor）</td><td></td></tr><tr><td>selected-color</td><td>Color</td><td>#1aad19</td><td>已选择的颜色（请使用 activeColor）</td><td></td></tr><tr><td>activeColor</td><td>Color</td><td>#1aad19</td><td>已选择的颜色</td><td></td></tr><tr><td>backgroundColor</td><td>Color</td><td>#e9e9e9</td><td>背景条的颜色</td><td></td></tr><tr><td>block-size</td><td>Number</td><td>28</td><td>滑块的大小，取值范围为 12 - 28</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>block-color</td><td>Color</td><td>#ffffff</td><td>滑块的颜色</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>show-value</td><td>Boolean</td><td>false</td><td>是否显示当前 value</td><td></td></tr><tr><td>bindchange</td><td>EventHandle</td><td></td><td>完成一次拖动后触发的事件，event.detail = {value: value}</td><td></td></tr><tr><td>bindchanging</td><td>EventHandle</td><td></td><td>拖动过程中触发的事件，event.detail = {value: value}</td><td></td></tr></tbody></table></blockquote><ul><li><strong>switch</strong> 开关选择器</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>checked</td><td>Boolean</td><td>false</td><td>是否选中</td></tr><tr><td>type</td><td>String</td><td>switch</td><td>样式，有效值：switch, checkbox</td></tr><tr><td>bindchange</td><td>EventHandle</td><td></td><td>checked 改变时触发 change 事件，event.detail={ value:checked}</td></tr><tr><td>color</td><td>Color</td><td></td><td>switch 的颜色，同 css 的 color</td></tr></tbody></table></blockquote><ul><li><strong>textarea</strong> <em>(原生组件)</em></li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>value</td><td>String</td><td></td><td>输入框的内容</td><td></td></tr><tr><td>placeholder</td><td>String</td><td></td><td>输入框为空时占位符</td><td></td></tr><tr><td>placeholder-style</td><td>String</td><td></td><td>指定 placeholder 的样式</td><td></td></tr><tr><td>placeholder-class</td><td>String</td><td>textarea-placeholder</td><td>指定 placeholder 的样式类</td><td></td></tr><tr><td>disabled</td><td>Boolean</td><td>false</td><td>是否禁用</td><td></td></tr><tr><td>maxlength</td><td>Number</td><td>140</td><td>最大输入长度，设置为 -1 的时候不限制最大长度</td><td></td></tr><tr><td>auto-focus</td><td>Boolean</td><td>false</td><td>自动聚焦，拉起键盘。</td><td></td></tr><tr><td>focus</td><td>Boolean</td><td>false</td><td>获取焦点</td><td></td></tr><tr><td>auto-height</td><td>Boolean</td><td>false</td><td>是否自动增高，设置 auto-height 时，style.height 不生效</td><td></td></tr><tr><td>fixed</td><td>Boolean</td><td>false</td><td>如果 textarea 是在一个 <code>position:fixed</code> 的区域，需要显示指定属性 fixed 为 true</td><td></td></tr><tr><td>cursor-spacing</td><td>Number</td><td>0</td><td>指定光标与键盘的距离，单位 px 。取 textarea 距离底部的距离和 cursor-spacing 指定的距离的最小值作为光标与键盘的距离</td><td></td></tr><tr><td>cursor</td><td>Number</td><td></td><td>指定 focus 时的光标位置</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>show-confirm-bar</td><td>Boolean</td><td>true</td><td>是否显示键盘上方带有”完成“按钮那一栏</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.0</a></td></tr><tr><td>selection-start</td><td>Number</td><td>-1</td><td>光标起始位置，自动聚集时有效，需与 selection-end 搭配使用</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>selection-end</td><td>Number</td><td>-1</td><td>光标结束位置，自动聚集时有效，需与 selection-start 搭配使用</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>adjust-position</td><td>Boolean</td><td>true</td><td>键盘弹起时，是否自动上推页面</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.90</a></td></tr><tr><td>bindfocus</td><td>EventHandle</td><td></td><td>输入框聚焦时触发，event.detail = { value, height }，height 为键盘高度，在基础库 1.9.90 起支持</td><td></td></tr><tr><td>bindblur</td><td>EventHandle</td><td></td><td>输入框失去焦点时触发，event.detail = {value, cursor}</td><td></td></tr><tr><td>bindlinechange</td><td>EventHandle</td><td></td><td>输入框行数变化时调用，event.detail = {height: 0, heightRpx: 0, lineCount: 0}</td><td></td></tr><tr><td>bindinput</td><td>EventHandle</td><td></td><td>当键盘输入时，触发 input 事件，event.detail = {value, cursor}，<strong>bindinput 处理函数的返回值并不会反映到 textarea 上</strong></td><td></td></tr><tr><td>bindconfirm</td><td>EventHandle</td><td></td><td>点击完成时， 触发 confirm 事件，event.detail = {value: value}</td><td></td></tr></tbody></table></blockquote></li><li><p>导航 Nav</p><ul><li><strong>navigator</strong> 页面链接</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>target</td><td>String</td><td></td><td>在哪个目标上发生跳转，默认当前小程序</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td>url</td><td>String</td><td></td><td>当前小程序内的跳转链接</td><td></td></tr><tr><td>open-type</td><td>String</td><td>navigate</td><td>跳转方式</td><td></td></tr><tr><td>delta</td><td>Number</td><td></td><td>当 open-type 为 ‘navigateBack’ 时有效，表示回退的层数</td><td></td></tr><tr><td>app-id</td><td>String</td><td></td><td>当 target=”miniProgram”时有效，要打开的小程序 appId</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td>path</td><td>String</td><td></td><td>当 target=”miniProgram”时有效，打开的页面路径，如果为空则打开首页</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td>extra-data</td><td>Object</td><td></td><td>当 target=”miniProgram”时有效，需要传递给目标小程序的数据，目标小程序可在 <code>App.onLaunch()</code>，<code>App.onShow()</code> 中获取到这份数据。<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">详情</a></td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td>version</td><td>version</td><td>release</td><td>当 target=”miniProgram”时有效，要打开的小程序版本，有效值 develop（开发版），trial（体验版），release（正式版），仅在当前小程序为开发版或体验版时此参数有效；如果当前小程序是正式版，则打开的小程序必定是正式版。</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td>hover-class</td><td>String</td><td>navigator-hover</td><td>指定点击时的样式类，当<code>hover-class=&quot;none&quot;</code>时，没有点击态效果</td><td></td></tr><tr><td>hover-stop-propagation</td><td>Boolean</td><td>false</td><td>指定是否阻止本节点的祖先节点出现点击态</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>hover-start-time</td><td>Number</td><td>50</td><td>按住后多久出现点击态，单位毫秒</td><td></td></tr><tr><td>hover-stay-time</td><td>Number</td><td>600</td><td>手指松开后点击态保留时间，单位毫秒</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td>bindsuccess</td><td>String</td><td></td><td>当 target=”miniProgram”时有效，跳转小程序成功</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td>binderror</td><td>String</td><td></td><td>当 target=”miniProgram”时有效，跳转小程序失败</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr><tr><td>bindcomplete</td><td>String</td><td></td><td>当 target=”miniProgram”时有效，跳转小程序完成</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">2.0.7</a></td></tr></tbody></table></blockquote><ul><li><strong>functional-page-navigator</strong></li></ul></li><li><p>媒体组件</p><ul><li><strong>audio</strong></li><li><strong>image</strong></li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>src</td><td>String</td><td></td><td>图片资源地址，支持云文件 ID（2.2.3 起）</td><td></td></tr><tr><td>mode</td><td>String</td><td>‘scaleToFill’</td><td>9 种图片裁剪、4 种缩放的模式 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html">见文档</a></td><td></td></tr><tr><td>lazy-load</td><td>Boolean</td><td>false</td><td>图片懒加载。只针对 page 与 scroll-view 下的 image 有效</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr><tr><td>binderror</td><td>HandleEvent</td><td></td><td>当错误发生时，发布到 AppService 的事件名，事件对象 event.detail = {errMsg: ‘something wrong’}</td><td></td></tr><tr><td>bindload</td><td>HandleEvent</td><td></td><td>当图片载入完毕时，发布到 AppService 的事件名，事件对象 event.detail = {height:’图片高度 px’, width:’图片宽度 px’}</td><td></td></tr></tbody></table></blockquote><ul><li><strong>video</strong> <em>(原生组件)</em></li><li><strong>camera</strong> <em>(原生组件)</em></li><li><strong>live-player</strong> <em>(原生组件)</em></li><li><strong>live-pusher</strong> <em>(原生组件)</em></li></ul></li><li><p>地图</p><ul><li><strong>map</strong> <em>(原生组件)</em></li></ul></li><li><p>画布</p><ul><li><strong>canvas</strong> <em>(原生组件)</em></li></ul></li><li><p>开放能力</p><ul><li><strong>open-data</strong> 用于展示微信开放的数据</li></ul><blockquote><table><thead><tr><th>属性名</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>type</td><td>String</td><td></td><td>开放数据类型 8 种有效值：<code>groupName</code> <code>userNickName</code> <code>userAvatarUrl</code> <code>userGender</code> <code>userCity</code> <code>userProvince</code> <code>userCountry</code> <code>userLanguage</code> <a href="https://developers.weixin.qq.com/miniprogram/dev/component/open-data.html">见文档</a></td></tr><tr><td>open-gid</td><td>String</td><td></td><td>当 type=”groupName” 时生效, 群 id</td></tr><tr><td>lang</td><td>String</td><td>en</td><td>当 type=”user*“ 时生效，以哪种语言展示 userInfo，有效值有：en, zh_CN, zh_TW</td></tr></tbody></table></blockquote><ul><li><strong>web-view</strong></li><li><strong>ad</strong></li></ul></li></ul><p><em>原生组件的 使用限制 见<a href="https://developers.weixin.qq.com/miniprogram/dev/component/native-component.html">官方文档</a></em></p><h1 id="3-逻辑层"><a href="#3-逻辑层" class="headerlink" title="3 逻辑层"></a>3 逻辑层</h1><h2 id="3-1-注册程序-App"><a href="#3-1-注册程序-App" class="headerlink" title="3.1 注册程序 App()"></a>3.1 注册程序 App()</h2><p><strong>App({object}) 必须在 app.js 中调用，必须调用且只能调用一次。不然会出现无法预期的后果。</strong></p><blockquote><p>示例：</p><pre class=" language-js"><code class="language-js"><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  onLaunch<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something initial when launch.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onShow<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something when show.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onHide<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something when hide.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onError<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  globalData<span class="token punctuation">:</span> <span class="token string">"I am global data"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th><th>触发时机</th></tr></thead><tbody><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html#onlaunchobject">onLaunch</a></td><td>Function</td><td>生命周期回调—监听小程序初始化</td><td>小程序初始化完成时（全局只触发一次）</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html#onshowobject">onShow</a></td><td>Function</td><td>生命周期回调—监听小程序显示</td><td>小程序启动，或从后台进入前台显示时</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html#onhide">onHide</a></td><td>Function</td><td>生命周期回调—监听小程序隐藏</td><td>小程序从前台进入后台时</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html#onerrorstring-error">onError</a></td><td>Function</td><td>错误监听函数</td><td>小程序发生脚本错误，或者 api 调用失败时触发，会带上错误信息</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html#onpagenotfoundobject">onPageNotFound</a></td><td>Function</td><td>页面不存在监听函数</td><td>小程序要打开的页面不存在时触发，会带上页面信息回调该函数</td></tr><tr><td>其他</td><td>Any</td><td>开发者可以添加任意的全局函数或数据到 <code>Object</code> 参数中，用 <code>this</code> 可以访问</td><td></td></tr></tbody></table><ul><li><p><code>onLaunch / onShow(Object)</code> 的 object 参数说明：</p><table><thead><tr><th>字段</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>String</td><td>打开小程序的路径</td></tr><tr><td>query</td><td>Object</td><td>打开小程序的 query</td></tr><tr><td>scene</td><td>Number</td><td>打开小程序的<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/scene.html">场景值</a></td></tr><tr><td>shareTicket</td><td>String</td><td>shareTicket，详见 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/share.html#%E8%8E%B7%E5%8F%96%E6%9B%B4%E5%A4%9A%E8%BD%AC%E5%8F%91%E4%BF%A1%E6%81%AF">获取更多转发信息</a></td></tr><tr><td>referrerInfo</td><td>Object</td><td>当场景为由从另一个小程序或公众号或 App 打开时，返回此字段</td></tr><tr><td>referrerInfo.appId</td><td>String</td><td>来源小程序或公众号或 App 的 appId <em>支持此属性的场景值 scene 有：<a href="%E6%9D%A5%E6%BA%90%E5%85%AC%E4%BC%97%E5%8F%B7Profile%E9%A1%B5%E7%9B%B8%E5%85%B3%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%97%E8%A1%A8">1020</a>,<a href="%E6%9D%A5%E6%BA%90%E5%85%AC%E4%BC%97%E5%8F%B7%E8%87%AA%E5%AE%9A%E4%B9%89%E8%8F%9C%E5%8D%95">1035</a>,<a href="%E6%9D%A5%E6%BA%90APP%E5%88%86%E4%BA%AB%E6%B6%88%E6%81%AF%E5%8D%A1%E7%89%87">1036</a>,<a href="%E6%9D%A5%E6%BA%90%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%89%93%E5%BC%80">1037</a>,<a href="%E4%BB%8E%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%BF%94%E5%9B%9E">1038</a>,<a href="%E6%9D%A5%E6%BA%90%E5%85%AC%E4%BC%97%E5%8F%B7%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF">1043</a></em></td></tr><tr><td>referrerInfo.extraData</td><td>Object</td><td>来源小程序传过来的数据，scene=1037 或 1038 时支持</td></tr></tbody></table></li><li><p><code>onPageNotFound(Object)</code> 的 object 参数说明：</p><table><thead><tr><th>字段</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>path</td><td>String</td><td>不存在页面的路径</td></tr><tr><td>query</td><td>Object</td><td>打开不存在页面的 query</td></tr><tr><td>isEntryPage</td><td>Boolean</td><td>是否本次启动的首个页面（例如从分享等入口进来，首个页面是开发者配置的分享页面）</td></tr></tbody></table></li></ul><p><strong>全局的<code>getApp([allowDefault])</code></strong> 的示例：</p><blockquote><p>allowDefault 是类型为 boolean 的可选参数，在 <code>App</code> 未定义时返回默认实现。当 App 被调用时，默认实现中定义的属性会被覆盖合并到 App 中</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// other.js</span><span class="token keyword">var</span> appInstance <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>appInstance<span class="token punctuation">.</span>globalData<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// I am global data</span></code></pre></blockquote><h2 id="3-2-注册页面-Page-Object"><a href="#3-2-注册页面-Page-Object" class="headerlink" title="3.2 注册页面 Page(Object)"></a>3.2 注册页面 Page(Object)</h2><p><code>Page(Object)</code> 函数用来注册一个页面。接受一个 <code>Object</code> 类型参数，其指定页面的初始数据、生命周期回调、事件处理函数等。</p><blockquote><p>示例：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//index.js</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token string">"This is page data."</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onLoad<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do some initialize when page load.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onReady<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something when page ready.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onShow<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something when page show.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onHide<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something when page hide.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onUnload<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something when page close.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onPullDownRefresh<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something when pull down.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onReachBottom<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something when page reach bottom.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onShareAppMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// return custom share data when user share.</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  onPageScroll<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// Do something when page scroll</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">onTabItemTap</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>pagePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// Event handler.</span>  viewTap<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>      <span class="token punctuation">{</span>        text<span class="token punctuation">:</span> <span class="token string">"Set some data for updating view."</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// this is setData callback</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  customData<span class="token punctuation">:</span> <span class="token punctuation">{</span>    hi<span class="token punctuation">:</span> <span class="token string">"MINA"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#data">data</a></td><td>Object</td><td>页面第一次渲染使用的初始数据</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onloadobject-query">onLoad</a></td><td>Function</td><td>生命周期回调—监听页面加载</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onshow">onShow</a></td><td>Function</td><td>生命周期回调—监听页面显示，页面显示/切入前台时触发。</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onready">onReady</a></td><td>Function</td><td>生命周期回调—监听页面初次渲染完成。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onhide">onHide</a></td><td>Function</td><td>生命周期回调—监听页面隐藏，页面隐藏/切入后台时触发。如 <code>navigateTo</code> 或底部 <code>tab</code> 切换到其他页面，小程序切入后台等。</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onunload">onUnload</a></td><td>Function</td><td>生命周期回调—监听页面卸载，如<code>redirectTo</code>或<code>navigateBack</code>到其他页面时。</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onpulldownrefresh">onPullDownRefresh</a></td><td>Function</td><td>监听用户下拉刷新动作</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onreachbottom">onReachBottom</a></td><td>Function</td><td>监听用户上拉触底事件</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onpagescrollobject">onPageScroll</a></td><td>Function</td><td>监听用户滑动页面事件</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#onshareappmessageobject">onShareAppMessage</a></td><td>Function</td><td>监听用户点击页面内转发按钮（<code>&lt;button&gt;</code> 组件 <code>open-type=&quot;share&quot;</code>）或右上角菜单“转发”按钮的行为</td></tr><tr><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html#ontabitemtapobject">onTabItemTap</a></td><td>Function</td><td>监听 tab 点击事件，当前是 tab 页时，点击 tab 时触发</td></tr><tr><td>其他</td><td>Any</td><td>开发者可以添加任意的函数或数据到 <code>Object</code> 参数中，在页面的函数中用 <code>this</code> 可以访问</td></tr></tbody></table><ul><li><p>data</p><p>页面加载时，<code>data</code> 将会以<code>JSON</code>字符串的形式由逻辑层传至渲染层，因此<code>data</code>中的数据必须是可以转成<code>JSON</code>的类型：字符串，数字，布尔值，对象，数组。</p><blockquote><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    text<span class="token punctuation">:</span> <span class="token string">"init data"</span><span class="token punctuation">,</span>    array<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">"1"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> msg<span class="token punctuation">:</span> <span class="token string">"2"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>声明周期回调函数</p><ul><li><p>onLoad(query)</p><p>页面加载时触发。一个页面只会调用一次，可以在 onLoad 的参数中获取 打开当前页面路径中的参数 query。</p></li><li><p>onShow()</p></li><li><p>onReady()</p></li><li><p>onHide()</p></li><li><p>onUnload()</p></li></ul></li><li><p>页面事件处理函数</p><ul><li><p>onPullDownRefresh()</p><ul><li>需要在<code>app.json</code>的<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#window"><code>window</code></a>选项中或<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">页面配置</a>中开启<code>enablePullDownRefresh</code>。</li><li>可以通过<a href="https://developers.weixin.qq.com/miniprogram/dev/api/pulldown.html#wxstartpulldownrefreshobject"><code>wx.startPullDownRefresh</code></a>触发下拉刷新，调用后触发下拉刷新动画，效果与用户手动下拉刷新一致。</li><li>当处理完数据刷新后，<a href="https://developers.weixin.qq.com/miniprogram/dev/api/pulldown.html#wxstoppulldownrefresh"><code>wx.stopPullDownRefresh</code></a>可以停止当前页面的下拉刷新。</li></ul></li><li><p>onReachBottom()</p><ul><li>可以在<code>app.json</code>的<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#window"><code>window</code></a>选项中或<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">页面配置</a>中设置触发距离<code>onReachBottomDistance</code>。</li><li>在触发距离内滑动期间，本事件只会被触发一次。</li></ul></li><li><p>onPageScroll(scrollTop)</p><p>scrollTop 是 类型为 Number 的参数 ，页面在垂直方向已滚动的距离（单位 px）</p></li><li><p>onShareAppMessage(Object)</p><p><strong>注意：只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮</strong> 参数说明：</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>from</td><td>String</td><td>转发事件来源。 <code>button</code>：页面内转发按钮； <code>menu</code>：右上角转发菜单</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.4</a></td></tr><tr><td>target</td><td>Object</td><td>如果 <code>from</code> 值是 <code>button</code>，则 <code>target</code> 是触发这次转发事件的 <code>button</code>，否则为 <code>undefined</code></td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.2.4</a></td></tr><tr><td>webViewUrl</td><td>String</td><td>页面中包含<code>&lt;web-view&gt;</code>组件时，返回当前<code>&lt;web-view&gt;</code>的 url</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.6.4</a></td></tr></tbody></table><p><strong>必须 return 一个 Object，用于自定义 转发内容</strong></p><table><thead><tr><th>字段</th><th>说明</th><th>默认值</th><th>最低版本</th></tr></thead><tbody><tr><td>title</td><td>转发标题</td><td>当前小程序名称</td><td></td></tr><tr><td>path</td><td>转发路径</td><td>当前页面 path ，必须是以 / 开头的完整路径</td><td></td></tr><tr><td>imageUrl</td><td>自定义图片路径，可以是本地文件路径、代码包文件路径或者网络图片路径。支持 PNG 及 JPG。显示图片长宽比是 5:4。</td><td>使用默认截图</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.5.0</a></td></tr></tbody></table><blockquote><p>例：</p><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  onShareAppMessage<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token keyword">from</span> <span class="token operator">===</span> <span class="token string">"button"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 来自页面内转发按钮</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      title<span class="token punctuation">:</span> <span class="token string">"自定义转发标题"</span><span class="token punctuation">,</span>      path<span class="token punctuation">:</span> <span class="token string">"/page/user?id=123"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p>onTabItemTap(Object)</p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th><th>最低版本</th></tr></thead><tbody><tr><td>index</td><td>String</td><td>被点击 tabItem 的序号，从 0 开始</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>pagePath</td><td>String</td><td>被点击 tabItem 的页面路径</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr><tr><td>text</td><td>String</td><td>被点击 tabItem 的按钮文字</td><td><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html">1.9.0</a></td></tr></tbody></table></li></ul></li><li><p>组件事件处理函数</p><p>即事件绑定</p><blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>view</span> <span class="token attr-name">bindtap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewTap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> click me <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>view</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  viewTap<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"view tap"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li></ul><p><strong><code>this.route</code></strong> 返回当前页面的路径</p><p><strong><code>this.setData(Object data[,Function callback])</code></strong> 将数据从逻辑层发送到视图层（异步），同时改变对应的 <code>this.data</code> 的值（同步）。function 指 setData 引起的界面更新渲染完毕后的回调函数。</p><h2 id="3-3-路由机制"><a href="#3-3-路由机制" class="headerlink" title="3.3 路由机制"></a>3.3 路由机制</h2><p><code>getCurrentPages()</code> 函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出，第一个元素为首页，最后一个元素为当前页面</p><ul><li><code>navigateTo</code>, <code>redirectTo</code> 只能打开非 tabBar 页面。</li><li><code>switchTab</code> 只能打开 tabBar 页面。</li><li><code>reLaunch</code> 可以打开任意页面。</li><li>页面底部的 tabBar 由页面决定，即只要是定义为 tabBar 的页面，底部都有 tabBar。</li><li>调用页面路由带的参数可以在目标页面的<code>onLoad</code>中获取。</li></ul><h2 id="3-4-模块化"><a href="#3-4-模块化" class="headerlink" title="3.4 模块化"></a>3.4 模块化</h2><p>app.js 内是全局函数和变量；</p><p>通过<code>module.exports.xxA = xx</code> 来暴露接口；通过 <code>var common = require(&#39;common.js&#39;)</code> 来引入接口 <em>暂不支持绝对路径</em></p><blockquote><p>例子：</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// common.js</span><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> !`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sayGoodbye</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Goodbye </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> !`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>sayHello <span class="token operator">=</span> sayHello<span class="token punctuation">;</span>exports<span class="token punctuation">.</span>sayGoodbye <span class="token operator">=</span> sayGoodbye<span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> common <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"common.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  helloMINA<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    common<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"MINA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  goodbyeMINA<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    common<span class="token punctuation">.</span><span class="token function">sayGoodbye</span><span class="token punctuation">(</span><span class="token string">"MINA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h2 id="3-5-原生-API"><a href="#3-5-原生-API" class="headerlink" title="3.5 原生 API"></a>3.5 原生 API</h2><p>提供丰富的微信原生 API，可以方便的调起微信提供的能力，如获取用户信息，本地存储，支付功能等。</p><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/">API</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Taro多端统一开发解决方案</title>
      <link href="/2020/03/02/bi-ji-taro/"/>
      <url>/2020/03/02/bi-ji-taro/</url>
      
        <content type="html"><![CDATA[<h1 id="Taro"><a href="#Taro" class="headerlink" title="Taro"></a><a href="https://taro.aotu.io/">Taro</a></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>使用 Taro，我们可以只书写一套代码，再通过 Taro 的编译工具，将源代码分别编译出可以在不同端（微信/百度/支付宝/字节跳动/QQ/京东小程序、快应用、H5、React-Native 等）运行的代码<br><a href="https://aotu.io/notes/2019/03/12/mini-program-framework-full-review/index.html">小程序框架评测</a></p><ul><li>React 语法风格,采用与 React 一致的组件化思想，组件生命周期与 React 保持一致，同时支持使用 JSX 语法</li><li>支持 <code>npm/yarn</code> 安装管理第三方依赖,<code>ES7/ES8</code>,<code>CSS 预编译器</code>,<code>Redux/MobX状态管理</code>,小程序 API 优化,异步 API Promise 化</li><li>支持多端开发转化到 微信/百度/支付宝/字节跳动/QQ/京东小程序 、快应用、 H5 端 以及 移动端（React Native）</li></ul><h2 id="规范架构"><a href="#规范架构" class="headerlink" title="规范架构"></a>规范架构</h2><pre class=" language-js"><code class="language-js">├── config                 配置目录<span class="token operator">|</span>   ├── dev<span class="token punctuation">.</span>js             开发时配置<span class="token operator">|</span>   ├── index<span class="token punctuation">.</span>js           默认配置<span class="token operator">|</span>   └── prod<span class="token punctuation">.</span>js            打包时配置├── src                    源码目录<span class="token operator">|</span>   ├── components         公共组件目录<span class="token operator">|</span>   ├── pages              页面文件目录<span class="token operator">|</span>   <span class="token operator">|</span>   ├── index          index 页面目录<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   ├── banner     页面 index 私有组件<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   ├── index<span class="token punctuation">.</span>js   index 页面逻辑<span class="token operator">|</span>   <span class="token operator">|</span>   <span class="token operator">|</span>   └── index<span class="token punctuation">.</span>css  index 页面样式<span class="token operator">|</span>   ├── utils              公共方法库<span class="token operator">|</span>   ├── app<span class="token punctuation">.</span>css            项目总通用样式<span class="token operator">|</span>   └── app<span class="token punctuation">.</span>js             项目入口文件└── <span class="token keyword">package</span><span class="token punctuation">.</span>json</code></pre><h2 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h2><h3 id="入口文件"><a href="#入口文件" class="headerlink" title="入口文件"></a>入口文件</h3><p>入口文件默认是 <code>src</code> 目录下的 <code>app.js</code><br>通常入口文件会包含一个<code>config</code>配置项，这个配置是整个应用的全局的配置，配置规范基于微信小程序的全局配置进行制定，所有平台进行统一。入口文件中的<a href="https://taro-docs.jd.com/taro/docs/tutorial.html#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">全局配置</a>，在编译后将生成全局配置文件<code>app.json</code>，其中<code>page</code>属性必填</p><h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p><a href="https://taro-docs.jd.com/taro/docs/taroize.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">微信小程序和 taro - 生命周期的对应关系</a></p><ul><li><code>componentWillMount()</code><em>在微信/百度/字节跳动/支付宝小程序中这一生命周期方法对应 app 的 onLaunch,监听程序初始化，初始化完成时触发（全局只触发一次）</em></li><li><code>componentDidMount()</code><em>视为等同 componentWillMount,在 componentWillMount 后执行</em></li><li><code>componentDidShow()</code><em>在微信/百度/字节跳动/支付宝小程序中这一生命周期方法对应 onShow，在 H5/RN 中同步实现</em></li><li><code>componentDidHide()</code><em>在微信/百度/字节跳动/支付宝小程序中这一生命周期方法对应 onHide，在 H5/RN 中同步实现</em></li><li><code>componentDidCatchError(String error)</code><em>在微信/百度/字节跳动/支付宝小程序中这一生命周期方法对应 onError，H5/RN 中尚未实现</em></li><li><code>componentDidNotFound(Object)</code><em>在微信/字节跳动小程序中这一生命周期方法对应 onPageNotFound</em></li></ul><h4 id="Taro-getApp-Object"><a href="#Taro-getApp-Object" class="headerlink" title="Taro.getApp(Object)"></a>Taro.getApp(Object)</h4><p>可以用来获取到程序 App 实例，在各个端均有实现</p><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>在项目入口文件 app.js 中 config 的 pages 数组中指定所有页面</p><h4 id="页面配置"><a href="#页面配置" class="headerlink" title="页面配置"></a>页面配置</h4><p>页面的配置只能设置 全局配置 中部分 window 配置项的内容，页面中配置项会覆盖 全局配置 的 window 中相同的配置项</p><h4 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h4><p>页面的样式文件建议放在与页面 JS 的同级目录下，然后通过 ES6 规范 import 进行引入，支持使用 CSS 预编译处理器，另可能是由于转编译后每个页面分为独立组件，import css 后不需要再考虑作用域的问题。</p><h4 id="生命周期-1"><a href="#生命周期-1" class="headerlink" title="生命周期"></a>生命周期</h4><p>每个生命周期函数中，都可以通过 <code>this.$router.params</code> 获取打开当前页面路径中的参数</p><ul><li><code>componentWillMount()</code><em>页面加载时触发，一个页面只会调用一次，此时页面 DOM 尚未准备好，还不能和视图层进行交互</em></li><li><code>componentDidMount()</code><em>页面初次渲染完成时触发，一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互</em></li><li><code>shouldComponentUpdate(nextProps, nextState)</code><em>页面是否需要更新，返回 false 不继续更新，否则继续走更新流程</em></li><li><code>componentWillUpdate(nextProps, nextState)</code><em>页面即将更新</em></li><li><code>componentDidUpdate(prevProps, prevState)</code><em>页面更新完毕</em></li><li><code>componentWillUnmount()</code><em>页面卸载时触发，如 redirectTo 或 navigateBack 到其他页面时</em></li><li><code>componentDidShow()</code><em>页面显示/切入前台时触发</em></li><li><code>componentDidHide()</code><em>页面隐藏/切入后台时触发， 如 navigateTo 或底部 tab 切换到其他页面，小程序切入后台等</em></li></ul><hr><ul><li><code>onPullDownRefresh()</code><em>监听用户下拉刷新事件</em></li><li><code>onReachBottom()</code><em>监听用户上拉触底事件</em></li><li><code>onPageScroll(Object)</code><em>监听用户滑动页面事件</em></li><li><code>onShareAppMessage(Object)</code><em>监听用户点击页面内转发按钮（Button 组件 openType=’share’）或右上角菜单“转发”按钮的行为，并自定义转发内容;只有定义了此事件处理函数，右上角菜单才会显示“转发”按钮</em></li><li><code>onTabItemTap(Object)</code><em>当前是 tab 页时，点击 tab 时触发</em></li><li><code>onResize(object)</code><em>Only 微信小程序,屏幕旋转时触发</em></li><li><code>componentWillPreload()</code><em>Only 微信小程序，预加载钩子</em></li><li><code>onTitleClick()</code><em>Only 支付宝小程序,点击标题触发</em></li><li><code>onOptionMenuClick()</code><em>only 支付宝小程序,点击导航栏额外图标触发</em></li><li><code>onPopMenuClick()</code><em>only 支付宝小程序,点击右上角通用菜单中的自定义菜单按钮触发</em></li><li><code>onPullIntercept()</code><em>only 支付宝小程序,下拉截断时触发</em></li></ul><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p>建议放在 src 下的 components 目录中。一个组件通常包含组件 JS 文件以及组件样式文件，组织方式与页面类似。<br>一般来说，Taro 组件不需要任何配置，但当你在 Taro 组件中引用原生小程序组件代码时，则需要通过配置 <code>config.usingComponents&#123;组件名: 组件相对路径&#125;</code> 来实现。<br>其生命周期如下：</p><ul><li><code>componentWillMount()</code><em>组件加载时触发，一个组件只会调用一次，此时组件 DOM 尚未准备好，还不能和视图层进行交互</em></li><li><code>componentDidMount()</code><em>组件初次渲染完成时触发，一个组件只会调用一次，代表组件已经准备妥当，可以和视图层进行交互</em></li><li><code>componentWillReceiveProps(nextProps)</code><em>已经装载的组件接收到新属性前调用</em></li><li><code>shouldComponentUpdate(nextProps, nextState)</code><em>组件是否需要更新，返回 false 不继续更新，否则继续走更新流程</em></li><li><code>componentWillUpdate(nextProps, nextState)</code><em>组件即将更新</em></li><li><code>componentDidUpdate(prevProps, prevState)</code><em>组件更新完毕</em></li><li><code>componentWillUnmount()</code><em>组件卸载时触发</em></li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p><code>navigateTo(params)</code><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.navigateTo.html">打开新页面</a><br><code>redirectTo(params)</code><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/wx.redirectTo.html">在当前页面打开</a></p><h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// A页面：传入参数 id=2&amp;type=test</span>Taro<span class="token punctuation">.</span><span class="token function">navigateTo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">"/pages/page/path/name?id=2&amp;type=test"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// B页面：</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">Taro<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 { id: 2, type: 'test' }</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="设计稿和尺寸单位"><a href="#设计稿和尺寸单位" class="headerlink" title="设计稿和尺寸单位"></a>设计稿和尺寸单位</h2><p>在 Taro 中尺寸单位建议使用 px、 百分比 %，Taro 默认会对所有单位进行转换。当转成微信小程序的时候，尺寸将默认转换为 100rpx，当转成 H5 时将默认转换为以 rem 为单位的值。<br>Taro 默认以 750px 作为换算尺寸标准，如果设计稿不是以 750px 为标准，则需要在项目配置 config/index.js 中进行设置，例如设计稿尺寸是 640px，则需要修改项目配置 <code>config/index.js</code> 中的 <code>designWidth</code> 配置为 640<br>建议使用 Taro 时，设计稿以 iPhone 6 750px 作为设计尺寸标准</p><h2 id="静态资源引用"><a href="#静态资源引用" class="headerlink" title="静态资源引用"></a>静态资源引用</h2><ul><li>js 中通过<code>import</code>引用样式 css/scss、js、图片音频字体文件、JSON 文件</li><li>样式中引用本地资源：Taro 提供了直接在样式文件中引用本地资源的方式，其原理是通过 PostCSS 的 postcss-url 插件将样式中本地资源引用转换成 Base64 格式， 默认会对 10kb 大小以下的资源进行转换</li></ul><h2 id="组件引用外部样式"><a href="#组件引用外部样式" class="headerlink" title="组件引用外部样式"></a>组件引用外部样式</h2><p><a href="https://nervjs.github.io/taro/docs/component-style.html">详情</a><br>自定义组件对应的样式文件，只对该组件内的节点生效；<br>组件可以指定它所在节点的默认样式，使用 :host 选择器；<br>如果想传递样式给引用的自定义组件，需要利用 externalClasses 定义段定义若干个外部样式类；<br>如果希望组件外样式类能够完全影响组件内部，可以将组件构造器中的 options.addGlobalClass 字段置为 true；</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 跨端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react-vue-试用体验对比</title>
      <link href="/2020/01/15/sui-bi-react-vue-shi-yong-ti-yan-dui-bi/"/>
      <url>/2020/01/15/sui-bi-react-vue-shi-yong-ti-yan-dui-bi/</url>
      
        <content type="html"><![CDATA[<ul><li>react 在组件嵌套上是比 vue 随心所欲多了</li><li>vue 在各种 v-for v-if v-show 上封装的挺多,以及还有表单救星 v-model</li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> react </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs</title>
      <link href="/2020/01/15/bi-ji-nodejs/"/>
      <url>/2020/01/15/bi-ji-nodejs/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h3><ul><li>人机交互部分 UI</li><li>网络请求部分 socket</li><li>javascript 引擎部分（解析之行 javascript）</li><li>渲染引擎部分（渲染 HTML、CSS）</li><li>数据存储部分（cookie、localStorage、sessionStorage）</li></ul><h3 id="渲染引擎"><a href="#渲染引擎" class="headerlink" title="渲染引擎"></a>渲染引擎</h3><h4 id="主流渲染引擎"><a href="#主流渲染引擎" class="headerlink" title="主流渲染引擎"></a>主流渲染引擎</h4><ul><li>chrome Blink(Webkit 分支)</li><li>safari Webket 引擎</li><li>firefox Gecko</li><li>opera Blink</li><li>IE Trident</li><li>Edge EdgeHTML 引擎（Trident 的一个分支</li></ul><h4 id="引擎工作原理"><a href="#引擎工作原理" class="headerlink" title="引擎工作原理"></a>引擎工作原理</h4><ul><li><p>DOM 树 CSS 规则树 合并一起成 渲染树。<br><img src="https://s2.ax1x.com/2020/02/09/1f1QzR.png" alt="主流webkit/gecko工作原理"></p></li><li><p>Layout、reflow 的过程</p><p>用<code>documentFragment</code></p></li><li><p>浏览器访问网址过程</p><ol><li>把网址封装成 http 请求报文(包括 get、host、connection 等..)</li><li>浏览器发起 DNS 解析请求，将域名转换成 IP 地址</li><li>浏览器将请求报文发送给服务器</li><li>服务器接收请求报文，并解析</li><li>服务器处理用户请求，将处理结果封装成 http 响应报文（包括 ContentType、Timing-Allow-Origin 等）</li><li>服务器将 HTTP 响应报文发送给浏览器</li><li>浏览器接收服务器响应报文，解析</li><li>浏览器解析 HTML 页面并展示，在解析过程中遇到新的资源时需要再次发起请求</li><li>最终展示页面</li></ol></li><li><p>请求报文/响应报文的格式</p><p><a href="https://www.cnblogs.com/klguang/p/4618526.html">教程</a></p><p><img src="https://images0.cnblogs.com/blog2015/776887/201507/241034588189239.png" alt="报文结构示意图"></p><ol><li><p>开始行/起始行<code>start line</code>（请求行/响应行</p><ul><li><p>请求行</p><p>例<code>POST /infoNewsAction_uploadxheditorfile.action?immediate=1 HTTP/1.1</code></p><ol><li>方法：GET、POST、PUT、HEAD、DELETE、OPTIONS、TRACE、CONNECT、LINK、UNLINK</li><li>URL</li><li>HTTP 版本</li></ol></li><li><p>响应行</p><p>例<code>HTTP/1.1 200 OK</code></p><ol><li>状态码：1xx、2xx、3xx、4xx、5xx</li><li>HTTP 版本</li></ol></li></ul></li><li><p>首部行/报文头<code>header</code>（用来说明浏览器、服务器或报文主题的一些信息。每个首部行在结束地方都有<code>CRLF换行</code></p><p>例<code>Cache-Control:max-age=60</code></p><ol><li><a href="https://www.processon.com/view/link/58025201e4b0d6b27dd4c8af#map">首部字段名</a>：<strong>通用首部字段</strong>、<strong>请求首部字段</strong>、<strong>响应首部字段</strong>、<strong>实体首部字段</strong></li><li>值</li></ol></li><li><p><code>CRLF空行</code>：主体和首部行之间有空行</p></li><li><p>【可选】实体/主体<code>entity-body</code></p><p><a href="https://www.zhihu.com/question/263752229">报文主体和实体的概念</a></p><p>在请求报文中，一般是 post/put 提交的表单信息</p></li></ol></li><li><p>DNS 解析过程 <a href="https://www.maixj.net/ict/dns-chaxun-9208">教程</a></p></li><li><p>WEB 开发本质</p><ul><li>请求，客户端发起请求</li><li>处理，服务器处理请求</li><li>响应，服务器将处理结果发送给客户端</li><li>客户端处理响应：C/S 架构和 B/S 架构</li></ul></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Node.js 是个一开发平台【开发平台的概念：有对应的变成语言，有语言运行时（Runtime），有能实现特定功能的 API(SDK:Software Development Kit)】，类似于 PHP 开发平台、Apple 开发平台、.net 开发平台。</p><ul><li>该平台使用的语言是 javascript。</li><li>该平台 Runtime 是基于 Chrome V8 Javascript 引擎构建。</li><li>基于 node.js 可以开发控制台程序(命令行程序、CLI 程序)、桌面应用程序(GUI，借助 electron 等)、Web 应用程序(网站)</li></ul><p>Node.js 全栈开发技术栈-MEAN：MongoDb 数据库、Express WEB 开发框架、Angular 前台、Node.js 后台</p><p>特点：</p><ul><li>事件驱动（当事件被触发时，执行传递过去的回调函数）</li><li>非阻塞 I/O</li><li>单线程</li><li>拥有开源生态环境 - npm</li></ul><p>应用场景：<br>服务器开发、web 请求和响应过程、了解服务器端如何和客户端配合<br>了解服务器端渲染<br>服务器端为客户端写接口</p><h3 id="NODE-amp-NVM"><a href="#NODE-amp-NVM" class="headerlink" title="NODE &amp; NVM"></a>NODE &amp; NVM</h3><p><code>nvm</code>工具 可以实现在随时切换和管理 node 版本：建议先装 nvm 再装 node</p><ul><li>nvm version</li><li>nvm install stable</li><li>nvm install 版本号</li><li>nvm uninstall 版本号</li><li>nvm list</li><li>nvm use 版本号 来应用该版本</li></ul><h2 id="快速入门几个要点"><a href="#快速入门几个要点" class="headerlink" title="快速入门几个要点"></a>快速入门几个要点</h2><h3 id="nodejs-和传统-php-等开发网站的区别"><a href="#nodejs-和传统-php-等开发网站的区别" class="headerlink" title="nodejs 和传统 php 等开发网站的区别"></a>nodejs 和传统 php 等开发网站的区别</h3><p>传统的后端：需要处于一个服务器容器 apache 等-监听用户请求并且根据不同请求作出不处理<br>nodeJS：既是 http 服务器，继续自己处理</p><h3 id="REPL-介绍-read-eval-print-loop-交互式解释器"><a href="#REPL-介绍-read-eval-print-loop-交互式解释器" class="headerlink" title="REPL 介绍 read-eval-print-loop(交互式解释器)"></a>REPL 介绍 read-eval-print-loop(交互式解释器)</h3><p>类似于 devtool 里的 console tab<br>terminal 输入 nodej 进入，control+C 退出</p><h3 id="第一个项目小实践"><a href="#第一个项目小实践" class="headerlink" title="第一个项目小实践"></a>第一个项目小实践</h3><ol><li>新建 js 文件</li><li>执行 node file.js</li></ol><h3 id="全局模块-Globals"><a href="#全局模块-Globals" class="headerlink" title="全局模块 Globals"></a>全局模块 Globals</h3><p>比如 process，其他的 非全局模块需要 reqire 来加载</p><p>查看 API 的稳定性 分 3 级：stablity0 表示该 api 已经过时了红色；1 表示正在测试开发阶段橙色；2 是可正常使用蓝色</p><h3 id="Buffer-类型"><a href="#Buffer-类型" class="headerlink" title="Buffer 类型"></a>Buffer 类型</h3><p>二进制数组对象。主要用于方便数据缓冲，易于传输。<br>js 中没有读取或操作饿紧致数据流的机制。NodeJS 中引入了 Buffer 使我们可以操作 TCP 流或文件流；Buffer 累踩坑的对象类似于整数数组，萏 Buffer 的大小是固定的，且在 V8 堆外分配物理内存。Buffer 的大小(Buffer.length)在被创建时确定，且无法调整;Buffer 是全局的，所以使用的时候无需 require()的方式加载</p><ul><li><code>Buffer.from()</code>创建一个 Buffer 对象</li><li><code>Buffer.byteLength</code> 获取字符串对应的字节个数</li><li><code>Buffer.isBuffer(obj)</code> 判断一个对象是否是 Buffer 类型对象</li><li><code>buf[index]</code> 某个 buffer 实例的某个字节</li><li><code>bug.length</code> 某个 buffer 实例的字节个数</li></ul><h3 id="fs-读写文件操作"><a href="#fs-读写文件操作" class="headerlink" title="fs 读写文件操作"></a>fs 读写文件操作</h3><p><code>let fs = require(&#39;fs&#39;)</code></p><ul><li>读文件 fs.writeFile(file, data [,options], callback)</li><li>写文件 fs.readFile(file [,options], callback(err,Bufferdata))</li></ul><h3 id="node-的单线程的异步操作-非阻塞-I-O-解释"><a href="#node-的单线程的异步操作-非阻塞-I-O-解释" class="headerlink" title="node 的单线程的异步操作 - 非阻塞 I/O 解释"></a>node 的单线程的异步操作 - 非阻塞 I/O 解释</h3><p>node 的 event loop: 6 步<br>链接(<a href="https://developer.aliyun.com/lesson_1730_14094#_14094">https://developer.aliyun.com/lesson_1730_14094#_14094</a>)<br>在线动画演示网址：<a href="http://latentflip.com/loupe">http://latentflip.com/loupe</a><br>参考视频：<a href="http://www.youtube.com/watch?v=8aGhZQkoFbQ">www.youtube.com/watch?v=8aGhZQkoFbQ</a></p><h3 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h3><p>js 文件内的./路径是指 执行 js 文件时所处的目录，执行时是相对于这个来查找文件；<br>而非根据 js 文件所在目录 来查找文件。<br><strong>__dirname</strong> 表示该 js 文件所在的绝对路径名<br><strong>__filename</strong> 表示该 js 文件的完整绝对路径名（相比于 dirname 多一个自身的名字）<br><em>这两个变量并非全局变量，可以理解成 node 执行时将文件内代码封装成(functiong(**dirname,**filename){xxx})(‘/c/user/local/sss’, ‘c/user/local/sss/xx.js’)</em></p><h3 id="使用-path-模块进行路径拼接"><a href="#使用-path-模块进行路径拼接" class="headerlink" title="使用 path 模块进行路径拼接"></a>使用 path 模块进行路径拼接</h3><p>为了替代<code>var filePath = __dirname + &#39;/&#39;+ &#39;xx.txt&#39;</code>,不同操作系统或**dirname 内多少个/的边界问题<br><code>var path require(&#39;path&#39;)</code><br><code>var filePath = path.join(**dirname, &#39;xx.txt&#39;)</code></p><h3 id="http-服务"><a href="#http-服务" class="headerlink" title="http 服务"></a>http 服务</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 监听用户的请求事件(request事件) 回调函数两个行参(request,response)</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// if(req ???)</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 服务器设置http响应报文头，告诉浏览器使用响应的编码来解析网页</span>  res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"响应内容"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 对于每个请求，服务器必须结束响应，否则客户端会一直等待服务器响应结束</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动服务</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器启动了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="回调函数行参-request-对象-常用-api"><a href="#回调函数行参-request-对象-常用-api" class="headerlink" title="回调函数行参-request 对象 常用 api"></a>回调函数行参-request 对象 常用 api</h4><p><code>http.IncomingMessage</code></p><ul><li>.headers 报文头</li><li>.rawHeaders 原生报文头（和 headers 的区别是：headers 返回<code>key1:val1,key2:val2...</code>的对象，而 rawHeaders 返回<code>[key1,val1,key2,val2...]</code>）</li><li>.httpVersion 拿到请求客户端所使用的 http 协议版本</li><li>.method 客户端请求方式 get、post、delete 等</li><li>.url 获取本次请求的路径 不包含主机名称 端口号 域名等</li></ul><h4 id="回调函数行参-response-对象-常用-api"><a href="#回调函数行参-response-对象-常用-api" class="headerlink" title="回调函数行参-response 对象 常用 api"></a>回调函数行参-response 对象 常用 api</h4><p><code>http.httpServerResponse</code></p><ul><li>.setHeader() 设置响应报文头</li><li>.statusCode = 404 设置 http 响应状态码</li><li>.statusMessage = ‘message’ 设置 http 响应状态码对应的消息</li><li>.writeHead() 直接向客户端写入 http 响应报文头,优先级大于其他所有，如果没写这个，end()时默认执行。如 res.writeHead(404, ‘not found’, {‘Content-Type’: ‘text/html;charset=utf-8’})</li><li>.write() 响应内容</li><li>.end() 通知服务器 所有响应头和响应主体已被发送，服务器将其视为已完成</li></ul><h3 id="NPM-amp-NRM"><a href="#NPM-amp-NRM" class="headerlink" title="NPM &amp; NRM"></a>NPM &amp; NRM</h3><h1 id="Express-框架"><a href="#Express-框架" class="headerlink" title="Express 框架"></a>Express 框架</h1><p>基于 NodeJs 的 web 开发框架</p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><ul><li>实现路由功能 没必要自己写很多 if(req.url) else</li><li>中间件(函数)功能 把监听 request 事件拆分成了很多方法</li><li>对 req 和 res 对象的扩展</li><li>本身并没有模版引擎，可以集成其他模版引擎</li></ul><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><ol><li>get/post/put/delete…</li></ol><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** * 通过中间件监听指定的路由的请求 * 支持：put/delete/get/post 等http methods * 虚拟路径pathname 接受 正则RegExp 匹配 */</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 只监听get请求</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"在首面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/**   * send()相当于原生的end();   * 区别如下：   * 1. send()自动封装了很多比如setHeader(‘Content-Type’, ‘text/html;charset=utf-8’)等优化   * 2. end()只接受string or Buffer；send()可以是 string, Buffer, Object or Array   */</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token regex">/^\/index(\/.+)*$/</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"在index及子路径下 的 get请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"post add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>use</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * mark 当两次相同路由匹配，执行了不同的express.static到不同文件夹下请求回调，则会优先第一次回调结果。逻辑是先找第一个资源 找不到的话再找第二个 */</span><span class="token keyword">const</span> fn <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"static"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 处理静态资源的方法，指定静态资源路径</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 实现所有静态资源 托管</span><span class="token comment" spellcheck="true">/** * use 和 以上几种 method 的区别是： * 1. 路由匹配时 不限定方法，什么请求方法都可以 * 2. 请求路径中的第一部分(以/分割)只要与 /index 相等即可，并不要求pathname === */</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/home"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"在home及子路径下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>all</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * all * 1. 路由匹配时 不限定方法，什么请求方法都可以 * 2. 请求路径中 pathname 必须 === 完全匹配 */</span>app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">"/all"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>paramas</li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * req.params获取路由中的参数 * :开头 表示占位符 * 并且需要严格匹配占位符数量 */</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/news/:year/:month/:day"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="res-API"><a href="#res-API" class="headerlink" title="res API"></a>res API</h2><pre class=" language-javascript"><code class="language-javascript">res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 将object或array转为json作为响应发，等同与res.send(json)</span>res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token punctuation">[</span>状态码默认<span class="token number">302</span><span class="token punctuation">]</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重定向 封装原生流程：1. 设置状态码res.statusCode = 301或302 2. 设置消息 res.statusMessage = '重定向' 3. 设置相应报文头setHeader('location', 'path') 4. res.end()</span>res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"https://google.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 封装原生的 readFile('xx.txt', (err,data)=>{res.end(data)})</span>res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"文件不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 封装原生流程： 1. 设置状态码res.statusCode = 301或302 2. 设置消息 res.statusMessage = '重定向' 3. res.end()</span><span class="token comment" spellcheck="true">/** * res.render(viewpath模版文件路径 [,locals一个替换模版中占位符key的值val的object] [, callback(err, html)]) * 需要给express配置一个模版引擎render才能工作，比如jade，ejs，pug, 然后在应用中进行如下设置才能让Express渲染模版文件 * 1. views 放模版文件的目录，比如 app.set('views', './views') * 2. view engine 模版引擎，比如 app.set('view engine', 'ejs') * 3. res.render('xx.html', {username: 'x'}, (err,html)=>{}) */</span></code></pre><h2 id="req-API"><a href="#req-API" class="headerlink" title="req API"></a>req API</h2><h2 id="拆分封装-config-amp-router"><a href="#拆分封装-config-amp-router" class="headerlink" title="拆分封装 config &amp; router"></a>拆分封装 config &amp; router</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 不推荐该方法</span><span class="token comment" spellcheck="true">// in router.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span> <span class="token punctuation">{</span>  app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'所有'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// in server.js</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>router<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">router</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span></code></pre><p>更推荐如下</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// in handleRouter.js 封装所有路由监听回调</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>index <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'这里是handler index'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// in router.js</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> handler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./handleRouter'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个router对象</span>router<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> handler<span class="token punctuation">.</span>index<span class="token punctuation">)</span>router<span class="token punctuation">.</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'首页'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token comment" spellcheck="true">// in server.js</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>router<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 设置app与router相关联，此处router是作为中间件 既是object又是function</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> router<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 关键点去看下use源码逻辑 并且tips一下：等价于app.use(function(req,res){}) 即此处 app.use(router)</span></code></pre><hr><p><a href="https://www.processon.com/view/link/5d4b852ee4b07c4cf3069fec">node 全栈课程大纲</a></p><blockquote><p><a href="https://stackoverflow.com/questions/40143357/do-you-put-babel-and-webpack-in-devdependencies-or-dependencies/40143446#40143446">devDependencies vs dependencies</a></p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>全局安装 <code>npm i nodemon -g</code> 代替 node 自动重启 <code>nodemon file.js</code></p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ol><li>bash 运行： <code>node xx.js</code></li><li>nodemon</li><li>vs code 进行 debug: RUN and Debug</li></ol><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p><code>npm install jest -g</code><br><code>__test__ &gt; xxname.spec.js</code><br><code>jest foldername --watch</code></p><pre class=" language-js"><code class="language-js"><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'测试备注名'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>'<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>index<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>  <span class="token function">expect</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toBe</span><span class="token punctuation">(</span><span class="token string">'期望值'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="测试代码-自动生成工具"><a href="#测试代码-自动生成工具" class="headerlink" title="测试代码 自动生成工具"></a>测试代码 自动生成工具</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.spec.js</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"集成测试 测试生成测试代码文件"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 删除测试文件夹</span>  fs<span class="token punctuation">.</span><span class="token function">rmdirSync</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">,</span> <span class="token string">"/data/__test__"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    recursive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 递归为true 则同时迭代清除文件夹下的所有文件</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"../index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  src<span class="token punctuation">.</span><span class="token function">getJsetSource</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">,</span> <span class="token string">"/data"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">TestGenerator</span> <span class="token punctuation">{</span>  <span class="token function">getJsetSource</span><span class="token punctuation">(</span>sourcePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> testPath <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sourcePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/__test__`</span></span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>testPath<span class="token punctuation">)</span><span class="token punctuation">)</span> fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>testPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 遍历代码文件</span>    <span class="token keyword">let</span> list <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>sourcePath<span class="token punctuation">)</span><span class="token punctuation">;</span>    list      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sourcePath<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>v<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 添加为完整路径</span>      <span class="token comment" spellcheck="true">// 过滤文件</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 排除测试代码</span>      <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> v<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">".spec"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">genTestFile</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">genTestFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> testFileName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTestFileName</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 判断此文件是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>testFileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`该测试代码已存在</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>testFileName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">const</span> mod <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> source<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> mod <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> baseName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>      source <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>mod<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTestSource</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> baseName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> mod <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> baseName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>      source <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTestSource</span><span class="token punctuation">(</span>baseName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">,</span> baseName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>testFileName<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getTestSource</span><span class="token punctuation">(</span>methodName<span class="token punctuation">,</span> classFile<span class="token punctuation">,</span> isClass <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`test('TEST </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>methodName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">', ()=>{  const </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>    isClass <span class="token operator">?</span> <span class="token string">"{"</span> <span class="token operator">+</span> methodName <span class="token operator">+</span> "<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">" : methodName  } = require('../</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>classFile<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">')  const ret = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>methodName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">()  // expect(ret)  //  .toBe('test return')})    `</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">getTestFileName</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> dirName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">dirname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> baseName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> extName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">extname</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> testName <span class="token operator">=</span> baseName<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>extName<span class="token punctuation">,</span> <span class="token template-string"><span class="token string">`.spec</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>extName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      root<span class="token punctuation">:</span> dirName <span class="token operator">+</span> <span class="token string">"/__test__/"</span><span class="token punctuation">,</span>      base<span class="token punctuation">:</span> testName<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h1 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h1><p><a href="https://www.josephxia.com/document/node/">教程链接</a></p><ul><li>js 的执行环境是单线程</li><li>I/O 处理需要回调函数异步处理（异步 I/O）</li><li>前端异步 IO 可以消除 UI 阻塞，提高用户体验</li><li>后端异步可以提高 CPU 和内存利用率</li></ul><p>javascript 异步解决方案的进化</p><ul><li>callback</li><li>promise</li><li>generator</li><li>async &amp; await:<blockquote><p>任何一个 await 语句后面的 Promise 对象变为 reject 状态，那么整个 async 函数都会中断执行。<br>async 函数返回的 Promise 对象，必须等到内部所有 await 命令后面的 Promise 对象执行完，才会发生状态改变，除非遇到 return 语句或者抛出错误。也就是说，只有 async 函数内部的异步操作执行完，才会执行 then 方法指定的回调函数。</p></blockquote></li><li>eventEmitter 事件监听方式 event.emit()&amp;event.on()</li></ul><h1 id="node-js-基础"><a href="#node-js-基础" class="headerlink" title="node.js 基础"></a>node.js 基础</h1><h2 id="I-O-处理"><a href="#I-O-处理" class="headerlink" title="I/O 处理"></a>I/O 处理</h2><ul><li>同步阻塞</li><li>同步非阻塞</li><li>异步阻塞</li><li>异步非阻塞</li></ul><h2 id="node-文档"><a href="#node-文档" class="headerlink" title="node 文档"></a>node 文档</h2><p>英文 <a href="https://nodejs.org/dist/latest-v10.x/docs/api/">https://nodejs.org/dist/latest-v10.x/docs/api/</a><br>中文 <a href="http://nodejs.cn/api/">http://nodejs.cn/api/</a></p><h2 id="基础-API"><a href="#基础-API" class="headerlink" title="基础 API"></a>基础 API</h2><ul><li>readFileSync &amp; readFile</li><li>promisify<br><code>const &#123; promisify &#125; = require(&#39;util&#39;)</code> <code>const readFile = promisify(fs.readFile)</code></li><li>Buffer 读取数据类型为 Buffer。用于在 TCP 流、文件系统操作、以及其他上下文中与八位字节流进行交互。 八位字节组 成的数组，可以有效的在 JS 中存储二进制数据</li><li>readFile 和 writeFile 是会占用服务器缓存空间的，所以用 stream</li><li>Http 创建一个 http 服务器<ul><li>response.end() 即 中止这个 stream</li><li>流 stream</li><li><a href="https://www.jianshu.com/p/4418de5d6183">res.setHeader()和 res.writeHead()</a></li></ul></li></ul><h2 id="CLI-工具"><a href="#CLI-工具" class="headerlink" title="CLI 工具"></a>CLI 工具</h2><p>实现一个 cli 工具（vue 路由约定）</p><ul><li>npm init</li><li>新建脚本 xx.js，开头是<code>#!/usr/bin/env node</code>对 shell 指定使用 node 解析脚本</li><li>在 package.json &gt; bin &gt; xx.js 指定开始脚本<ul><li>init<strong>初始化 clone &amp; spawn &amp; open</strong>: spawn</li><li>refresh<strong>约定路由</strong>: hbs(<a href="https://zhuanlan.zhihu.com/p/32742178">handlebars 模版引擎</a>/<a href="https://www.jianshu.com/p/6dccc8459cd8">hbs 最佳实践</a>)</li><li>serve</li></ul></li><li><a href="https://www.jianshu.com/p/aaa7db89a5b2">npm link</a> <a href="https://juejin.im/entry/6844903625899294727">链接 2</a> 其实就是相当于 ln 指令操作</li><li>publish 发布自己的库 执行<code>publish.sh</code>脚本</li></ul><h2 id="Koa-源码"><a href="#Koa-源码" class="headerlink" title="Koa 源码"></a>Koa 源码</h2><ul><li>koa 的产生原因： 原生 http 的不足：1.令人困惑的 request 和 response;2. 对描述复杂业务逻辑的描述比如 AOP(Aspect-oriented-programing)/切面描述需要</li><li>为了简化 API，引入上下文 context 概念，核心是 <code>洋葱圈模型 - use, next</code></li><li>简单实现一个 koa 框架<ul><li>index.js<ul><li>use</li><li>listen</li></ul></li><li>kkb.js<ul><li>use<ul><li>createContext context.js<ul><li>request.js</li><li>response.js</li></ul></li></ul></li><li>listen</li></ul></li></ul></li></ul><h2 id="网络工程学"><a href="#网络工程学" class="headerlink" title="网络工程学"></a>网络工程学</h2><ul><li><p><a href="https://blog.csdn.net/mccand1234/article/details/51590804">OSI 7 层协议和 TCP/IP 4 层协议</a><br><img src="https://i.loli.net/2020/08/17/iUX4ZmkSJxytK2O.png" alt="图示"></p></li><li><p>TCP 面向可靠性连接，UDP 不可靠</p></li><li><p>TELNET 传输的是明文，SSH 更安全</p></li><li><p>TCP 协议写个聊天室 js <code>require(&#39;net&#39;)</code></p></li><li><p>**<a href="https://www.processon.com/view/link/5ec52841e0b34d5f261e14e0#map">http 协议 - 前端角度</a><a href="https://processon.com/view/5c5157f7e4b0f0908a8c996e">http 协议- 网工角度</a>**查看 req &amp; res 例子： <code>curl -v http://www.baidu.com</code></p><ul><li>request: 请求行（method.etc），消息报头（Accept 系,Content-Type.etc），请求正文(根据 Content-Type 确定)</li><li>response： 状态行（1xx…5xx），实体报头，响应正文</li><li><a href="https://juejin.im/post/6844904116972421128">http 缓存</a></li><li>http 例子， img.src 埋点</li><li>浏览器跨域三层封印： http request 发送时，已经发送给了后端也返回给了前端，但是浏览器不显示 response。协议端口域名 3 者任一不同就是非同源.<ul><li>node 层设置<code>res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;或特写某个url)</code></li><li><a href="https://www.jianshu.com/p/b55086cbd9af">预检请求，即在请求阶段被浏览器拦截</a> option</li><li>如果携带 cookie 信息：<code>res.setHeader(&#39;Access-Control-Allow-Credentials&#39;, &#39;true&#39;)</code></li><li>服务器反向代理： 让同源服务器去请求非同源服务器，返回给同源的前端。<code>const proxy = require(&#39;http-proxy-middleware&#39;)</code></li></ul></li></ul></li><li><p>bodyParer</p></li><li><p>实现一个爬虫 <code>request</code></p></li><li><p>又补充了 http/socket.io 两种方法写 im 通讯程序</p></li><li><p>用 socket.io 写了浏览器模拟 terminal，推拉流：后端的流推到前端</p></li><li><p>monaco-editor 编辑器，尤雨溪也写了个基于这个的 docker 在线编辑器</p></li></ul><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><p>数据就是放在磁盘里，所谓的持久化，就是指 关了机再开还是能读取到数据</p><ul><li><p>文件系统 fs</p></li><li><p>mysql 和 SQL 语句</p></li><li><p>数据库中间件 ORM（Object Relation Mapping），把数据库映射成对象，像操作对象一样操作数据库： <a href="https://sequelize.org/">sequelize</a><br><a href="https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/other-topics/transactions.md">Transactions - 事务</a></p></li><li><p><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/_more_complicated_searches.html">ELK elasticsearch 做复杂查询</a></p></li><li><p>MySql Workbench: 画 ER 图的工具；不存在多对多的关系，多对多之间一定是用一个中间 mapping 表来联系；反向工程：比如用 Workbench 通过数据库反向生成 ER 表</p></li><li><p>用 sequelize 实现简单的电商系统 ./shop 文件夹</p></li><li><p><code>mongodb</code> 非传统的关系型数据库</p><ul><li>eventEmmiter 在文件夹./mongo &amp; initData.js</li><li>一个水果商店 例子 在文件夹./example</li><li><code>mongoose</code> 提供的本质就是 domain 领域模型，而一旦定义了模型就可以自动基于约定产生 api</li></ul></li><li><p>开发方法论<br>原型 -&gt;ER -&gt; DB -&gt; 后端代码 -&gt; UI<br>有 sequlee 后改变成了<br>原型 -&gt; 后端代码（domain 领域模型）-&gt; (DB -&gt; ER 两者沦为持久化服务)-&gt; api -&gt;UI</p></li><li><p>一个 team 需要的东西：<br>技术框架<br>开发方法论<br>管理方法</p></li><li><p>CRUD 基于约定，基于 restful</p></li><li><p>UI admin 基于约定</p></li><li><p>restful api 实现小例子在 ./restful 文件夹</p></li></ul><h2 id="鉴权"><a href="#鉴权" class="headerlink" title="鉴权"></a>鉴权</h2><h3 id="三种常见鉴权方式"><a href="#三种常见鉴权方式" class="headerlink" title="三种常见鉴权方式"></a>三种常见鉴权方式</h3><ul><li>Session/Cookie</li><li>Token</li><li>OAuth</li><li>SSO</li></ul><h3 id="Session-Cookie"><a href="#Session-Cookie" class="headerlink" title="Session/Cookie"></a>Session/Cookie</h3><p>http 协议本身是无状态的</p><ul><li>cookie 有大小限制，格式问题，明文状态不安全</li><li>session 所以 后端放一个 key-value 的集合，前端只存一个 key</li><li>koa-session</li><li>hash 防篡改</li><li>使用 redis 存储 session;redis 是高性能的 key-value 数据库，支持持久化，但是绝大多时间存在内存中</li><li>例子：使用 koa-session，koa-router 等 鉴权例子 在文件夹./session 里</li></ul><h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><ul><li>session 的不足，离开浏览器玩不转；并且服务器需要状态保持</li><li>token 是密码形式，不需要服务器保持状态。</li><li>token 是有 3 段(令牌头 加密规则 base64 加密；payload(载和)token 内容「并且一般不要放敏感信息」 base64 加密；根据密钥对前两两部分全文 hash 运算的结果)组成</li><li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">jwt 验证的原理</a></li></ul><h3 id="OAuth"><a href="#OAuth" class="headerlink" title="OAuth"></a>OAuth</h3><p><img src="https://i.loli.net/2020/08/20/AqIMQeOPtdscmjD.png" alt="整个流程图解"></p><h3 id="SSO"><a href="#SSO" class="headerlink" title="SSO"></a>SSO</h3><p><img src="https://i.loli.net/2020/08/20/ihyZjg4Hf9BbvGz.png" alt="整个流程图解"></p><h2 id="eggjs"><a href="#eggjs" class="headerlink" title="eggjs"></a>eggjs</h2><h2 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h2><h2 id="docker-部署"><a href="#docker-部署" class="headerlink" title="docker 部署"></a>docker 部署</h2><h1 id="todo"><a href="#todo" class="headerlink" title="todo"></a>todo</h1><p><code>path</code>相关方法</p><ul><li>path.dirname</li><li>path.basename</li><li>path.extname</li><li>path.resolve</li><li>__dirname</li></ul><p><code>fs</code>相关方法</p><ul><li>fs.mkdirSync</li><li>fs.rmdirSync</li><li>fs.existsSync</li><li>fs.statSync 是不是一个文件</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p><a href="https://github.com/nanjixiong218/analys-middlewares/tree/master/src">Koa, Redux, Express 中间件对比</a> &gt; <a href="https://segmentfault.com/a/1190000016707187#item-7-5">对 Compose 详尽的总结</a> &gt; <a href="https://blog.csdn.net/liuwenzhe2008/article/details/70199520">责任链模式</a></p></blockquote><blockquote><p><a href="https://www.ruanyifeng.com/blog/2011/09/restful.html">restful 风格</a> &gt; <a href="https://graphql.org/">GraphQL 下一代接口风格</a> &gt; <a href="https://www.keystonejs.com/">一个用 node 和 graphQL 风格 API 写的 博客系统</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 浏览器跨越问题 几种方案</title>
      <link href="/2020/01/09/za-tan-js-liu-lan-qi-kua-yue-wen-ti/"/>
      <url>/2020/01/09/za-tan-js-liu-lan-qi-kua-yue-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> jsonp <span class="token operator">=</span> <span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Axios.JSONP 至少需要一个url参数!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> JSONP <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    JSONP<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">;</span>    JSONP<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>JSONP<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">jsonp</span><span class="token punctuation">(</span>  <span class="token string">"http://192.168.0.11:8079/HWCollaborationDashboard/passport/removeFreeLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><a href="https://juejin.im/post/5cc2e3ecf265da03904c1e06#heading-19">CORB 警告</a></p></blockquote><h2 id="n"><a href="#n" class="headerlink" title="n"></a>n</h2>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex &amp; Grid布局实现 多行对齐排序</title>
      <link href="/2020/01/08/za-tan-css-flex-grid-bu-ju-shi-xian-gutter-between-align-to-grid/"/>
      <url>/2020/01/08/za-tan-css-flex-grid-bu-ju-shi-xian-gutter-between-align-to-grid/</url>
      
        <content type="html"><![CDATA[<h1 id="css-实现-flex-布局下，带间隔-between-最后一行自动对齐表格"><a href="#css-实现-flex-布局下，带间隔-between-最后一行自动对齐表格" class="headerlink" title="css 实现 flex 布局下，带间隔 between 最后一行自动对齐表格"></a>css 实现 flex 布局下，带间隔 between 最后一行自动对齐表格</h1><p>目标效果：<br><a href="https://imgchr.com/i/Jx524S"><img src="https://s1.ax1x.com/2020/05/03/Jx524S.md.png" alt="Jx524S.md.png"></a></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>commentBrands<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.commentBrands</span> </span><span class="token punctuation">{</span>  <span class="token selector">display: flex;  flex-flow: row wrap;  justify-content: space-between;  margin: 0 -0<span class="token class">.08rem</span>;  &amp;<span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token property">flex</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">> img </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span><span class="token number">100%</span> / <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0.08</span>rem<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Grid_Layout">Grid布局</a></h1><p>简单几行代替上面代码</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.commentBrands</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span>  <span class="token property">grid-template-columns</span><span class="token punctuation">:</span> <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">6</span>, <span class="token number">1</span>fr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">grid-gap</span><span class="token punctuation">:</span> <span class="token number">0.08</span>rem<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="Grid-容器属性"><a href="#Grid-容器属性" class="headerlink" title="Grid 容器属性"></a>Grid 容器属性</h1><p><code>display: grid;</code> / <code>display: inline-grid;</code></p><ul><li><code>grid</code>: <code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写</li></ul><h2 id="显式网格属性"><a href="#显式网格属性" class="headerlink" title="显式网格属性"></a>显式网格属性</h2><ul><li><code>grid-template</code> 是下面<code>grid-template-columns</code>、<code>grid-template-rows</code>和<code>grid-template-areas</code>这三个属性的合并简写形式</li><li><code>grid-template-columns</code> 定义每一列的列宽 </li><li><code>grid-template-rows</code> 定义每一行的行高</li><li><code>grid-template-areas</code> 网格布局允许指定”区域”（area），一个区域由单个或多个单元格组成<strong>非矩形的网格区块是无效的</strong>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/grid-template-areas">MDN</a>,网格区块(grid areas)和网格项(grid item)沒有关联，但是它们可以和一些网格定位属性(grid-placement properties)关联起来<pre class=" language-css"><code class="language-css"><span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a b c'</span>                     <span class="token string">'d e f'</span>                     <span class="token string">'g h i'</span><span class="token punctuation">;</span></code></pre>或者多个单元格合并成一个区域<pre class=" language-css"><code class="language-css"><span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'header header header'</span>                   <span class="token string">'main main sidebar'</span>                   <span class="token string">'footer footer footer'</span><span class="token punctuation">;</span></code></pre>如果某些区域不需要利用，则使用”点”（.）表示。<pre class=" language-css"><code class="language-css"><span class="token property">grid-template-areas</span><span class="token punctuation">:</span> <span class="token string">'a . c'</span>                   <span class="token string">'d . f'</span>                   <span class="token string">'g . i'</span><span class="token punctuation">;</span></code></pre><blockquote><p>区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。</p></blockquote><h3 id="grid-template-columns-和-grid-template-rows-的取值："><a href="#grid-template-columns-和-grid-template-rows-的取值：" class="headerlink" title="grid-template-columns 和 grid-template-rows 的取值："></a>grid-template-columns 和 grid-template-rows 的取值：</h3></li><li><code>固定值/百分比</code>：<strong>grid-template-columns: 100px 100px 100px</strong>;  <strong>grid-template-columns: 100px 30% 100px</strong>;</li><li><code>repeat</code><br>如<strong>grid-template-columns: 100px 100px 100px;</strong> 等效于<strong>repeat(3, 100px);</strong><br><strong>grid-template-columns: 100px 20px 100px 20px</strong> 等效于<strong>repeat(2, 100px 20px)</strong></li><li><code>auto-fill</code> 自动填充<br><strong>grid-template-columns: repeat(auto-fill, 100px)</strong> 表示每列宽度100px，然后自动填充，直到容器不能放置更多的列</li><li><code>fr</code> 片段fraction，相对百分比<br><strong>grid-template-columns: 1fr 150px 1fr 2fr;</strong> 表示第一列等宽第三列，第四列是第一列的2倍，第二列固定150px</li><li><code>minmax</code> 产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。<br><strong>grid-template-columns: 1fr 1fr minmax(100px, 1fr);</strong> 表示第三列列宽不小于100px，不大于1fr</li><li><code>auto</code> 表示由浏览器自己决定长度<br><strong>grid-template-columns: 100px auto 100px;</strong> 第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了min-width，且这个值大于最大宽度</li><li>网格线的名称<br>属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。<br><strong>grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4];</strong> 3行的grid中，有4根<code>[r1-4]</code>水平网格线<br><em>允许同一根线有多个名字，比如[fifth-line row-5]</em></li><li>的<h2 id="隐式网格属性"><a href="#隐式网格属性" class="headerlink" title="隐式网格属性"></a>隐式网格属性</h2></li><li><code>grid-auto-columns</code> 用来设置，浏览器自动创建的多余网格(即不在<code>grid-template-columns</code>属性中定义的)的列宽</li><li><code>grid-auto-rows</code> 用来设置，浏览器自动创建的多余网格(即不在<code>grid-template-rows</code>属性中定义的)的行高</li><li><code>grid-auto-flow</code>: <code>row / column / row dense / column dense</code>划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”<code>row</code>，即把子元素依次先填满第一行，再开始放入第二行；加<code>dense</code>表示 当一行(列)中有剩余空白区域时，从下一行(列)补上<h2 id="间距属性"><a href="#间距属性" class="headerlink" title="间距属性"></a>间距属性</h2></li><li><code>[grid-]gap</code> 下面两个的合并简写形式 <code>gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;;</code> <em>省略了第二个值，浏览器认为第二个值等于第一个值</em></li><li><code>[grid-]row-gap</code> 设置行与行的间隔（行间距）<code>row-gap: 20px;</code></li><li><code>[grid-]column-gap</code> 设置列与列的间隔（列间距）<code>grid-column-gap: 20px;</code><h2 id="对齐属性"><a href="#对齐属性" class="headerlink" title="对齐属性"></a>对齐属性</h2><h3 id="容器对齐"><a href="#容器对齐" class="headerlink" title="容器对齐"></a>容器对齐</h3></li><li><code>justify-content</code> 整个内容区域在容器里面的水平位置（左中右）<code>justify-content: start | end | center | stretch | space-around | space-between | space-evenly</code></li><li><code>align-content</code> 整个内容区域的垂直位置（上中下）<code>align-content: start | end | center | stretch | space-around | space-between | space-evenly</code></li><li><code>place-content</code> 上面两个的 缩写 <code>place-content: &lt;align-content&gt; &lt;justify-content&gt;</code><h3 id="单元格对齐"><a href="#单元格对齐" class="headerlink" title="单元格对齐"></a>单元格对齐</h3></li><li><code>justify-items</code> 设置单元格内容的水平位置（左中右）<code>justify-items: start | end | center | stretch;</code></li><li><code>align-items</code> 设置单元格内容的垂直位置（上中下）<code>align-items: start | end | center | stretch;</code></li><li><code>place-items</code> 上面两个 的合并简写形式 <code>place-items: &lt;align-items&gt; &lt;justify-items&gt;;</code> <em>如果省略第二个值，则浏览器认为与第一个值相等</em></li></ul><h1 id="Grid-项目属性"><a href="#Grid-项目属性" class="headerlink" title="Grid 项目属性"></a>Grid 项目属性</h1><h2 id="定位属性"><a href="#定位属性" class="headerlink" title="定位属性"></a>定位属性</h2><ul><li><p><code>grid-column-start</code> 指定项目 其左边框 定位在容器的哪个垂直网格线[c1-n]</p></li><li><p><code>grid-column-end</code> 指定项目 其右边框 定位在容器的哪个垂直网格线[c1-n]</p></li><li><p><code>grid-column</code> 是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式 <code>grid-column: &lt;start-line&gt; / &lt;end-line&gt;;</code> <em>斜杠以及后面的部分可以省略，默认跨越一个网格</em></p></li><li><p><code>grid-row-start</code> 指定项目 上边框 定位在容器的哪个水平网格线[r1-n]</p></li><li><p><code>grid-row-end</code> 指定项目 下边框 定位在容器的哪个水平网格线[r1-n]</p></li><li><p><code>grid-row</code> 是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式; <code>grid-row: &lt;start-line&gt; / &lt;end-line&gt;;</code> 如<code>grid-row: 1 / 2; grid-row: 1 / span 2;</code> <em>斜杠以及后面的部分可以省略，默认跨越一个网格</em></p></li><li><p><code>grid-area</code> </p><ul><li>指定项目放在（grid-template-areas定义的）哪一个区域；</li><li>还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。<code>grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;</code><br>其值 可以是 </li></ul></li><li><p>1-n的数字；</p></li><li><p>或者<code>grid-template-areas</code>中定义的<code>区域名-start/end</code></p></li><li><p><code>span</code> 关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格，如<code>grid-column-start: span 2;</code> 等同于<code>grid-column-end: span 2;</code>表示其右边界相当于原始左边界往右跨占2格</p></li></ul><h3 id="对齐属性-1"><a href="#对齐属性-1" class="headerlink" title="对齐属性"></a>对齐属性</h3><ul><li><code>justify-self</code> 设置单元格内容的水平位置（左中右）,同<code>justify-items</code></li><li><code>align-self</code> 设置单元格内容的垂直位置（上中下）,同<code>align-items</code></li><li><code>place-self</code> 是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式. <code>place-self: &lt;align-self&gt; &lt;justify-self&gt;;</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack 多入口多出口打包</title>
      <link href="/2020/01/03/za-tan-webpack-duo-ru-kou-duo-chu-kou-da-bao/"/>
      <url>/2020/01/03/za-tan-webpack-duo-ru-kou-duo-chu-kou-da-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="需求背景"><a href="#需求背景" class="headerlink" title="需求背景"></a>需求背景</h2><p>某天老板看到了京东商城不一样的二级域名，但是他们的 UI 风格和某些页面块是完全一致的。也要这样，项目代码根据业务构建目录，用同一个 package.json，打包 3 个二级目录。。。OK.</p><p>同时有两个硬核需求：</p><p>项目越来越多，维护量较大。起初，只有一两个项目时，代码管理和开发还是比较轻松的。但当老系统逐渐拆分，新项目的不断启动，问题就来了。项目越来越多，每一个都需要单独 vue-cli 生成，然后配置一堆参数。当一个配置的参数有变，所有的其他项目都需要联动调整，维护量较大。</p><p>每个项目，所属的业务不同。但是整体上应当： 系统 UI 一致、部分相同业务逻辑代码处理一致。重复 coding 很多，维护量也很大。当编码不受控时，各个项目的处理方式也可能各不相同。</p><p><strong>解决方法</strong><br>对于各种发现的问题，简单构想一下可以整合前台项目，通过 Webpack 按项目打包生成多个 SPA。</p><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>entry 入口多个</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// entry: [</span><span class="token comment" spellcheck="true">//     "babel-polyfill",</span><span class="token comment" spellcheck="true">//     path.join(__dirname, './src/index.js')</span><span class="token comment" spellcheck="true">// ],</span>entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index1<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    index2<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index2.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>区分出口文件名和目录</p><pre class=" language-js"><code class="language-js">output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name]/[name].bundle.js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    chunkFilename<span class="token punctuation">:</span> <span class="token string">'[name].bundle.js'</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>多次<code>HtmlWebpackPlugin</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'测试1'</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'index1/index.html'</span><span class="token punctuation">,</span>    chunks<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'index1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'2'</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'index2/index2.html'</span><span class="token punctuation">,</span>    chunks<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'index2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><p>生产环境没问题了，开发环境 dev-server 需要额外配置一下</p><p>以上用了多页配置，加上了 HtmlWebpackPlugin 实现了，但是每次只能启动一个单页。虽然两个模板关系不是特别紧密，但是如果能一次直接启动全部肯定是更好的。</p><p>devServer.historyApiFallback。参照文档描述，只需要自己指定路由重写机制，就可以实现开发模式多页面注入并导航。</p><pre class=" language-js"><code class="language-js">devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rewrites<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\/$/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">'/Home/index.html'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/^\/Course/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> <span class="token string">'/Course/index.html'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="封装-示例"><a href="#封装-示例" class="headerlink" title="封装 示例"></a>封装 示例</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//config.js</span><span class="token keyword">const</span> glob <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"glob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> getEntrys <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>entryPattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> entrys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> entry <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>entryPattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    path <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    entry<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token template-string"><span class="token string">`./src/pages/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.js`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> entry<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> getOutHtmls <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>entryPattern<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> outHtmls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  glob<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>entryPattern<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> filename <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> template <span class="token operator">=</span> path<span class="token punctuation">;</span>    pageName <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    outHtmls<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>      <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        filename<span class="token punctuation">,</span>        template<span class="token punctuation">,</span>        inject<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        chunks<span class="token punctuation">:</span> <span class="token punctuation">[</span>pageName<span class="token punctuation">,</span> <span class="token string">"common"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>          removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          removeAttributeQuotes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// chunksSortMode: 'dependency'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> outHtmls<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  getEntrys<span class="token punctuation">,</span>  getOutHtmls<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// webpack.config.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> CleanWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ManifestWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-manifest-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"extract-text-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> multipe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./config/config.js"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> getEntrys <span class="token operator">=</span> multipe<span class="token punctuation">.</span>getEntrys<span class="token punctuation">;</span><span class="token keyword">const</span> getOutHtmls <span class="token operator">=</span> multipe<span class="token punctuation">.</span>getOutHtmls<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据具体目录结构来确定路径</span><span class="token keyword">const</span> entryPattern <span class="token operator">=</span> <span class="token string">"./src/pages/**.html"</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token function">getEntrys</span><span class="token punctuation">(</span>entryPattern<span class="token punctuation">)</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">"[name]/js/[name].[hash].bundle.js"</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"@"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      config<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./config"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"babel-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token string">"/node_modules"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          fallback<span class="token punctuation">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>          use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"css-loader?importLoaders=1&amp;&amp;minimize"</span><span class="token punctuation">,</span> <span class="token string">"postcss-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token string">"/node_modules"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// LESS</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          fallback<span class="token punctuation">:</span> <span class="token string">"style-loader"</span><span class="token punctuation">,</span>          use<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">"css-loader?importLoaders=1&amp;&amp;minimize"</span><span class="token punctuation">,</span>            <span class="token string">"postcss-loader"</span><span class="token punctuation">,</span>            <span class="token string">"less-loader"</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|svg|jpg|gif)$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">"file-loader"</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> <span class="token string">"[name]/img/[name].[hash].[ext]"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> <span class="token string">"/node_modules"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">ManifestWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"dist"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">"common"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定公共 bundle 的名称。</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">"[name]/css/[name].[contenthash].css"</span><span class="token punctuation">,</span>      allChunks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">getOutHtmls</span><span class="token punctuation">(</span>entryPattern<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p><a href="https://blog.csdn.net/xyphf/article/details/79824777">教程来源</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>threeJS</title>
      <link href="/2019/12/26/bi-ji-threejs/"/>
      <url>/2019/12/26/bi-ji-threejs/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/mrdoob/three.js">https://github.com/mrdoob/three.js</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> webGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node-常用轮子整理</title>
      <link href="/2019/12/25/sui-bi-nodejs-chang-yong-lun-zi-zheng-li/"/>
      <url>/2019/12/25/sui-bi-nodejs-chang-yong-lun-zi-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><pre class=" language-json"><code class="language-json"><span class="token property">"autoprefixer"</span><span class="token operator">:</span> <span class="token string">"^7.1.2"</span><span class="token punctuation">,</span><span class="token property">"babel-core"</span><span class="token operator">:</span> <span class="token string">"^6.22.1"</span><span class="token punctuation">,</span><span class="token property">"babel-eslint"</span><span class="token operator">:</span> <span class="token string">"^8.2.1"</span><span class="token punctuation">,</span><span class="token property">"babel-helper-vue-jsx-merge-props"</span><span class="token operator">:</span> <span class="token string">"^2.0.3"</span><span class="token punctuation">,</span><span class="token property">"babel-jest"</span><span class="token operator">:</span> <span class="token string">"^21.0.2"</span><span class="token punctuation">,</span><span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^7.1.1"</span><span class="token punctuation">,</span><span class="token property">"babel-plugin-dynamic-import-node"</span><span class="token operator">:</span> <span class="token string">"^1.2.0"</span><span class="token punctuation">,</span><span class="token property">"babel-plugin-syntax-jsx"</span><span class="token operator">:</span> <span class="token string">"^6.18.0"</span><span class="token punctuation">,</span><span class="token property">"babel-plugin-transform-es2015-modules-commonjs"</span><span class="token operator">:</span> <span class="token string">"^6.26.0"</span><span class="token punctuation">,</span><span class="token property">"babel-plugin-transform-runtime"</span><span class="token operator">:</span> <span class="token string">"^6.22.0"</span><span class="token punctuation">,</span><span class="token property">"babel-plugin-transform-vue-jsx"</span><span class="token operator">:</span> <span class="token string">"^3.5.0"</span><span class="token punctuation">,</span><span class="token property">"babel-preset-env"</span><span class="token operator">:</span> <span class="token string">"^1.3.2"</span><span class="token punctuation">,</span><span class="token property">"babel-preset-stage-2"</span><span class="token operator">:</span> <span class="token string">"^6.22.0"</span><span class="token punctuation">,</span><span class="token property">"babel-register"</span><span class="token operator">:</span> <span class="token string">"^6.22.0"</span><span class="token punctuation">,</span><span class="token property">"chalk"</span><span class="token operator">:</span> <span class="token string">"^2.0.1"</span><span class="token punctuation">,</span><span class="token property">"chromedriver"</span><span class="token operator">:</span> <span class="token string">"^2.27.2"</span><span class="token punctuation">,</span><span class="token property">"copy-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^4.0.1"</span><span class="token punctuation">,</span><span class="token property">"cross-spawn"</span><span class="token operator">:</span> <span class="token string">"^5.0.1"</span><span class="token punctuation">,</span><span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^0.28.0"</span><span class="token punctuation">,</span><span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"^4.15.0"</span><span class="token punctuation">,</span><span class="token property">"eslint-config-standard"</span><span class="token operator">:</span> <span class="token string">"^10.2.1"</span><span class="token punctuation">,</span><span class="token property">"eslint-friendly-formatter"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span><span class="token property">"eslint-loader"</span><span class="token operator">:</span> <span class="token string">"^1.7.1"</span><span class="token punctuation">,</span><span class="token property">"eslint-plugin-import"</span><span class="token operator">:</span> <span class="token string">"^2.7.0"</span><span class="token punctuation">,</span><span class="token property">"eslint-plugin-node"</span><span class="token operator">:</span> <span class="token string">"^5.2.0"</span><span class="token punctuation">,</span><span class="token property">"eslint-plugin-promise"</span><span class="token operator">:</span> <span class="token string">"^3.4.0"</span><span class="token punctuation">,</span><span class="token property">"eslint-plugin-standard"</span><span class="token operator">:</span> <span class="token string">"^3.0.1"</span><span class="token punctuation">,</span><span class="token property">"eslint-plugin-vue"</span><span class="token operator">:</span> <span class="token string">"^4.0.0"</span><span class="token punctuation">,</span><span class="token property">"extract-text-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span><span class="token property">"file-loader"</span><span class="token operator">:</span> <span class="token string">"^1.1.4"</span><span class="token punctuation">,</span><span class="token property">"friendly-errors-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.6.1"</span><span class="token punctuation">,</span><span class="token property">"html-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^2.30.1"</span><span class="token punctuation">,</span><span class="token property">"jest"</span><span class="token operator">:</span> <span class="token string">"^22.0.4"</span><span class="token punctuation">,</span><span class="token property">"jest-serializer-vue"</span><span class="token operator">:</span> <span class="token string">"^0.3.0"</span><span class="token punctuation">,</span><span class="token property">"nightwatch"</span><span class="token operator">:</span> <span class="token string">"^0.9.12"</span><span class="token punctuation">,</span><span class="token property">"node-notifier"</span><span class="token operator">:</span> <span class="token string">"^5.1.2"</span><span class="token punctuation">,</span><span class="token property">"optimize-css-assets-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^3.2.0"</span><span class="token punctuation">,</span><span class="token property">"ora"</span><span class="token operator">:</span> <span class="token string">"^1.2.0"</span><span class="token punctuation">,</span><span class="token property">"portfinder"</span><span class="token operator">:</span> <span class="token string">"^1.0.13"</span><span class="token punctuation">,</span><span class="token property">"postcss-import"</span><span class="token operator">:</span> <span class="token string">"^11.0.0"</span><span class="token punctuation">,</span><span class="token property">"postcss-loader"</span><span class="token operator">:</span> <span class="token string">"^2.0.8"</span><span class="token punctuation">,</span><span class="token property">"postcss-url"</span><span class="token operator">:</span> <span class="token string">"^7.2.1"</span><span class="token punctuation">,</span><span class="token property">"rimraf"</span><span class="token operator">:</span> <span class="token string">"^2.6.0"</span><span class="token punctuation">,</span><span class="token property">"selenium-server"</span><span class="token operator">:</span> <span class="token string">"^3.0.1"</span><span class="token punctuation">,</span><span class="token property">"semver"</span><span class="token operator">:</span> <span class="token string">"^5.3.0"</span><span class="token punctuation">,</span><span class="token property">"shelljs"</span><span class="token operator">:</span> <span class="token string">"^0.7.6"</span><span class="token punctuation">,</span><span class="token property">"uglifyjs-webpack-plugin"</span><span class="token operator">:</span> <span class="token string">"^1.1.1"</span><span class="token punctuation">,</span><span class="token property">"url-loader"</span><span class="token operator">:</span> <span class="token string">"^0.5.8"</span><span class="token punctuation">,</span><span class="token property">"vue-jest"</span><span class="token operator">:</span> <span class="token string">"^1.0.2"</span><span class="token punctuation">,</span><span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"^13.3.0"</span><span class="token punctuation">,</span><span class="token property">"vue-style-loader"</span><span class="token operator">:</span> <span class="token string">"^3.0.1"</span><span class="token punctuation">,</span><span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.5.2"</span><span class="token punctuation">,</span><span class="token property">"webpack"</span><span class="token operator">:</span> <span class="token string">"^3.6.0"</span><span class="token punctuation">,</span><span class="token property">"webpack-bundle-analyzer"</span><span class="token operator">:</span> <span class="token string">"^2.9.0"</span><span class="token punctuation">,</span><span class="token property">"webpack-dev-server"</span><span class="token operator">:</span> <span class="token string">"^2.9.1"</span><span class="token punctuation">,</span><span class="token property">"webpack-merge"</span><span class="token operator">:</span> <span class="token string">"^4.1.0"</span></code></pre><h1 id="轮子介绍"><a href="#轮子介绍" class="headerlink" title="轮子介绍"></a>轮子介绍</h1><h2 id="babel-集合"><a href="#babel-集合" class="headerlink" title="babel 集合"></a>babel 集合</h2><ul><li><strong>babel-core</strong></li><li><strong>babel-polyfill</strong></li><li><strong>babel-helper-vue-jsx-merge-props</strong></li><li><strong>babel-loader</strong></li><li><strong>babel-plugin-import</strong></li><li><strong>babel-plugin-transform-remove-strict-mode</strong></li><li><strong>babel-plugin-dynamic-import-node</strong></li><li><strong>babel-plugin-syntax-jsx</strong></li><li><strong>babel-plugin-transform-es2015-modules-commonjs</strong></li><li><strong>babel-plugin-transform-runtime</strong></li><li><strong>babel-plugin-transform-vue-jsx</strong></li><li><strong>babel-preset-env</strong></li><li><strong>babel-preset-stage-0</strong></li><li><strong>babel-register</strong></li></ul><h2 id="webpack-集合"><a href="#webpack-集合" class="headerlink" title="webpack 集合"></a>webpack 集合</h2><ul><li><strong>webpack</strong></li><li><strong>webpack-bundle-analyzer</strong></li><li><strong>webpack-dev-server</strong></li><li><strong>webpack-merge</strong> ：用于合并 webpack 配置，一般会把 webpack 的<code>base</code>配置和<code>dev</code>配置和<code>prod</code>配置分开写，这个工具方便的合并<code>base</code>和<code>dev</code>配置</li><li><strong>clean-webpack-plugin</strong></li><li><strong>copy-webpack-plugin</strong></li><li><strong>uglifyjs-webpack-plugin</strong></li><li><strong>optimize-css-assets-webpack</strong></li><li><strong>extract-text-webpack-plugin</strong></li><li><strong>friendly-errors-webpack-plugin</strong> ：一个用于处理打包这个进程的插件，可以清除打包时候残留的控制台信息，并且可以在控制台打印出打包成功之后的文字提示，当然，对于打包错误之后的回调也是有的</li><li><strong>html-webpack-plugin</strong></li><li><strong>eslint-loader</strong></li><li><strong>style-loader</strong></li><li><strong>css-loader</strong></li><li><strong>file-loader</strong></li><li><strong>url-loader</strong></li></ul><h2 id="ESlint-集合"><a href="#ESlint-集合" class="headerlink" title="ESlint 集合"></a>ESlint 集合</h2><ul><li><strong>eslint</strong></li><li><strong>babel-eslint</strong></li><li><strong>eslint-config-standard</strong></li><li><strong>eslint-config-google</strong></li><li><strong>eslint-config-airbnb</strong></li><li><strong>eslint-friendly-formatter</strong></li><li><strong>eslint-plugin-import</strong></li><li><strong>eslint-plugin-node</strong></li><li><strong>eslint-plugin-promise</strong></li><li><strong>eslint-plugin-standard</strong></li><li><strong>eslint-plugin-vue</strong></li><li><strong>eslint-plugin-react</strong></li><li><strong>eslint-plugin-react-hooks</strong></li><li><strong>eslint-plugin-jsx-a11y</strong></li></ul><h2 id="测试框架-Jest、selenium-集合"><a href="#测试框架-Jest、selenium-集合" class="headerlink" title="测试框架 Jest、selenium 集合"></a>测试框架 Jest、selenium 集合</h2><ul><li><strong>jest</strong></li><li><strong>babel-jest</strong></li><li><strong>jest-serializer-vue</strong> ：自定义的序列化工具改进 jest 被保存的快照 <a href="https://vue-test-utils.vuejs.org/zh/guides/testing-single-file-components-with-jest.html">介绍示例</a></li><li><strong>vue-jest</strong></li><li><strong>selenium-server</strong> ：自动化测试框架<a href="https://zhuanlan.zhihu.com/p/52646463">selenium</a>的 Node 容器</li><li><strong>chromedriver</strong> ：是 google 为网站开发人员提供的自动化测试接口，它是 <strong>selenium2</strong> 和 <strong>chrome 浏览器</strong> 进行通信的桥梁，<a href="https://www.jianshu.com/p/31c8c9de8fcd">详细介绍</a></li><li><strong>nightwatch</strong> ：端到端的测试工具，内置断言库，基于 Selenium，<a href="https://zhuanlan.zhihu.com/p/48361267">非官方简介</a></li></ul><h2 id="Postcss、less、scss、stylus-集合"><a href="#Postcss、less、scss、stylus-集合" class="headerlink" title="Postcss、less、scss、stylus 集合"></a>Postcss、less、scss、stylus 集合</h2><ul><li><strong>postcss-import</strong> ：postcss 是后处理器框架，<a href="https://juejin.im/post/5c022f4a6fb9a049ca371684">整体介绍</a></li><li><strong>postcss-url</strong></li><li><strong>postcss-loader</strong></li><li><strong>autoprefixer</strong> ：后处理器 postcss 框架其中一个插件，适用场景是：添加前缀、转换单位、低版本浏览器的 hack 等。<a href="https://www.html-js.com/article/Postcss-postcss-pre-processor-and-post-processor">详细介绍</a> <a href="https://juejin.im/post/5c17bf93f265da611510b5ea">详细教程</a></li><li><strong>less</strong></li><li><strong>less-loader</strong></li><li><strong>node-sass</strong></li><li><strong>sass-loader</strong></li><li><strong>stylus-loader</strong></li></ul><h2 id="vue-必备"><a href="#vue-必备" class="headerlink" title="vue 必备"></a>vue 必备</h2><ul><li><strong>vue-loader</strong></li><li><strong>vue-style-loader</strong></li><li><strong>vue-template-compiler</strong> ：webpack 生态下使用*<code>*vue-loader*</code><em>进行 vue 解析，</em><code>*vue-loader*</code><em>自带</em><code>*vue-template-compiler*</code>*，会预编译您的 template 模版，生成 javascript 可执行函数。<a href="https://blog.csdn.net/u014787301/article/details/85842963">源码详解</a></li><li><strong>vue</strong></li><li><strong>vue-router</strong></li><li><strong>vuex</strong></li><li><strong>axios</strong></li></ul><h3 id="vue-环境下的简单组件库"><a href="#vue-环境下的简单组件库" class="headerlink" title="vue 环境下的简单组件库"></a>vue 环境下的简单组件库</h3><ul><li><strong>iview</strong> &amp;&amp; <strong>iview-loader</strong></li><li><strong>vue-nav-tabs</strong></li></ul><h2 id="React-必备"><a href="#React-必备" class="headerlink" title="React 必备"></a>React 必备</h2><ul><li><strong>formik</strong> React 表单救星</li></ul><h2 id="工具组件库"><a href="#工具组件库" class="headerlink" title="工具组件库"></a>工具组件库</h2><ul><li><strong>mavon-editor</strong></li><li><strong>highlight.js</strong></li><li><strong>mockjs</strong></li><li><strong>clipboard</strong></li><li><strong>echarts</strong></li><li><strong>Lodash</strong></li><li><strong>qs</strong></li><li><strong>fs</strong></li><li><strong>fs-extra</strong> ：实现了一些 fs 模块不包含的文件操（比如递归复制、删除等等）的模块</li><li><strong>url-search-params-polyfill</strong></li><li><strong>md5</strong> ：用 MD5 哈希加密 string</li><li><strong>gulp</strong> ：一个自动化构建工具，一般配合 webpack 实现 webpack 未提供的图片压缩、项目上线部署等功能</li><li><strong>vinyl-ftp</strong> ：配合 gulp 实现自动 ftp 部署项目文件到服务器</li></ul><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><ul><li><strong>chalk</strong> ：实现 terminal 控制台彩色文字输出的模块</li><li><strong>cross-spawn</strong> ：使用 npm 命令的跨平台解决方案</li><li><strong>node-notifier</strong> ：基于 NodeJs 发送跨平台原生系统通知，Electron 已内置，可以测试时用于提醒</li><li><strong>ora</strong> ：优雅好玩的 terminal 控制台 spinner 加载图标 模块</li><li><strong>portfinder</strong> ：自动获取端口，一般用于 webpack.dev.config.js 内</li><li><strong>rimraf</strong> ：以包的形式包装<code>rm -rf</code>命令，就是用来删除文件和文件夹的，不管文件夹是否为空，都可以删除，<a href="https://segmentfault.com/a/1190000011831802">简介</a></li><li><strong>shelljs</strong> ：Node.js 下的脚本语言解析器，模块重新包装了<code>child_process</code>，实现在 javascript 中编写 shell 命令实现功能，<a href="https://www.kancloud.cn/outsider/clitool/313191">介绍</a>、<a href="https://juejin.im/post/5cdb76166fb9a032196ef1ff">介绍 2</a></li><li><strong>commander</strong> ：封装了命令行参数的接口，让 commander 能够根据用户输入参数选择执行不同代码。。一般用于脚手架开发<a href="https://cloud.tencent.com/developer/article/1541086">例子用 commander 做一个自己的 eslint 脚手架</a></li><li><strong>validate-npm-package-name</strong> ：对于用户输入的工程名的可用性进行验证的模块，<a href="https://www.geekjc.com/post/5de4eb6269116702fb6f61e3">例子</a></li><li><strong>semver</strong> ：是<a href="https://semver.org/lang/zh-CN/"> 语义化版本（Semantic Versioning）规范</a> 的一个实现，实现了版本和版本范围的解析、计算、比较。<a href="https://cnodejs.org/topic/570f8331510629637266685a">介绍</a></li></ul><blockquote><p>专有名词注解：</p><p>三个打包器 <a href="https://stackshare.io/stackups/gulp-vs-parcel-vs-webpack">对比</a>：</p><p>webpack、gulp、<a href="https://www.html.cn/doc/parcel/getting_started.html">Parcel</a></p><p>还有更多对比 <a href="https://stackoverflow.com/questions/35062852/npm-vs-bower-vs-browserify-vs-gulp-vs-grunt-vs-webpack">NPM vs. Bower vs. Browserify vs. Gulp vs. Grunt vs. Webpack - Stack Overflow</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PixiJS</title>
      <link href="/2019/12/19/bi-ji-pixijs/"/>
      <url>/2019/12/19/bi-ji-pixijs/</url>
      
        <content type="html"><![CDATA[<p>官网 <a href="https://www.pixijs.com/">https://www.pixijs.com/</a><br><a href="https://segmentfault.com/a/1190000017150623">开始学习 PixiJS</a><br>PixiJS 介绍<br>PixiJS 是一个超快的 2D 渲染引擎。它自动侦测使用 WebGL 或者 Canvas。开发者无需专门学习 WebGL 就能感受到强大的硬件加速的力量。</p><p>PixiJS 会帮助你用 JavaScript 或者其他 HTML5 技术来显示媒体，创建动画或管理交互式图像，从而制作一个游戏或应用。它拥有语义化的，简洁的 API 接口并且加入了一些非常有用的特性。比如支持纹理贴图集和为精灵（交互式图像）提供了一个简单的动画系统。它也提供了一个完备的场景图，你可以在精灵图层里面创建另一个精灵，当然也可以让精灵响应你的鼠标或触摸事件。</p><p>要注意的是，虽然 PixiJS 非常适合制作游戏，但它并不是一个游戏引擎，它的核心本质是尽可能快速有效地在屏幕上移动物体。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> webGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模块化-import、require、export、module.exports详解</title>
      <link href="/2019/12/19/za-tan-js-import-require-export-module-exports-xiang-jie/"/>
      <url>/2019/12/19/za-tan-js-import-require-export-module-exports-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>参考<a href="https://juejin.im/post/5a2e5f0851882575d42f5609">掘金</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>babel 中 polyfill 和 plugin-transform-runtime 关联</title>
      <link href="/2019/12/18/za-tan-webpack-babel-zhong-polyfill-he-plugin-transform-runtime-de-qu-bie/"/>
      <url>/2019/12/18/za-tan-webpack-babel-zhong-polyfill-he-plugin-transform-runtime-de-qu-bie/</url>
      
        <content type="html"><![CDATA[<h1 id="简答"><a href="#简答" class="headerlink" title="简答"></a>简答</h1><p>Babel 默认只是转换了 箭头函数 let ,Promise 和 includes 都没有转换 ,这是为什么</p><p>Babel 把 Javascript 语法 分为 <code>syntax</code> 和 <code>api</code></p><p>先说 api , api 指那些我们可以通过 函数重新覆盖的语法 ，类似 includes,map,includes,Promise,凡是我们能想到重写的都可以归属到 api</p><p>啥子是 syntax ,像 箭头函数，let,const,class, 依赖注入 Decorators,等等这些，我们在 Javascript 在运行是无法重写的，想象下，在不支持的浏览器里不管怎么样，你都用不了 let 这个关键字</p><p>千万要 get 到上面这 2 个点，非常重要,很多人以为只要 引用了 Babel 就不会出现兼容性问题了，这个是大错特错的</p><p>syntax 这个关键字 Babel 的官网只是一笔带过，直译又不准确，网上很多文章在说 polyfill 和 transform-runtime 的差别都没说到点上，还互相瞎鸡儿抄，这个点上小编还是很自信的，按照自己的理解,说出二者的差别(默默的给自己加个鸡腿)</p><p>那 Babel 只负责 转换 syntax , includes,map,includes 这些 API 层面的 怎么办, Babel 把这个放在了 单独放在了 polyfill 这个模块处理</p><p>Babel 这个设计非常好, 把 Javascript 语法抽象成 2 个方面的, syntax 和 polyfill 独立开来，分而治理，6to5 一开始设计是把二者放在一起的，大家想想 polyfill 随着浏览器的不同，差异是非常大的,2 个要是在一起 代码的耦合性就太大了，到处都是 if else</p><h1 id="babel-polyfill-使用场景"><a href="#babel-polyfill-使用场景" class="headerlink" title="babel-polyfill 使用场景"></a>babel-polyfill 使用场景</h1><p>Babel 默认只转换新的 JavaScript 语法，而不转换新的 API。例如，Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise 等全局对象，以及一些定义在全局对象上的方法（比如 Object.assign）都不会转译。如果想使用这些新的对象和方法，必须使用 babel-polyfill，为当前环境提供一个垫片。</p><h1 id="babel-runtime-使用场景"><a href="#babel-runtime-使用场景" class="headerlink" title="babel-runtime 使用场景"></a>babel-runtime 使用场景</h1><p>Babel 转译后的代码要实现源代码同样的功能需要借助一些帮助函数，例如，{ [name]: ‘JavaScript’ } 转译后的代码如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">_defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> value<span class="token punctuation">,</span>      enumerable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">_defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"JavaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>类似上面的帮助函数 _defineProperty 可能会重复出现在一些模块里，导致编译后的代码体积变大。Babel 为了解决这个问题，提供了单独的包 <code>babel-runtime</code> 供编译模块复用工具函数。</p><p>启用插件<code>babel-plugin-transform-runtime</code> 后，Babel 就会使用 <code>babel-runtime</code> 下的工具函数，转译代码如下：</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 之前的 _defineProperty 函数已经作为公共模块 `babel-runtime/helpers/defineProperty` 使用</span><span class="token keyword">var</span> _defineProperty2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-runtime/helpers/defineProperty"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _defineProperty3 <span class="token operator">=</span> <span class="token function">_interopRequireDefault</span><span class="token punctuation">(</span>_defineProperty2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">_interopRequireDefault</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>__esModule <span class="token operator">?</span> obj <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> obj <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _defineProperty3<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"JavaScript"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>除此之外，babel 还为源代码的非实例方法（<code>Object.assign</code>，实例方法是类似这样的 <code>&quot;foobar&quot;.includes(&quot;foo&quot;)</code>）和 babel-runtime/helps 下的工具函数自动引用了 polyfill。这样可以避免污染全局命名空间，非常适合于 JavaScript 库和工具包的实现。例如 <code>const obj = &#123;&#125;, Object.assign(obj, &#123; age: 30 &#125;);</code> 转译后的代码如下所示：</p><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用了 core-js 提供的 assign</span><span class="token keyword">var</span> _assign <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-runtime/core-js/object/assign"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _assign2 <span class="token operator">=</span> <span class="token function">_interopRequireDefault</span><span class="token punctuation">(</span>_assign<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">_interopRequireDefault</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>__esModule <span class="token operator">?</span> obj <span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token punctuation">:</span> obj <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _assign2<span class="token punctuation">.</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">{</span>  age<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>思考：babel-runtime 为什么适合 JavaScript 库和工具包的实现？</p><ol><li>避免 babel 编译的工具函数在每个模块里重复出现，减小库和工具包的体积；</li><li>在没有使用 babel-runtime 之前，库和工具包一般不会直接引入 polyfill。否则像 Promise 这样的全局对象会污染全局命名空间，这就要求库的使用者自己提供 polyfill。这些 polyfill 一般在库和工具的使用说明中会提到，比如很多库都会有要求提供 es5 的 polyfill。在使用 babel-runtime 后，库和工具只要在 package.json 中增加依赖 babel-runtime，交给 babel-runtime 去引入 polyfill 就行了；</li></ol><p>总结：</p><p>具体项目还是需要使用 babel-polyfill，只使用 babel-runtime 的话，实例方法不能正常工作（例如 <code>&quot;foobar&quot;.includes(&quot;foo&quot;)</code>）；</p><p>JavaScript 库和工具可以使用 babel-runtime，在实际项目中使用这些库和工具，需要该项目本身提供 polyfill；</p><p>疑问：像 <a href="mailto:&#97;&#110;&#x74;&#100;&#x40;&#50;&#x2e;&#120;">&#97;&#110;&#x74;&#100;&#x40;&#50;&#x2e;&#120;</a> 这样的库使用了 babel-runtime，在实际项目中使用 <a href="mailto:&#97;&#110;&#x74;&#100;&#x40;&#x32;&#x2e;&#120;">&#97;&#110;&#x74;&#100;&#x40;&#x32;&#x2e;&#120;</a>，我们需要引入 babel-polyfill。但全部 polyfill 打包压缩下来也有 80kb 左右，其中很多 polyfill 是没有用到的，如何减少体积呢？手工一个个引入使用到的 polyfill，似乎维护成本太高！</p><p>参考文献</p><p><a href="https://zhuanlan.zhihu.com/p/58624930">知乎专栏：Babel 学习系列 4-polyfill 和 runtime 差别(必看)</a><br><a href="https://segmentfault.com/q/1010000005596587">Segmentfault 问题：babel 的 polyfill 和 runtime 的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS CODE 调教</title>
      <link href="/2019/12/12/sui-bi-vscode-diao-jiao/"/>
      <url>/2019/12/12/sui-bi-vscode-diao-jiao/</url>
      
        <content type="html"><![CDATA[<p>开坑<br>比如 文件格式模版<br>比如 快捷键 设置 <code>command+K</code> + <code>command+S</code><br><code>Option + enter</code>在搜索之后 把光标移动到所有搜索结果之后<br>比如 神器插件:<br><a href="https://jishuin.proginn.com/p/763bfbd39196">https://jishuin.proginn.com/p/763bfbd39196</a><br>Wallaby.js 自动测试用<br>Debugger for Chrome 试着使用起来</p><h2 id="prettier-格式化后自动-eslint-修复的操作怎么实现"><a href="#prettier-格式化后自动-eslint-修复的操作怎么实现" class="headerlink" title="prettier 格式化后自动 eslint 修复的操作怎么实现:"></a>prettier 格式化后自动 eslint 修复的操作怎么实现:</h2><p>手动格式化仍然快捷键 <code>option + shift + F</code><br><code>command + s</code>保存后会自动eslint修复</p><pre class=" language-json"><code class="language-json"><span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span><span class="token punctuation">{</span>  <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h2 id="所有的默认配置项中文描述"><a href="#所有的默认配置项中文描述" class="headerlink" title="所有的默认配置项中文描述"></a><a href="https://blog.csdn.net/Gabriel_wei/article/details/90440542">所有的默认配置项中文描述</a></h2><ul><li>vscode 开启对 webpack alias(文件别名) 引入的智能提示 <code>jsconfig.json</code><br>  <a href="https://github.com/Runtu4378/blog/issues/21">github 文章</a><br>  <a href="https://juejin.im/post/5d6c806bf265da03ef7a2bdf">掘金</a><br>  <a href="https://blog.csdn.net/zzl1243976730/article/details/92820985">链接</a><br>  <a href="https://code.visualstudio.com/docs/languages/jsconfig">微软官方文档</a></li><li>几个常用插件<br>  vue: vetur、vue 2 snippets</li><li>命令行打开 vscode<br>  手动打开 vscode<br>  command + shift + p 打开命令面板（或者点击菜单栏 查看&gt;命令面板）<br>  输入 shell（选择”install code command in PATH”）<br>  打开终端 进入需要用 IDE 打开的文件夹 输入”code .”</li></ul><h1 id="推荐的配置"><a href="#推荐的配置" class="headerlink" title="推荐的配置"></a>推荐的配置</h1><p>打开配置文件<code>commond + shift + p</code> &amp; <code>references: Open Settings(JSON)</code></p><pre class=" language-json"><code class="language-json">    <span class="token property">"vetur.format.options.tabSize"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.scriptInitialIndent"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.defaultFormatterOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"prettyhtml"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">140</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"prettier"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>      <span class="token property">"proseWrap"</span><span class="token operator">:</span> <span class="token string">"never"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"prettier.semi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"prettier.printWidth"</span><span class="token operator">:</span> <span class="token number">400</span><span class="token punctuation">,</span>  <span class="token property">"prettier.proseWrap"</span><span class="token operator">:</span> <span class="token string">"never"</span><span class="token punctuation">,</span>  <span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"vetur.validation.template"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"cssrem.rootFontSize"</span><span class="token operator">:</span> <span class="token number">75</span><span class="token punctuation">,</span>  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>      <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token string">"html"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span></code></pre><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    // 控制在差异编辑器中是否把前导空格或尾随空格的改动显示为差异。    <span class="token property">"diffEditor.ignoreTrimWhitespace"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制差异编辑器是否为添加/删除的更改显示 +/- 指示符号。    <span class="token property">"diffEditor.renderIndicators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制差异编辑器的显示方式是并排还是内联。    <span class="token property">"diffEditor.renderSideBySide"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制是否应在遇到提交字符时接受建议。例如，在 JavaScript 中，半角分号 (`<span class="token punctuation">;</span>`<span class="token punctuation">)</span> 可以为提交字符，能够在接受建议的同时键入该字符。    <span class="token property">"editor.acceptSuggestionOnCommitCharacter"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制除了 `Tab` 键以外， `Enter` 键是否同样可以接受建议。这能减少“插入新行”和“接受建议”命令之间的歧义。    //  - on    //  - smart<span class="token operator">:</span> 仅当建议包含文本改动时才可使用 `Enter` 键进行接受。    //  - off    <span class="token property">"editor.acceptSuggestionOnEnter"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // 控制编辑器是否应运行在对屏幕阅读器进行优化的模式。    //  - auto<span class="token operator">:</span> 编辑器将使用平台 API 以检测是否附加了屏幕阅读器。    //  - on<span class="token operator">:</span> 编辑器将对屏幕阅读器的使用进行永久优化。    //  - off<span class="token operator">:</span> 编辑器将不再对屏幕阅读器的使用进行优化。    <span class="token property">"editor.accessibilitySupport"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 控制编辑器是否在左括号后自动插入右括号。    //  - always    //  - languageDefined<span class="token operator">:</span> 使用语言配置确定何时自动闭合括号。    //  - beforeWhitespace<span class="token operator">:</span> 仅当光标位于空白字符左侧时，才自动闭合括号。    //  - never    <span class="token property">"editor.autoClosingBrackets"</span><span class="token operator">:</span> <span class="token string">"languageDefined"</span><span class="token punctuation">,</span>    // 控制编辑器是否在左引号后自动插入右引号。    //  - always    //  - languageDefined<span class="token operator">:</span> 使用语言配置确定何时自动闭合引号。    //  - beforeWhitespace<span class="token operator">:</span> 仅当光标位于空白字符左侧时，才自动闭合引号。    //  - never    <span class="token property">"editor.autoClosingQuotes"</span><span class="token operator">:</span> <span class="token string">"languageDefined"</span><span class="token punctuation">,</span>    // 控制编辑器是否在用户键入、粘贴或移动行时自动调整缩进。必须安装包含此语言缩进规则的扩展。    <span class="token property">"editor.autoIndent"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制编辑器是否应自动包住所选内容。    //  - languageDefined<span class="token operator">:</span> 使用语言配置确定何时自动包住所选内容。    //  - brackets<span class="token operator">:</span> 使用括号而非引号来包住所选内容。    //  - quotes<span class="token operator">:</span> 使用引号而非括号来包住所选内容。    //  - never    <span class="token property">"editor.autoSurround"</span><span class="token operator">:</span> <span class="token string">"languageDefined"</span><span class="token punctuation">,</span>    // 在保存时运行的代码操作类型。    <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 控制在保存文件时进行的代码操作的超时时间 (毫秒<span class="token punctuation">)</span>。    <span class="token property">"editor.codeActionsOnSaveTimeout"</span><span class="token operator">:</span> <span class="token number">750</span><span class="token punctuation">,</span>    // 控制是否在编辑器中显示 CodeLens。    <span class="token property">"editor.codeLens"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制编辑器是否显示内联颜色修饰器和颜色选取器。    <span class="token property">"editor.colorDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在复制时是否同时复制语法高亮。    <span class="token property">"editor.copyWithSyntaxHighlighting"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制光标的动画样式。    <span class="token property">"editor.cursorBlinking"</span><span class="token operator">:</span> <span class="token string">"blink"</span><span class="token punctuation">,</span>    // 控制是否启用平滑插入动画。    <span class="token property">"editor.cursorSmoothCaretAnimation"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制光标样式。    <span class="token property">"editor.cursorStyle"</span><span class="token operator">:</span> <span class="token string">"line"</span><span class="token punctuation">,</span>    // 当 `editor.cursorStyle` 设置为 `line` 时，控制光标的宽度。    <span class="token property">"editor.cursorWidth"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    // 定义一个默认格式化程序<span class="token punctuation">,</span> 该格式化程序优先于所有其他格式化程序设置。必须是提供格式化程序的扩展的标识符。    //  - <span class="token null">null</span><span class="token operator">:</span> 没有    //  - vscode.configuration-editing<span class="token operator">:</span> 在配置文件 (如设置、启动和扩展推荐文件<span class="token punctuation">)</span> 中提供高级 IntelliSense、自动修复等功能    //  - vscode.css-language-features<span class="token operator">:</span> 为 CSS、LESS 和 SCSS 文件提供丰富的语言支持。    //  - vscode.debug-auto-launch<span class="token operator">:</span> 当 node-debug 扩展未启用时提供自动附加的辅助程序。    //  - vscode.debug-server-ready<span class="token operator">:</span> 如果正在调试的服务器已准备就绪，在浏览器中打开 URI。    //  - vscode.emmet<span class="token operator">:</span> 适用于 VS Code 的 Emmet 支持    //  - vscode.extension-editing<span class="token operator">:</span> 在创建扩展时提供 linting 功能。    //  - vscode.git<span class="token operator">:</span> Git 源代码管理集成    //  - vscode.grunt<span class="token operator">:</span> Extension to add Grunt capabilities to VS Code.    //  - vscode.gulp<span class="token operator">:</span> 向 VSCode 提供 Gulp 功能的扩展。    //  - vscode.html-language-features<span class="token operator">:</span> 为 HTML 和 Handlebar 文件提供丰富的语言支持    //  - vscode.jake<span class="token operator">:</span> 向 VS Code 提供 Jake 功能的扩展。    //  - vscode.json-language-features<span class="token operator">:</span> 为 JSON 文件提供丰富的语言支持    //  - vscode.markdown-language-features<span class="token operator">:</span> 为 Markdown 提供丰富的语言支持。    //  - vscode.merge-conflict<span class="token operator">:</span> 为内联合并冲突提供高亮和命令。    //  - ms-vscode.node-debug<span class="token operator">:</span> Node.js 调试支持(低于 <span class="token number">8.0</span> 版本<span class="token punctuation">)</span>    //  - ms-vscode.node-debug2<span class="token operator">:</span> Node.js 调试支持    //  - ms-vscode.references-view<span class="token operator">:</span> Reference Search results as separate<span class="token punctuation">,</span> stable view in the sidebar    //  - vscode.npm<span class="token operator">:</span> 为 npm 脚本提供任务支持的扩展。    //  - vscode.php-language-features<span class="token operator">:</span> 为 PHP 文件提供丰富的语言支持。    //  - vscode.python<span class="token operator">:</span> 在 Python 文件中提供语法高亮、括号匹配和折叠功能。    //  - vscode.typescript-language-features<span class="token operator">:</span> 为 JavaScript 和 TypeScript 提供丰富的语言支持。    //  - christian-kohler.path-intellisense<span class="token operator">:</span> Visual Studio Code plugin that autocompletes filenames    //  - CoenraadS.bracket-pair-colorizer<span class="token operator">:</span> A customizable extension for colorizing matching brackets    //  - dbaeumer.vscode-eslint<span class="token operator">:</span> Integrates ESLint JavaScript into VS Code.    //  - eamodio.gitlens<span class="token operator">:</span> Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens<span class="token punctuation">,</span> seamlessly navigate and explore Git repositories<span class="token punctuation">,</span> gain valuable insights via powerful comparison commands<span class="token punctuation">,</span> and so much more    //  - Equinusocio.vsc-material-theme<span class="token operator">:</span> The most epic theme now for Visual Studio Code    //  - esbenp.prettier-vscode<span class="token operator">:</span> VS Code plugin for prettier/prettier    //  - formulahendry.auto-close-tag<span class="token operator">:</span> Automatically add HTML/XML close tag<span class="token punctuation">,</span> same as Visual Studio IDE or Sublime Text    //  - formulahendry.auto-rename-tag<span class="token operator">:</span> Auto rename paired HTML/XML tag    //  - formulahendry.code-runner<span class="token operator">:</span> Run C<span class="token punctuation">,</span> C++<span class="token punctuation">,</span> Java<span class="token punctuation">,</span> JS<span class="token punctuation">,</span> PHP<span class="token punctuation">,</span> Python<span class="token punctuation">,</span> Perl<span class="token punctuation">,</span> Ruby<span class="token punctuation">,</span> Go<span class="token punctuation">,</span> Lua<span class="token punctuation">,</span> Groovy<span class="token punctuation">,</span> PowerShell<span class="token punctuation">,</span> CMD<span class="token punctuation">,</span> BASH<span class="token punctuation">,</span> F#<span class="token punctuation">,</span> C#<span class="token punctuation">,</span> VBScript<span class="token punctuation">,</span> TypeScript<span class="token punctuation">,</span> CoffeeScript<span class="token punctuation">,</span> Scala<span class="token punctuation">,</span> Swift<span class="token punctuation">,</span> Julia<span class="token punctuation">,</span> Crystal<span class="token punctuation">,</span> OCaml<span class="token punctuation">,</span> R<span class="token punctuation">,</span> AppleScript<span class="token punctuation">,</span> Elixir<span class="token punctuation">,</span> VB.NET<span class="token punctuation">,</span> Clojure<span class="token punctuation">,</span> Haxe<span class="token punctuation">,</span> Obj-C<span class="token punctuation">,</span> Rust<span class="token punctuation">,</span> Racket<span class="token punctuation">,</span> AutoHotkey<span class="token punctuation">,</span> AutoIt<span class="token punctuation">,</span> Kotlin<span class="token punctuation">,</span> Dart<span class="token punctuation">,</span> Pascal<span class="token punctuation">,</span> Haskell<span class="token punctuation">,</span> Nim<span class="token punctuation">,</span> D<span class="token punctuation">,</span> Lisp<span class="token punctuation">,</span> Kit    //  - octref.vetur<span class="token operator">:</span> Vue tooling for VS Code    //  - PKief.material-icon-theme<span class="token operator">:</span> Material Design Icons for Visual Studio Code    //  - ritwickdey.LiveServer<span class="token operator">:</span> Launch a development local Server with live reload feature for static &amp; dynamic pages    //  - Shan.code-settings-sync<span class="token operator">:</span> Synchronize Settings<span class="token punctuation">,</span> Snippets<span class="token punctuation">,</span> Themes<span class="token punctuation">,</span> File Icons<span class="token punctuation">,</span> Launch<span class="token punctuation">,</span> Keybindings<span class="token punctuation">,</span> Workspaces and Extensions Across Multiple Machines Using GitHub Gist.    //  - shd101wyy.markdown-preview-enhanced<span class="token operator">:</span> Markdown Preview Enhanced ported to vscode    //  - WallabyJs.quokka-vscode<span class="token operator">:</span> Live Scratchpad for JavaScript.    <span class="token property">"editor.defaultFormatter"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 控制是否在打开文件时，基于文件内容自动检测 `editor.tabSize#` 和 `#editor.insertSpaces`。    <span class="token property">"editor.detectIndentation"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在编辑器中是否允许通过拖放来移动选中内容。    <span class="token property">"editor.dragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在没有选择内容时进行复制是否复制当前行。    <span class="token property">"editor.emptySelectionClipboard"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 按下 <span class="token string">"Alt"</span> 时滚动速度加倍。    <span class="token property">"editor.fastScrollSensitivity"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    // 控制 <span class="token string">"查找小部件"</span> 是否应在编辑器顶部添加额外的行。如果为 <span class="token boolean">true</span><span class="token punctuation">,</span> 则可以在 <span class="token string">"查找小工具"</span> 可见时滚动到第一行之外。    <span class="token property">"editor.find.addExtraSpaceOnTop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在执行查找操作时，在编辑器中的选中文本中还是整个文件中进行查找。    <span class="token property">"editor.find.autoFindInSelection"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否将编辑器选中内容作为搜索词填入到查找小组件中。    <span class="token property">"editor.find.seedSearchStringFromSelection"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制编辑器是否启用了代码折叠。    <span class="token property">"editor.folding"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制计算折叠范围的策略。`auto` 将使用语言特定的折叠策略 (若可用<span class="token punctuation">)</span>。`indentation` 将使用基于缩进的折叠策略。    <span class="token property">"editor.foldingStrategy"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 控制字体系列。    <span class="token property">"editor.fontFamily"</span><span class="token operator">:</span> <span class="token string">"Consolas, 'Courier New', monospace"</span><span class="token punctuation">,</span>    // 启用或禁用字体连字。    <span class="token property">"editor.fontLigatures"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 以像素为单位控制字体大小。    <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    // 控制字体粗细。    <span class="token property">"editor.fontWeight"</span><span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span>    // 控制编辑器是否自动格式化粘贴的内容。格式化程序必须可用，并且能针对文档中的某一范围进行格式化。    <span class="token property">"editor.formatOnPaste"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 在保存时格式化文件。格式化程序必须可用，延迟后文件不能保存，并且编辑器不能关闭。    <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制在保存文件时进行格式化的超时时间 (毫秒<span class="token punctuation">)</span>。    <span class="token property">"editor.formatOnSaveTimeout"</span><span class="token operator">:</span> <span class="token number">750</span><span class="token punctuation">,</span>    // 控制编辑器在键入一行后是否自动格式化该行。    <span class="token property">"editor.formatOnType"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制编辑器是否应呈现垂直字形边距。字形边距最常用于调试。    <span class="token property">"editor.glyphMargin"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 当存在多个目标位置时<span class="token punctuation">,</span> 控制 <span class="token string">"Go To"</span> 命令 (如 <span class="token string">"Go To Definition"</span><span class="token punctuation">)</span> 的行为。    //  - peek<span class="token operator">:</span> 显示结果的预览视图 (默认值<span class="token punctuation">)</span>    //  - gotoAndPeek<span class="token operator">:</span> 转到主结果并显示预览视图    //  - goto<span class="token operator">:</span> 转到主要结果并忽略其他结果    <span class="token property">"editor.gotoLocation.multiple"</span><span class="token operator">:</span> <span class="token string">"peek"</span><span class="token punctuation">,</span>    // 控制是否在概览标尺中隐藏光标。    <span class="token property">"editor.hideCursorInOverviewRuler"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否突出显示编辑器中活动的缩进参考线。    <span class="token property">"editor.highlightActiveIndentGuide"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制显示悬停提示前的等待时间 (毫秒<span class="token punctuation">)</span>。    <span class="token property">"editor.hover.delay"</span><span class="token operator">:</span> <span class="token number">300</span><span class="token punctuation">,</span>    // 控制是否显示悬停提示。    <span class="token property">"editor.hover.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制当鼠标移动到悬停提示上时，其是否保持可见。    <span class="token property">"editor.hover.sticky"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 按 `Tab` 键时插入空格。该设置在 `editor.detectIndentation` 启用时根据文件内容可能会被覆盖。    <span class="token property">"editor.insertSpaces"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 对大型文件进行特殊处理，禁用某些内存密集型功能。    <span class="token property">"editor.largeFileOptimizations"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制以像素为单位的字母间距。    <span class="token property">"editor.letterSpacing"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    // 在编辑器中启用代码操作小灯泡提示。    <span class="token property">"editor.lightbulb.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制行高。为 <span class="token number">0</span> 时则通过字体大小自动计算。    <span class="token property">"editor.lineHeight"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    // 控制行号的显示。    //  - off<span class="token operator">:</span> 不显示行号。    //  - on<span class="token operator">:</span> 将行号显示为绝对行数。    //  - relative<span class="token operator">:</span> 将行号显示为与光标相隔的行数。    //  - interval<span class="token operator">:</span> 每 <span class="token number">10</span> 行显示一次行号。    <span class="token property">"editor.lineNumbers"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // 控制是否在编辑器中检测链接并使其可被点击。    <span class="token property">"editor.links"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 当选择其中一项时，将突出显示匹配的括号。    <span class="token property">"editor.matchBrackets"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 由于性能原因，超过这个长度的行将不会被标记    <span class="token property">"editor.maxTokenizationLineLength"</span><span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span>    // 控制是否显示缩略图。    <span class="token property">"editor.minimap.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 限制缩略图的宽度，控制其最多显示的列数。    <span class="token property">"editor.minimap.maxColumn"</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>    // 渲染每行的实际字符，而不是色块。    <span class="token property">"editor.minimap.renderCharacters"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制是否自动隐藏缩略图滑块。    <span class="token property">"editor.minimap.showSlider"</span><span class="token operator">:</span> <span class="token string">"mouseover"</span><span class="token punctuation">,</span>    // 控制在哪一侧显示缩略图。    <span class="token property">"editor.minimap.side"</span><span class="token operator">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>    // 对鼠标滚轮滚动事件的 `deltaX` 和 `deltaY` 乘上的系数。    <span class="token property">"editor.mouseWheelScrollSensitivity"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    // 按住 `Ctrl` 键并滚动鼠标滚轮时对编辑器字体大小进行缩放。    <span class="token property">"editor.mouseWheelZoom"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 当多个光标重叠时进行合并。    <span class="token property">"editor.multiCursorMergeOverlapping"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在通过鼠标添加多个光标时使用的修改键。“转到定义”和“打开链接”功能所需的鼠标动作将会相应调整，不与多光标修改键冲突。<span class="token punctuation">[</span>阅读详细信息<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier<span class="token punctuation">)</span>。    //  - ctrlCmd<span class="token operator">:</span> 映射为 `Ctrl` (Windows 和 Linux<span class="token punctuation">)</span> 或 `Command` (macOS<span class="token punctuation">)</span>。    //  - alt<span class="token operator">:</span> 映射为 `Alt` (Windows 和 Linux<span class="token punctuation">)</span> 或 `Option` (macOS<span class="token punctuation">)</span>。    <span class="token property">"editor.multiCursorModifier"</span><span class="token operator">:</span> <span class="token string">"alt"</span><span class="token punctuation">,</span>    // 控制编辑器是否突出显示语义符号的匹配项。    <span class="token property">"editor.occurrencesHighlight"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制是否在概览标尺周围绘制边框。    <span class="token property">"editor.overviewRulerBorder"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制概览标尺中同一位置可显示的提示数量。    <span class="token property">"editor.overviewRulerLanes"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    // 控制参数提示菜单在到达列表末尾时进行循环还是关闭。    <span class="token property">"editor.parameterHints.cycle"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 在输入时显示含有参数文档和类型信息的小面板。    <span class="token property">"editor.parameterHints.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制是否在键入时自动显示建议。    <span class="token property">"editor.quickSuggestions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"other"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"comments"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"strings"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 控制显示快速建议前的等待时间 (毫秒<span class="token punctuation">)</span>。    <span class="token property">"editor.quickSuggestionsDelay"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    // 控制编辑器是否显示控制字符。    <span class="token property">"editor.renderControlCharacters"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 当文件以换行符结束时<span class="token punctuation">,</span> 呈现最后一行的行号。    <span class="token property">"editor.renderFinalNewline"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制编辑器是否显示缩进参考线。    <span class="token property">"editor.renderIndentGuides"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制编辑器的当前行进行高亮显示的方式。    //  - none    //  - gutter    //  - line    //  - all<span class="token operator">:</span> 同时突出显示导航线和当前行。    <span class="token property">"editor.renderLineHighlight"</span><span class="token operator">:</span> <span class="token string">"line"</span><span class="token punctuation">,</span>    // 控制编辑器在空白字符上显示符号的方式。    //  - none    //  - boundary<span class="token operator">:</span> 除了单个空格，在空白字符上显示符号。    //  - all    <span class="token property">"editor.renderWhitespace"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    // 控制选区是否有圆角。    <span class="token property">"editor.roundedSelection"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在一定数量的等宽字符后显示垂直标尺。输入多个值，显示多个标尺。若数组为空，则不绘制标尺。    <span class="token property">"editor.rulers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 控制编辑器水平滚动时可以超过范围的字符数。    <span class="token property">"editor.scrollBeyondLastColumn"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    // 控制编辑器是否可以滚动到最后一行之后。    <span class="token property">"editor.scrollBeyondLastLine"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制编辑器是否应突出显示与所选内容类似的匹配项。    <span class="token property">"editor.selectionHighlight"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制是否自动隐藏导航线上的折叠控件。    <span class="token property">"editor.showFoldingControls"</span><span class="token operator">:</span> <span class="token string">"mouseover"</span><span class="token punctuation">,</span>    // 控制是否淡化未使用的代码。    <span class="token property">"editor.showUnused"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制编辑器是否在滚动时使用动画。    <span class="token property">"editor.smoothScrolling"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制代码片段是否与其他建议一起显示及其排列的位置。    //  - top<span class="token operator">:</span> 在其他建议上方显示代码片段建议。    //  - bottom<span class="token operator">:</span> 在其他建议下方显示代码片段建议。    //  - inline<span class="token operator">:</span> 在其他建议中穿插显示代码片段建议。    //  - none<span class="token operator">:</span> 不显示代码片段建议。    <span class="token property">"editor.snippetSuggestions"</span><span class="token operator">:</span> <span class="token string">"inline"</span><span class="token punctuation">,</span>    // 在速览编辑器中，即使双击其中的内容或者按 `Esc` 键，也保持其打开状态。    <span class="token property">"editor.stablePeek"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否应从智能感知中筛选某些建议类型。建议类型的列表可以在这里找到<span class="token operator">:</span> https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/intellisense#_types-of-completions。    <span class="token property">"editor.suggest.filteredTypes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"keyword"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 控制对建议的筛选和排序是否考虑小的拼写错误。    <span class="token property">"editor.suggest.filterGraceful"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制排序时是否提高靠近光标的词语的优先级。    <span class="token property">"editor.suggest.localityBonus"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制在显示滚动条之前智能感知将显示的建议数 (最多 <span class="token number">15</span>个<span class="token punctuation">)</span>。    <span class="token property">"editor.suggest.maxVisibleSuggestions"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    // 控制是否在多个工作区和窗口间共享记忆的建议选项(需要 `editor.suggestSelection`<span class="token punctuation">)</span>。    <span class="token property">"editor.suggest.shareSuggestSelections"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否在建议中显示或隐藏图标。    <span class="token property">"editor.suggest.showIcons"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在活动代码片段内是否禁用快速建议。    <span class="token property">"editor.suggest.snippetsPreventQuickSuggestions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 建议小部件的字号。如果设置为 `<span class="token number">0</span>`，则使用 `editor.fontSize` 的值。    <span class="token property">"editor.suggestFontSize"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    // 建议小部件的行高。如果设置为 `<span class="token number">0</span>`，则使用 `editor.lineHeight` 的值。    <span class="token property">"editor.suggestLineHeight"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    // 控制在键入触发字符后是否自动显示建议。    <span class="token property">"editor.suggestOnTriggerCharacters"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在建议列表中如何预先选择建议。    //  - first<span class="token operator">:</span> 始终选择第一个建议。    //  - recentlyUsed<span class="token operator">:</span> 选择最近的建议，除非进一步键入选择其他项。例如 `console. -> console.log`，因为最近补全过 `log`。    //  - recentlyUsedByPrefix<span class="token operator">:</span> 根据之前补全过的建议的前缀来进行选择。例如，`co -> console`、`con -> const`。    <span class="token property">"editor.suggestSelection"</span><span class="token operator">:</span> <span class="token string">"recentlyUsed"</span><span class="token punctuation">,</span>    // 启用 Tab 补全。    //  - on<span class="token operator">:</span> 在按下 Tab 键时进行 Tab 补全，将插入最佳匹配建议。    //  - off<span class="token operator">:</span> 禁用 Tab 补全。    //  - onlySnippets<span class="token operator">:</span> 在前缀匹配时进行 Tab 补全。在 <span class="token string">"quickSuggestions"</span> 未启用时体验最好。    <span class="token property">"editor.tabCompletion"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 一个制表符等于的空格数。在 `editor.detectIndentation` 启用时，根据文件内容，该设置可能会被覆盖。    <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>    // 覆盖当前所选颜色主题中的编辑器颜色和字体样式。    <span class="token property">"editor.tokenColorCustomizations"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 删除自动插入的尾随空白符号。    <span class="token property">"editor.trimAutoWhitespace"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 根据制表位插入和删除空格。    <span class="token property">"editor.useTabStops"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制是否根据文档中的文字计算自动完成列表。    <span class="token property">"editor.wordBasedSuggestions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 执行单词相关的导航或操作时作为单词分隔符的字符。    <span class="token property">"editor.wordSeparators"</span><span class="token operator">:</span> <span class="token string">"`~!@#$%^&amp;*()-=+[{]}\\|;:'\",.&lt;>/?"</span><span class="token punctuation">,</span>    // 控制折行的方式。    //  - off<span class="token operator">:</span> 永不换行。    //  - on<span class="token operator">:</span> 将在视区宽度处换行。    //  - wordWrapColumn<span class="token operator">:</span> 在 `editor.wordWrapColumn` 处折行。    //  - bounded<span class="token operator">:</span> 在视区宽度和 `editor.wordWrapColumn` 中的较小值处折行。    <span class="token property">"editor.wordWrap"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 在 `editor.wordWrap` 为 `wordWrapColumn`  或 `bounded` 时，控制编辑器的折行列。    <span class="token property">"editor.wordWrapColumn"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>    // 控制折行的缩进。    //  - none<span class="token operator">:</span> 没有缩进。折行从第 <span class="token number">1</span> 列开始。    //  - same<span class="token operator">:</span> 折行的缩进量与其父级相同。    //  - indent<span class="token operator">:</span> 折行的缩进量比其父级多 <span class="token number">1</span>。    //  - deepIndent<span class="token operator">:</span> 折行的缩进量比其父级多 <span class="token number">2</span>。    <span class="token property">"editor.wrappingIndent"</span><span class="token operator">:</span> <span class="token string">"same"</span><span class="token punctuation">,</span>    // 控制是否在“源代码管理”视图中始终显示内联操作。    <span class="token property">"scm.alwaysShowActions"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否始终显示“源代码管理提供程序”部分。    <span class="token property">"scm.alwaysShowProviders"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制编辑器中差异的显示效果。    <span class="token property">"scm.diffDecorations"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>    // 控制水槽中不同装饰的宽度(px<span class="token punctuation">)</span>(添加&amp;修改<span class="token punctuation">)</span>。    <span class="token property">"scm.diffDecorationsGutterWidth"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>    // 控制在 <span class="token string">"源代码管理提供程序"</span> 部分中可见的提供程序数。设置为 <span class="token string">"0"</span><span class="token punctuation">,</span> 以便能够手动调整视图的大小。    <span class="token property">"scm.providers.visible"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    // 控制工作台中活动栏的可见性。    <span class="token property">"workbench.activityBar.visible"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 覆盖当前所选颜色主题的颜色。    <span class="token property">"workbench.colorCustomizations"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 指定用在工作台中的颜色主题。    <span class="token property">"workbench.colorTheme"</span><span class="token operator">:</span> <span class="token string">"Default Dark+"</span><span class="token punctuation">,</span>    // 控制命令面板中保留最近使用命令的数量。设置为 <span class="token number">0</span> 时禁用命令历史功能。    <span class="token property">"workbench.commandPalette.history"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    // 当再次打开命令面板时，控制是否恢复上一次输入的内容。    <span class="token property">"workbench.commandPalette.preserveInput"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 如果在居中布局中打开了超过一组编辑器，控制是否自动将宽度调整为最大宽度值。当回到只打开了一组编辑器的状态，将自动将宽度调整为原始的居中宽度值。    <span class="token property">"workbench.editor.centeredLayoutAutoResize"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制编辑器组中最后一个选项卡关闭时这个空组的行为。若启用，将自动关闭空组。若禁用，空组仍将保留在网格布局中。    <span class="token property">"workbench.editor.closeEmptyGroups"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 当文件被其他进程删除或重命名时，控制是否自动关闭在这个期间内打开了此文件的编辑器。若禁用此项，在这种情况下将保留编辑器。请注意，若从应用内部进行删除，将始终关闭编辑器，并且为了保护您的数据，已更新文件始终不会关闭。    <span class="token property">"workbench.editor.closeOnFileDelete"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制打开的编辑器是否为预览编辑器。预览编辑器在被固定 (例如，通过双击或编辑<span class="token punctuation">)</span> 前可重用，其字体样式为斜体。    <span class="token property">"workbench.editor.enablePreview"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制从 Quick Open 打开的编辑器是否为预览编辑器。预览编辑器在被固定 (例如，通过双击或编辑<span class="token punctuation">)</span> 前可重用。    <span class="token property">"workbench.editor.enablePreviewFromQuickOpen"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制是否按最常使用的顺序或从左到右的顺序关闭选项卡。    <span class="token property">"workbench.editor.focusRecentEditorAfterClose"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制是否绘制已修改 (存在更新<span class="token punctuation">)</span> 的编辑器选项卡的顶部边框。    <span class="token property">"workbench.editor.highlightModifiedTabs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制编辑器标签的格式。    //  - default<span class="token operator">:</span> 显示文件名。当启用选项卡且在同一组内有两个相同名称的文件时，将添加每个文件路径中可以用于区分的部分。在选项卡被禁用且编辑器活动时，将显示相对于工作区文件夹的路径。    //  - short<span class="token operator">:</span> 在文件的目录名之后显示文件名。    //  - medium<span class="token operator">:</span> 在文件相对当前工作区文件夹的路径之后显示文件名。    //  - long<span class="token operator">:</span> 在文件的绝对路径之后显示文件名。    <span class="token property">"workbench.editor.labelFormat"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    // 控制编辑器打开的位置。选择 `left` 或 `right` 可分别在当前活动编辑器的左侧或右侧打开。选择 `first` (最前<span class="token punctuation">)</span> 或 `last` (最后<span class="token punctuation">)</span> 打开的位置与当前活动编辑器无关。    <span class="token property">"workbench.editor.openPositioning"</span><span class="token operator">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>    // 控制编辑器在并排打开时 (比如从资源管理器<span class="token punctuation">)</span> 出现的默认位置。默认在当前活动编辑器右侧打开。若更改为 `down`，则在当前活动编辑器下方打开。    <span class="token property">"workbench.editor.openSideBySideDirection"</span><span class="token operator">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>    // 在重新打开已关闭文件时，还原最后一个视图的状态 (如滚动位置<span class="token punctuation">)</span>。    <span class="token property">"workbench.editor.restoreViewState"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制是否在打开的任何可见组中显示编辑器。如果禁用，编辑器将优先在当前活动的编辑器组中打开。如果启用，将会显示在已打开的编辑器，而不是在当前活动的编辑器组中再次打开。请注意，有些情况下会忽略此设置，例如，强制编辑器在特定组中打开或当前活动组的一侧时。    <span class="token property">"workbench.editor.revealIfOpen"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否在编辑器选项卡中显示图标。要求同时启用图标主题。    <span class="token property">"workbench.editor.showIcons"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制打开的编辑器是否显示在选项卡中。    <span class="token property">"workbench.editor.showTabs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制编辑器选项卡中关闭按钮的位置，或是设置为 `off` 禁用。    <span class="token property">"workbench.editor.tabCloseButton"</span><span class="token operator">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>    // 控制编辑器选项卡的大小。    //  - fit<span class="token operator">:</span> 始终将标签页保持足够大，能够完全显示编辑器标签。    //  - shrink<span class="token operator">:</span> 在不能同时显示所有选项卡时，允许选项卡缩小。    <span class="token property">"workbench.editor.tabSizing"</span><span class="token operator">:</span> <span class="token string">"fit"</span><span class="token punctuation">,</span>    // 从 Microsoft 联机服务中获取要进行的实验。    <span class="token property">"workbench.enableExperiments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 指定在工作台中使用的图标主题，或指定 <span class="token string">"null"</span> 以不显示任何文件图标。    //  - <span class="token null">null</span><span class="token operator">:</span> 无文件图标    //  - vs-minimal    //  - vs-seti    //  - material-icon-theme    <span class="token property">"workbench.iconTheme"</span><span class="token operator">:</span> <span class="token string">"vs-seti"</span><span class="token punctuation">,</span>    // 控制列表和树中的键盘导航是否仅通过键入自动触发。如果设置为“<span class="token boolean">false</span>”，键盘导航只在执行“list.toggleKeyboardNavigation ”命令时触发，您可以为该命令指定键盘快捷方式。    <span class="token property">"workbench.list.automaticKeyboardNavigation"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制列表和树是否支持在工作台中进行水平滚动。    <span class="token property">"workbench.list.horizontalScrolling"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制工作台中的列表和树的键盘导航样式。它可为“简单”、“突出显示”或“筛选”。    //  - simple<span class="token operator">:</span> 简单键盘导航聚焦与键盘输入相匹配的元素。仅对前缀进行匹配。    //  - highlight<span class="token operator">:</span> 高亮键盘导航会突出显示与键盘输入相匹配的元素。进一步向上和向下导航将仅遍历突出显示的元素。    //  - filter<span class="token operator">:</span> 筛选器键盘导航将筛选出并隐藏与键盘输入不匹配的所有元素。    <span class="token property">"workbench.list.keyboardNavigation"</span><span class="token operator">:</span> <span class="token string">"highlight"</span><span class="token punctuation">,</span>    // 在通过鼠标多选树和列表条目时使用的修改键 (例如“资源管理器”、“打开的编辑器”和“源代码管理”视图<span class="token punctuation">)</span>。“在侧边打开”功能所需的鼠标动作 (若可用<span class="token punctuation">)</span> 将会相应调整，不与多选修改键冲突。    //  - ctrlCmd<span class="token operator">:</span> 映射为 `Ctrl` (Windows 和 Linux<span class="token punctuation">)</span> 或 `Command` (macOS<span class="token punctuation">)</span>。    //  - alt<span class="token operator">:</span> 映射为 `Alt` (Windows 和 Linux<span class="token punctuation">)</span> 或 `Option` (macOS<span class="token punctuation">)</span>。    <span class="token property">"workbench.list.multiSelectModifier"</span><span class="token operator">:</span> <span class="token string">"ctrlCmd"</span><span class="token punctuation">,</span>    // 控制在树和列表中怎样使用鼠标来展开子项（若支持）。对于树中的父节点，此设置将控制是使用单击还是双击来展开。注意，某些不适用于此设置的树或列表可能会忽略此项。    <span class="token property">"workbench.list.openMode"</span><span class="token operator">:</span> <span class="token string">"singleClick"</span><span class="token punctuation">,</span>    // 控制面板 (终端、调试控制台、输出、问题<span class="token punctuation">)</span> 的默认位置。可显示在工作台的底部或右侧。    <span class="token property">"workbench.panel.defaultLocation"</span><span class="token operator">:</span> <span class="token string">"bottom"</span><span class="token punctuation">,</span>    // 控制 Quick Open 是否在其失去焦点时自动关闭。    <span class="token property">"workbench.quickOpen.closeOnFocusLost"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在打开 Quick Open 视图时，控制是否自动恢复上一次输入的值。    <span class="token property">"workbench.quickOpen.preserveInput"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 配置默认使用的设置编辑器。    //  - ui<span class="token operator">:</span> 使用设置 ui 编辑器。    //  - json<span class="token operator">:</span> 使用 json 文件编辑器。    <span class="token property">"workbench.settings.editor"</span><span class="token operator">:</span> <span class="token string">"ui"</span><span class="token punctuation">,</span>    // 控制是否在设置中启用自然语言搜索。自然语言搜索由 Microsoft 联机服务提供。    <span class="token property">"workbench.settings.enableNaturalLanguageSearch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在打开按键绑定设置时是否同时打开显示所有默认按键绑定的编辑器。    <span class="token property">"workbench.settings.openDefaultKeybindings"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制在打开设置时是否同时打开显示所有默认设置的编辑器。    <span class="token property">"workbench.settings.openDefaultSettings"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制设置编辑器的目录在搜索时的行为。    //  - hide<span class="token operator">:</span> 在搜索时隐藏目录。    //  - filter<span class="token operator">:</span> 筛选目录为仅显示含有匹配设置的类别。单击一个类别将仅显示该类别的结果。    <span class="token property">"workbench.settings.settingsSearchTocBehavior"</span><span class="token operator">:</span> <span class="token string">"filter"</span><span class="token punctuation">,</span>    // 控制在将设置编辑为 json 时是否使用拆分 json 编辑器。    <span class="token property">"workbench.settings.useSplitJSON"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制边栏的位置。它可显示在工作台的左侧或右侧。    <span class="token property">"workbench.sideBar.location"</span><span class="token operator">:</span> <span class="token string">"left"</span><span class="token punctuation">,</span>    // 在没有从上一会话中恢复出信息的情况下，控制启动时显示的编辑器。    //  - none<span class="token operator">:</span> 在启动时不打开编辑器。    //  - welcomePage<span class="token operator">:</span> 打开欢迎页面 (默认<span class="token punctuation">)</span>。    //  - readme<span class="token operator">:</span> 打开包含一个自述文件的文件夹时<span class="token punctuation">,</span> 打开自述文件<span class="token punctuation">,</span> 否则回退到 <span class="token string">"欢迎页面"</span>。    //  - newUntitledFile<span class="token operator">:</span> 打开新的无标题文件 (仅在打开空工作区时适用<span class="token punctuation">)</span>。    //  - welcomePageInEmptyWorkbench<span class="token operator">:</span> 在打开空工作区时打开欢迎页面。    <span class="token property">"workbench.startupEditor"</span><span class="token operator">:</span> <span class="token string">"welcomePage"</span><span class="token punctuation">,</span>    // 控制是否显示工作台底部状态栏中的 Twitter 反馈 (笑脸图标<span class="token punctuation">)</span>。    <span class="token property">"workbench.statusBar.feedback.visible"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制工作台底部状态栏的可见性。    <span class="token property">"workbench.statusBar.visible"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用后，当没有打开编辑器时将显示水印提示。    <span class="token property">"workbench.tips.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 此设置已弃用<span class="token punctuation">,</span> 请改用 <span class="token string">"workbench.list.horizontalScrolling"</span>。    // 控制工作台中的树控件是否支持水平滚动。    <span class="token property">"workbench.tree.horizontalScrolling"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制树缩进(以像素为单位<span class="token punctuation">)</span>。    <span class="token property">"workbench.tree.indent"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>    // 启用工作台的网格布局。此设置可能会为工作台组件启用其他布局选项。    <span class="token property">"workbench.useExperimentalGridLayout"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否显示视图头部的操作项。视图头部操作项可以一直，或是仅当聚焦到和悬停在视图上时显示。    <span class="token property">"workbench.view.alwaysShowHeaderActions"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 如果已启用，将自动更改为高对比度主题；如果 Windows 正在使用高对比度主题，则当离开 Windows 高对比度主题时会更改为深色主题。    <span class="token property">"window.autoDetectHighContrast"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在关闭最后一个编辑器时是否关闭整个窗口。此设置仅适用于没有显示文件夹的窗口。    <span class="token property">"window.closeWhenEmpty"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 如果启用<span class="token punctuation">,</span> 双击标题栏中的应用程序图标将关闭窗口<span class="token punctuation">,</span> 并且该窗口无法通过图标拖动。此设置仅在 <span class="token string">"#window.titleBarStyle#"</span> 设置为 <span class="token string">"custom"</span> 时生效。    <span class="token property">"window.doubleClickIconToClose"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用后，即可使用 Alt 快捷键打开主菜单。若禁用助记键，这些 Alt 快捷键将能绑定到编辑器命令。    <span class="token property">"window.enableMenuBarMnemonics"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制菜单栏的可见性。“切换”设置表示隐藏菜单栏，按一次 Alt 键则将显示此菜单栏。默认情况下，除非窗口为全屏，否则菜单栏可见。    //  - default<span class="token operator">:</span> 菜单仅在全屏模式下隐藏。    //  - visible<span class="token operator">:</span> 菜单始终可见，即使处于全屏模式下。    //  - toggle<span class="token operator">:</span> 菜单隐藏，但可以通过 Alt 键显示。    //  - hidden<span class="token operator">:</span> 菜单始终隐藏。    <span class="token property">"window.menuBarVisibility"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    // 控制在已有窗口时新开窗口的尺寸。请注意，此设置对第一个打开的窗口无效。第一个窗口将始终恢复关闭前的大小和位置。    //  - default<span class="token operator">:</span> 在屏幕中心打开新窗口。    //  - inherit<span class="token operator">:</span> 以与上一个活动窗口相同的尺寸打开新窗口。    //  - maximized<span class="token operator">:</span> 打开最大化的新窗口。    //  - fullscreen<span class="token operator">:</span> 在全屏模式下打开新窗口。    <span class="token property">"window.newWindowDimensions"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    // 控制是否在新窗口中打开文件。    // 注意，此设置可能会被忽略 (例如，在使用 `--new-window` 或 `--reuse-window` 命令行选项时<span class="token punctuation">)</span>。    //  - on<span class="token operator">:</span> 在新窗口中打开文件。    //  - off<span class="token operator">:</span> 在文件所在文件夹的已有窗口中或在上一个活动窗口中打开文件。    //  - default<span class="token operator">:</span> 在新窗口中打开文件，除非文件从应用程序内进行选取 (例如，通过“文件”菜单<span class="token punctuation">)</span>。    <span class="token property">"window.openFilesInNewWindow"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 控制打开文件夹时是在新窗口打开还是替换上一个活动窗口。    // 注意，此设置可能会被忽略 (例如，在使用 `--new-window` 或 `--reuse-window` 命令行选项时<span class="token punctuation">)</span>。    //  - on<span class="token operator">:</span> 在新窗口中打开文件夹。    //  - off<span class="token operator">:</span> 文件夹将替换上一个活动窗口。    //  - default<span class="token operator">:</span> 在新窗口中打开文件夹，除非文件夹从应用程序内进行选取 (例如，通过“文件”菜单<span class="token punctuation">)</span>。    <span class="token property">"window.openFoldersInNewWindow"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    // 在另一实例无参启动时，控制是打开新的空窗口或是聚焦到最后运行的实例。    // 注意，此设置可能会被忽略 (例如，在使用 `--new-window` 或 `--reuse-window` 命令行选项时<span class="token punctuation">)</span>。    //  - on<span class="token operator">:</span> 打开一个新的空窗口。    //  - off<span class="token operator">:</span> 聚焦到上一活动的运行实例。    <span class="token property">"window.openWithoutArgumentsInNewWindow"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // 若窗口在处于全屏模式时退出，控制其在恢复时是否还原到全屏模式。    <span class="token property">"window.restoreFullscreen"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制窗口在重启后再次打开的方式。    //  - all<span class="token operator">:</span> 重新打开所有窗口。    //  - folders<span class="token operator">:</span> 重新打开所有文件夹。空工作区将不会被恢复。    //  - one<span class="token operator">:</span> 重新打开上一个活动窗口。    //  - none<span class="token operator">:</span> 永远不重新打开窗口。总是以一个空窗口启动。    <span class="token property">"window.restoreWindows"</span><span class="token operator">:</span> <span class="token string">"one"</span><span class="token punctuation">,</span>    // 根据活动编辑器控制窗口标题。变量是根据上下文替换的<span class="token operator">:</span><span class="token property">"${activeEditorShort}"</span><span class="token operator">:</span> 文件名 (例如 myFile.txt<span class="token punctuation">)</span>。    // - <span class="token property">"${activeEditorMedium}"</span><span class="token operator">:</span> 相对于工作区文件夹的文件路径 (例如<span class="token punctuation">,</span> myFolder/myFileFolder/myFile.txt<span class="token punctuation">)</span>。    // - <span class="token property">"${activeEditorLong}"</span><span class="token operator">:</span> 文件的完整路径 (例如 /Users/Development/myFolder/myFileFolder/myFile.txt<span class="token punctuation">)</span>。    // - <span class="token property">"${activeFolderShort}"</span><span class="token operator">:</span> 文件所在的文件夹名称 (例如<span class="token punctuation">,</span> myFileFolder<span class="token punctuation">)</span>。    // - <span class="token property">"${activeFolderMedium}"</span><span class="token operator">:</span> 相对于工作区文件夹的、包含文件的文件夹的路径<span class="token punctuation">,</span> (例如 myFolder/myFileFolder<span class="token punctuation">)</span>。    // - <span class="token property">"${activeFolderLong}"</span><span class="token operator">:</span> 文件所在文件夹的完整路径 (例如 /Users/Development/myFolder/myFileFolder<span class="token punctuation">)</span>。    // - <span class="token property">"${folderName}"</span><span class="token operator">:</span> 文件所在工作区文件夹的名称 (例如 myFolder<span class="token punctuation">)</span>。    // - <span class="token property">"${folderpath}"</span><span class="token operator">:</span> 文件所在工作区文件夹的路径 (例如 /Users/Development/myFolder<span class="token punctuation">)</span>。    // - <span class="token property">"${rootName}"</span><span class="token operator">:</span> 工作区的名称 (例如<span class="token punctuation">,</span> myFolder 或 myWorkspace<span class="token punctuation">)</span>。    // - <span class="token property">"${rootPath}"</span><span class="token operator">:</span> 工作区的文件路径 (例如 /Users/Development/myWorkspace<span class="token punctuation">)</span>。    // - <span class="token property">"${appName}"</span><span class="token operator">:</span> 例如 VS Code。    // - <span class="token property">"${dirty}"</span><span class="token operator">:</span> 表示活动编辑器为脏的脏指示器。    // - <span class="token property">"${separator}"</span><span class="token operator">:</span> 一种条件分隔符 (<span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 仅在被包含值或静态文本的变量包围时显示。    <span class="token property">"window.title"</span><span class="token operator">:</span> <span class="token string">"${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}"</span><span class="token punctuation">,</span>    // 调整窗口标题栏的外观。在 Linux 和 Windows 上，此设置也会影响应用程序和上下文菜单的外观。更改需要完全重新启动才能应用。    <span class="token property">"window.titleBarStyle"</span><span class="token operator">:</span> <span class="token string">"custom"</span><span class="token punctuation">,</span>    // 调整窗口的缩放级别。原始大小是 <span class="token number">0</span>，每次递增(例如 <span class="token number">1</span><span class="token punctuation">)</span>或递减(例如 -<span class="token number">1</span><span class="token punctuation">)</span>表示放大或缩小 <span class="token number">20</span>%。也可以输入小数以便以更精细的粒度调整缩放级别。    <span class="token property">"window.zoomLevel"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    // 配置语言的文件关联 (如<span class="token operator">:</span> `<span class="token property">"*.extension"</span><span class="token operator">:</span> <span class="token string">"html"</span>`<span class="token punctuation">)</span>。这些关联的优先级高于已安装语言的默认关联。    <span class="token property">"files.associations"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 启用后，将在文件打开时尝试猜测字符集编码。可以按语言对此项进行配置。    <span class="token property">"files.autoGuessEncoding"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制已更新文件的自动保存。可在<span class="token punctuation">[</span>此处<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/codebasics#_save-auto-save<span class="token punctuation">)</span>阅读有关自动保存的详细信息。    //  - off<span class="token operator">:</span> 永不自动保存更新后的文件。    //  - afterDelay<span class="token operator">:</span> 当文件修改后的时间超过 `files.autoSaveDelay` 中配置的值时自动进行保存。    //  - onFocusChange<span class="token operator">:</span> 编辑器失去焦点时自动保存更新后的文件。    //  - onWindowChange<span class="token operator">:</span> 窗口失去焦点时自动保存更新后的文件。    <span class="token property">"files.autoSave"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 控制自动保存已更新文件的延迟时间 (毫秒<span class="token punctuation">)</span>。仅在 `files.autoSave` 设置为 `afterDelay` 时生效。    <span class="token property">"files.autoSaveDelay"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    // 分配给新文件的默认语言模式。    <span class="token property">"files.defaultLanguage"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // 在删除文件或文件夹时，将它们移动到操作系统的“废纸篓”中 (Windows 为“回收站”<span class="token punctuation">)</span>。禁用此设置将永久删除文件或文件夹。    <span class="token property">"files.enableTrash"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在读取和写入文件时使用的默认字符集编码。可以按语言对此项进行配置。    //  - utf8<span class="token operator">:</span> UTF<span class="token number">-8</span>    //  - utf8bom<span class="token operator">:</span> UTF<span class="token number">-8</span> with BOM    //  - utf16le<span class="token operator">:</span> UTF<span class="token number">-16</span> LE    //  - utf16be<span class="token operator">:</span> UTF<span class="token number">-16</span> BE    //  - windows1252<span class="token operator">:</span> Western (Windows <span class="token number">1252</span><span class="token punctuation">)</span>    //  - iso88591<span class="token operator">:</span> Western (ISO <span class="token number">8859</span>-<span class="token number">1</span><span class="token punctuation">)</span>    //  - iso88593<span class="token operator">:</span> Western (ISO <span class="token number">8859</span>-<span class="token number">3</span><span class="token punctuation">)</span>    //  - iso885915<span class="token operator">:</span> Western (ISO <span class="token number">8859</span>-<span class="token number">15</span><span class="token punctuation">)</span>    //  - macroman<span class="token operator">:</span> Western (Mac Roman<span class="token punctuation">)</span>    //  - cp437<span class="token operator">:</span> DOS (CP <span class="token number">437</span><span class="token punctuation">)</span>    //  - windows1256<span class="token operator">:</span> Arabic (Windows <span class="token number">1256</span><span class="token punctuation">)</span>    //  - iso88596<span class="token operator">:</span> Arabic (ISO <span class="token number">8859</span>-<span class="token number">6</span><span class="token punctuation">)</span>    //  - windows1257<span class="token operator">:</span> Baltic (Windows <span class="token number">1257</span><span class="token punctuation">)</span>    //  - iso88594<span class="token operator">:</span> Baltic (ISO <span class="token number">8859</span>-<span class="token number">4</span><span class="token punctuation">)</span>    //  - iso885914<span class="token operator">:</span> Celtic (ISO <span class="token number">8859</span>-<span class="token number">14</span><span class="token punctuation">)</span>    //  - windows1250<span class="token operator">:</span> Central European (Windows <span class="token number">1250</span><span class="token punctuation">)</span>    //  - iso88592<span class="token operator">:</span> Central European (ISO <span class="token number">8859</span>-<span class="token number">2</span><span class="token punctuation">)</span>    //  - cp852<span class="token operator">:</span> Central European (CP <span class="token number">852</span><span class="token punctuation">)</span>    //  - windows1251<span class="token operator">:</span> Cyrillic (Windows <span class="token number">1251</span><span class="token punctuation">)</span>    //  - cp866<span class="token operator">:</span> Cyrillic (CP <span class="token number">866</span><span class="token punctuation">)</span>    //  - iso88595<span class="token operator">:</span> Cyrillic (ISO <span class="token number">8859</span>-<span class="token number">5</span><span class="token punctuation">)</span>    //  - koi8r<span class="token operator">:</span> Cyrillic (KOI8-R<span class="token punctuation">)</span>    //  - koi8u<span class="token operator">:</span> Cyrillic (KOI8-U<span class="token punctuation">)</span>    //  - iso885913<span class="token operator">:</span> Estonian (ISO <span class="token number">8859</span>-<span class="token number">13</span><span class="token punctuation">)</span>    //  - windows1253<span class="token operator">:</span> Greek (Windows <span class="token number">1253</span><span class="token punctuation">)</span>    //  - iso88597<span class="token operator">:</span> Greek (ISO <span class="token number">8859</span>-<span class="token number">7</span><span class="token punctuation">)</span>    //  - windows1255<span class="token operator">:</span> Hebrew (Windows <span class="token number">1255</span><span class="token punctuation">)</span>    //  - iso88598<span class="token operator">:</span> Hebrew (ISO <span class="token number">8859</span>-<span class="token number">8</span><span class="token punctuation">)</span>    //  - iso885910<span class="token operator">:</span> Nordic (ISO <span class="token number">8859</span>-<span class="token number">10</span><span class="token punctuation">)</span>    //  - iso885916<span class="token operator">:</span> Romanian (ISO <span class="token number">8859</span>-<span class="token number">16</span><span class="token punctuation">)</span>    //  - windows1254<span class="token operator">:</span> Turkish (Windows <span class="token number">1254</span><span class="token punctuation">)</span>    //  - iso88599<span class="token operator">:</span> Turkish (ISO <span class="token number">8859</span>-<span class="token number">9</span><span class="token punctuation">)</span>    //  - windows1258<span class="token operator">:</span> Vietnamese (Windows <span class="token number">1258</span><span class="token punctuation">)</span>    //  - gbk<span class="token operator">:</span> Simplified Chinese (GBK<span class="token punctuation">)</span>    //  - gb18030<span class="token operator">:</span> Simplified Chinese (GB18030<span class="token punctuation">)</span>    //  - cp950<span class="token operator">:</span> Traditional Chinese (Big5<span class="token punctuation">)</span>    //  - big5hkscs<span class="token operator">:</span> Traditional Chinese (Big5-HKSCS<span class="token punctuation">)</span>    //  - shiftjis<span class="token operator">:</span> Japanese (Shift JIS<span class="token punctuation">)</span>    //  - eucjp<span class="token operator">:</span> Japanese (EUC-JP<span class="token punctuation">)</span>    //  - euckr<span class="token operator">:</span> Korean (EUC-KR<span class="token punctuation">)</span>    //  - windows874<span class="token operator">:</span> Thai (Windows <span class="token number">874</span><span class="token punctuation">)</span>    //  - iso885911<span class="token operator">:</span> Latin/Thai (ISO <span class="token number">8859</span>-<span class="token number">11</span><span class="token punctuation">)</span>    //  - koi8ru<span class="token operator">:</span> Cyrillic (KOI8-RU<span class="token punctuation">)</span>    //  - koi8t<span class="token operator">:</span> Tajik (KOI8-T<span class="token punctuation">)</span>    //  - gb2312<span class="token operator">:</span> Simplified Chinese (GB <span class="token number">2312</span><span class="token punctuation">)</span>    //  - cp865<span class="token operator">:</span> Nordic DOS (CP <span class="token number">865</span><span class="token punctuation">)</span>    //  - cp850<span class="token operator">:</span> Western European DOS (CP <span class="token number">850</span><span class="token punctuation">)</span>    <span class="token property">"files.encoding"</span><span class="token operator">:</span> <span class="token string">"utf8"</span><span class="token punctuation">,</span>    // 默认行尾字符。    //  - \n<span class="token operator">:</span> LF    //  - \r\n<span class="token operator">:</span> CRLF    //  - auto<span class="token operator">:</span> 使用具体操作系统规定的行末字符。    <span class="token property">"files.eol"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 配置排除的文件和文件夹的 glob 模式。例如，文件资源管理器将根据此设置决定要显示或隐藏的文件和文件夹。可在<span class="token punctuation">[</span>此处<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/codebasics#_advanced-search-options<span class="token punctuation">)</span>阅读有关 glob 模式的详细信息。    <span class="token property">"files.exclude"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"**/.git"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.svn"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.hg"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/CVS"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.DS_Store"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 控制是否在会话间记住未保存的文件，以允许在退出编辑器时跳过保存提示。    //  - off<span class="token operator">:</span> 禁用热退出。    //  - onExit<span class="token operator">:</span> 在 Windows/Linux 平台关闭最后一个窗口，或者在全平台触发 `workbench.action.quit` 命令 (命令托盘、键绑定、菜单<span class="token punctuation">)</span> 时进行热退出。下次启动时将还原所有已备份的窗口。    //  - onExitAndWindowClose<span class="token operator">:</span> 在 Windows/Linux 平台关闭最后一个窗口、触发 `workbench.action.quit` 命令 (命令托盘、键绑定、菜单<span class="token punctuation">)</span> 会引起应用程序关闭。对于任何有文件夹打开的窗口，则不论该窗口是否是最后一个窗口进行热退出。下次启动时将还原所有未打开文件夹的窗口。若要还原打开有文件夹的窗口，请将 `window.restoreWindows` 设置为 `all`。    <span class="token property">"files.hotExit"</span><span class="token operator">:</span> <span class="token string">"onExit"</span><span class="token punctuation">,</span>    // 启用后，保存文件时在文件末尾插入一个最终新行。    <span class="token property">"files.insertFinalNewline"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 在打开大型文件时，控制 VS Code 可在重启后使用的内存。在命令行中指定 `--max-memory=新的大小` 参数可达到相同效果。    <span class="token property">"files.maxMemoryForLargeFilesMB"</span><span class="token operator">:</span> <span class="token number">4096</span><span class="token punctuation">,</span>    // 启用后，保存文件时将删除在最终新行后的所有新行。    <span class="token property">"files.trimFinalNewlines"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用后，将在保存文件时剪裁尾随空格。    <span class="token property">"files.trimTrailingWhitespace"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 配置文件路径的 glob 模式以从文件监视排除。模式必须在绝对路径上匹配(例如 ** 前缀或完整路径需正确匹配<span class="token punctuation">)</span>。更改此设置需要重启。如果在启动时遇到 Code 消耗大量 CPU 时间，则可以排除大型文件夹以减少初始加载。    <span class="token property">"files.watcherExclude"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"**/.git/objects/**"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/.git/subtree-cache/**"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/node_modules/*/**"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 控制在打开禅模式时是否启用居中布局。    <span class="token property">"zenMode.centerLayout"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在打开禅模式时是否将工作台切换到全屏。    <span class="token property">"zenMode.fullScreen"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在打开禅模式时是否隐藏工作台左侧的活动栏。    <span class="token property">"zenMode.hideActivityBar"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在打开禅模式时是否隐藏编辑器行号。    <span class="token property">"zenMode.hideLineNumbers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在打开禅模式时是否隐藏工作台底部的状态栏。    <span class="token property">"zenMode.hideStatusBar"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在打开禅模式时是否隐藏工作台选项卡。    <span class="token property">"zenMode.hideTabs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 若窗口在处于禅模式时退出，控制其在恢复时是否还原到禅模式。    <span class="token property">"zenMode.restore"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制资源管理器是否在打开文件时自动显示并选择。    <span class="token property">"explorer.autoReveal"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制资源管理器是否在把文件删除到废纸篓时进行确认。    <span class="token property">"explorer.confirmDelete"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在资源管理器内拖放移动文件或文件夹时是否进行确认。    <span class="token property">"explorer.confirmDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制文件修饰是否应使用徽章。    <span class="token property">"explorer.decorations.badges"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制文件修饰是否应使用颜色。    <span class="token property">"explorer.decorations.colors"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制资源管理器是否允许通过拖放移动文件和文件夹。    <span class="token property">"explorer.enableDragAndDrop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在“打开的编辑器”窗格中显示的编辑器数量。    <span class="token property">"explorer.openEditors.visible"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>    // 控制文件和文件夹在资源管理器中的排列顺序。    //  - default<span class="token operator">:</span> 按名称的字母顺序排列文件和文件夹。文件夹显示在文件前。    //  - mixed<span class="token operator">:</span> 按名称的字母顺序排列文件和文件夹。两者穿插显示。    //  - filesFirst<span class="token operator">:</span> 按名称的字母顺序排列文件和文件夹。文件显示在文件夹前。    //  - type<span class="token operator">:</span> 按扩展名的字母顺序排列文件和文件夹。文件夹显示在文件前。    //  - modified<span class="token operator">:</span> 按最后修改日期降序排列文件和文件夹。文件夹显示在文件前。    <span class="token property">"explorer.sortOrder"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    // 在搜索视图中控制操作栏的位置。    //  - auto<span class="token operator">:</span> 当搜索视图较窄时将操作栏置于右侧，当搜索视图较宽时，将它紧接在内容之后。    //  - right<span class="token operator">:</span> 始终将操作栏放置在右侧。    <span class="token property">"search.actionsPosition"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 控制是折叠还是展开搜索结果。    //  - auto<span class="token operator">:</span> Files with less than <span class="token number">10</span> results are expanded. Others are collapsed.    //  - alwaysCollapse    //  - alwaysExpand    <span class="token property">"search.collapseResults"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 配置在搜索中排除的文件和文件夹的 glob 模式。已经继承 `files.exclude` 设置的所有 glob 模式。可在<span class="token punctuation">[</span>此处<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/codebasics#_advanced-search-options<span class="token punctuation">)</span>阅读有关 glob 模式的详细信息。    <span class="token property">"search.exclude"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"**/node_modules"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"**/bower_components"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 控制是否在搜索中跟踪符号链接。    <span class="token property">"search.followSymlinks"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制搜索功能是显示在侧边栏，还是显示在水平空间更大的面板区域。    <span class="token property">"search.location"</span><span class="token operator">:</span> <span class="token string">"sidebar"</span><span class="token punctuation">,</span>    // 启用后，搜索服务进程将保持活动状态，而不是在一个小时不活动后关闭。这将使文件搜索缓存保留在内存中。    <span class="token property">"search.maintainFileSearchCache"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 是否在 Quick Open 的文件结果中包含最近打开的文件。    <span class="token property">"search.quickOpen.includeHistory"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制 Quick Open 文件结果中是否包括全局符号搜索的结果。    <span class="token property">"search.quickOpen.includeSymbols"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否在扩展宿主中运行搜索。重启后才能生效。    <span class="token property">"search.runInExtensionHost"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否显示搜索结果所在的行号。    <span class="token property">"search.showLineNumbers"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 若搜索词全为小写，则不区分大小写进行搜索，否则区分大小写进行搜索。    <span class="token property">"search.smartCase"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制在搜索文件时是否使用全局 `.gitignore` 和 `.ignore` 文件。    <span class="token property">"search.useGlobalIgnoreFiles"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制在搜索文件时是否使用 `.gitignore` 和 `.ignore` 文件。    <span class="token property">"search.useIgnoreFiles"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 是否在文本搜索中使用 pcre2 正则表达式引擎。这允许使用一些高级正则表达式功能<span class="token punctuation">,</span> 如前瞻和反向引用。但是<span class="token punctuation">,</span> 并非所有 pcre2 功能都受支持-仅支持 javascript 也支持的功能。    <span class="token property">"search.usePCRE2"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制在选择或替换匹配项时是否打开“替换预览”视图。    <span class="token property">"search.useReplacePreview"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 已弃用。请考虑使用 <span class="token string">"search.usePCRE2"</span> 获取对高级正则表达式功能的支持。    // 此设置已被弃用，将回退到 <span class="token string">"search.usePCRE2"</span>。    <span class="token property">"search.useRipgrep"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 已弃用。请改用 <span class="token string">"search.runInExtensionHost"</span>    // 控制是否在扩展宿主中运行搜索    <span class="token property">"searchRipgrep.enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 使用的代理设置。如果没有设置，将从 http_proxy 和 https_proxy 环境变量中获取。    <span class="token property">"http.proxy"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // 要作为每个网络请求的 <span class="token string">"Proxy-Authorization"</span> 标头发送的值。    <span class="token property">"http.proxyAuthorization"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 控制是否根据提供的 CA 列表验证代理服务器证书。    <span class="token property">"http.proxyStrictSSL"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 对扩展使用代理支持。    //  - off<span class="token operator">:</span> 禁用对扩展的代理支持。    //  - on<span class="token operator">:</span> 为扩展启用代理支持。    //  - override<span class="token operator">:</span> 为扩展启用代理支持，覆盖请求选项。    <span class="token property">"http.proxySupport"</span><span class="token operator">:</span> <span class="token string">"override"</span><span class="token punctuation">,</span>    // 控制是否应从操作系统加载 CA 证书。(在 Windows 和 macOS 上<span class="token punctuation">,</span> 关闭此窗口后需要重新加载窗口。    <span class="token property">"http.systemCertificates"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 此设置已弃用，请改用“update.mode”。    // 配置是否接收自动更新。更改后需要重新启动。更新是从微软在线服务获取的。    <span class="token property">"update.channel"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    // 启用 Windows 后台更新。更新将从 Microsoft 联机服务中获取。    <span class="token property">"update.enableWindowsBackgroundUpdates"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 配置是否接收自动更新。更改后需要重新启动。更新是从微软在线服务获取的。    //  - none<span class="token operator">:</span> 禁用更新。    //  - manual<span class="token operator">:</span> 禁用自动后台更新检查。如果手动检查更新，更新将可用。    //  - default<span class="token operator">:</span> 启用自动更新检查。代码将定期自动检查更新。    <span class="token property">"update.mode"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    // 在更新后显示发行说明。发行说明将从 Microsoft 联机服务中获取。    <span class="token property">"update.showReleaseNotes"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用/禁用 HTML 标记的自动关闭。    <span class="token property">"html.autoClosingTags"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // A list of JSON file paths that define custom tags<span class="token punctuation">,</span> properties and other HTML syntax constructs. Only workspace folder setting will be read.    <span class="token property">"html.experimental.customData"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // List of tags<span class="token punctuation">,</span> comma separated<span class="token punctuation">,</span> where the content shouldn't be reformatted. `<span class="token null">null</span>` defaults to the `pre` tag.    <span class="token property">"html.format.contentUnformatted"</span><span class="token operator">:</span> <span class="token string">"pre,code,textarea"</span><span class="token punctuation">,</span>    // 启用或禁用默认 HTML 格式化程序。    <span class="token property">"html.format.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 以新行结束。    <span class="token property">"html.format.endWithNewline"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 以逗号分隔的标记列表，其中的标记之前将有额外新行。若为 `<span class="token null">null</span>`，默认包含 `<span class="token string">"head, body, /html"</span>`。    <span class="token property">"html.format.extraLiners"</span><span class="token operator">:</span> <span class="token string">"head, body, /html"</span><span class="token punctuation">,</span>    // 对 `<span class="token punctuation">{</span><span class="token punctuation">{</span>#foo<span class="token punctuation">}</span><span class="token punctuation">}</span>` 和 `<span class="token punctuation">{</span><span class="token punctuation">{</span>/foo<span class="token punctuation">}</span><span class="token punctuation">}</span>` 进行格式化与缩进。    <span class="token property">"html.format.indentHandlebars"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 缩进 `&lt;head>` 和 `&lt;body>` 部分。    <span class="token property">"html.format.indentInnerHtml"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 保留在一个区块中的换行符的最大数量。若为 `<span class="token null">null</span>`，则没有限制。    <span class="token property">"html.format.maxPreserveNewLines"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 控制是否保留元素前已有的换行符。仅适用于元素前，不适用于标记内或文本。    <span class="token property">"html.format.preserveNewLines"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 以逗号分隔的标记列表，其中的内容不会被重新格式化。若为 `<span class="token null">null</span>`，默认包含所有列于 https<span class="token operator">:</span>//www.w3.org/TR/html5/dom.html#phrasing-content 的标记。    <span class="token property">"html.format.unformatted"</span><span class="token operator">:</span> <span class="token string">"wbr"</span><span class="token punctuation">,</span>    // 对属性进行换行。    //  - auto<span class="token operator">:</span> 仅在超出行长度时才对属性进行换行。    //  - force<span class="token operator">:</span> 对除第一个属性外的其他每个属性进行换行。    //  - force-aligned<span class="token operator">:</span> 对除第一个属性外的其他每个属性进行换行，并保持对齐。    //  - force-expand-multiline<span class="token operator">:</span> 对每个属性进行换行。    //  - aligned-multiple<span class="token operator">:</span> 当超出折行长度时，将属性进行垂直对齐。    //  - preserve<span class="token operator">:</span> 保留属性的包装    //  - preserve-aligned<span class="token operator">:</span> 保留属性的包装，但对齐。    <span class="token property">"html.format.wrapAttributes"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 每行最大字符数(<span class="token number">0</span> = 禁用<span class="token punctuation">)</span>。    <span class="token property">"html.format.wrapLineLength"</span><span class="token operator">:</span> <span class="token number">120</span><span class="token punctuation">,</span>    // 配置内置 HTML 语言支持是否建议 HTML5 标记、属性和值。    <span class="token property">"html.suggest.html5"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 跟踪 VS Code 与 HTML 语言服务器之间的通信。    <span class="token property">"html.trace.server"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 配置内置的 HTML 语言支持是否对嵌入的脚本进行验证。    <span class="token property">"html.validate.scripts"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 配置内置 HTML 语言支持是否对嵌入的样式进行验证。    <span class="token property">"html.validate.styles"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 已弃用设置 <span class="token string">"json.colorDecorators.enable"</span>，请改用 <span class="token string">"editor.colorDecorators"</span>。    // 启用或禁用颜色修饰器    <span class="token property">"json.colorDecorators.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用或禁用默认 JSON 格式化程序。    <span class="token property">"json.format.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 将当前项目中的 JSON 文件与架构关联起来    <span class="token property">"json.schemas"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 跟踪 VS Code 和 JSON 语言服务器之间的通信。    <span class="token property">"json.trace.server"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 设置换行符如何在 markdown 预览中呈现。将其设置为 <span class="token string">"true"</span> 会为每一个新行创建一个 &lt;br>。    <span class="token property">"markdown.preview.breaks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 在 Markdown 预览中双击切换到编辑器。    <span class="token property">"markdown.preview.doubleClickToSwitchToEditor"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制 Markdown 预览中使用的字体系列。    <span class="token property">"markdown.preview.fontFamily"</span><span class="token operator">:</span> <span class="token string">"-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'Ubuntu', 'Droid Sans', sans-serif"</span><span class="token punctuation">,</span>    // 控制 Markdown 预览中使用的字号(以像素为单位<span class="token punctuation">)</span>。    <span class="token property">"markdown.preview.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    // 控制 Markdown 预览中使用的行高。此数值与字号相关。    <span class="token property">"markdown.preview.lineHeight"</span><span class="token operator">:</span> <span class="token number">1.6</span><span class="token punctuation">,</span>    // 在 Markdown 预览中启用或禁用将类似 URL 的文本转换为链接。    <span class="token property">"markdown.preview.linkify"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在 Markdown 预览中标记当前的编辑器选定内容。    <span class="token property">"markdown.preview.markEditorSelection"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在预览中，控制如何处理指向 Markdown 文件的链接。    //  - inPreview<span class="token operator">:</span> 尝试在 Markdown 预览中打开链接    //  - inEditor<span class="token operator">:</span> 尝试在编辑器中打开链接    <span class="token property">"markdown.preview.openMarkdownLinks"</span><span class="token operator">:</span> <span class="token string">"inPreview"</span><span class="token punctuation">,</span>    // 滚动 Markdown 预览时，更新其编辑器视图。    <span class="token property">"markdown.preview.scrollEditorWithPreview"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 滚动 Markdown 编辑器时，更新其预览视图。    <span class="token property">"markdown.preview.scrollPreviewWithEditor"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 此设置已被 <span class="token string">"markdown.preview.scrollPreviewWithEditor"</span> 替换且不再有任何效果。    // <span class="token punctuation">[</span>弃用<span class="token punctuation">]</span> 滚动 Markdown 预览以显示编辑器当前所选行。    <span class="token property">"markdown.preview.scrollPreviewWithEditorSelection"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 要在 Markdown 预览中使用的 CSS 样式表的 URL 或本地路径列表。相对路径被解释为相对于资源管理器中打开的文件夹。如果没有任何打开的文件夹，则会被解释为相对于 Markdown 文件的位置。所有的 <span class="token string">"\" 需写为 "</span>\\"。    <span class="token property">"markdown.styles"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 对 Markdown 扩展启用调试日志记录。    <span class="token property">"markdown.trace"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 控制是否启用内置 PHP 语言建议。支持对 PHP 全局变量和变量进行建议。    <span class="token property">"php.suggest.basic"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用/禁用内置的 PHP 验证。    <span class="token property">"php.validate.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 指向 PHP 可执行文件。    <span class="token property">"php.validate.executablePath"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 不管 linter 是在 save 还是在 type 上运行。    <span class="token property">"php.validate.run"</span><span class="token operator">:</span> <span class="token string">"onSave"</span><span class="token punctuation">,</span>    // 启用或禁用自动关闭 JSX 标记。要求工作区使用高于 <span class="token number">3.0</span> 版本的 TypeScript。    <span class="token property">"javascript.autoClosingTags"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用/禁用 JavaScript 格式化程序。    <span class="token property">"javascript.format.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义逗号分隔符后面的空格处理。    <span class="token property">"javascript.format.insertSpaceAfterCommaDelimiter"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义 constructor 关键字后的空格处理方式。要求工作区使用高于 <span class="token number">2.3</span>.<span class="token number">0</span> 版本的 TypeScript。    <span class="token property">"javascript.format.insertSpaceAfterConstructor"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义匿名函数的函数关键字后面的空格处理。    <span class="token property">"javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义控制流语句中关键字后面的空格处理。    <span class="token property">"javascript.format.insertSpaceAfterKeywordsInControlFlowStatements"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。    <span class="token property">"javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义非空大括号中左括号后和右括号前的空格处理方式。要求工作区使用高于 <span class="token number">2.3</span>.<span class="token number">0</span> 版本的 TypeScript。    <span class="token property">"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义非空中括号的左括号后和右括号前的空格处理方式。    <span class="token property">"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义非空小括号的左括号后和右括号前的空格处理方式。    <span class="token property">"javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义模板字符串括号中左括号后和右括号前的空格处理方式。    <span class="token property">"javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义 for 语句中分号之后的空格处理方式。    <span class="token property">"javascript.format.insertSpaceAfterSemicolonInForStatements"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义二进制运算符后面的空格处理    <span class="token property">"javascript.format.insertSpaceBeforeAndAfterBinaryOperators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义函数参数括号前的空格处理方式。    <span class="token property">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义控制块的左括号是否放置在新的一行。    <span class="token property">"javascript.format.placeOpenBraceOnNewLineForControlBlocks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义函数的左大括号是否放置在新的一行。    <span class="token property">"javascript.format.placeOpenBraceOnNewLineForFunctions"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用或禁用 JavaScript 文件的语义检查。若有 jsconfig.json 或 tsconfig.json 文件，将覆盖此设置。要求工作区使用高于 <span class="token number">2.3</span>.<span class="token number">1</span> 版本的 TypeScript。    <span class="token property">"javascript.implicitProjectConfig.checkJs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 对不属于任何工程的 JavaScript 文件启用或禁用 `experimentalDecorators` 设置。若有 jsconfig.json 或 tsconfig.json 文件，将覆盖此设置。要求工作区使用高于 <span class="token number">2.3</span>.<span class="token number">1</span> 版本的 TypeScript。    <span class="token property">"javascript.implicitProjectConfig.experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 自动 import 语句中路径的首选样式。    //  - auto<span class="token operator">:</span> 推断最短的路径类型。    //  - relative<span class="token operator">:</span> 相对于文件位置。    //  - non-relative<span class="token operator">:</span> 根据 `jsconfig.json` 或 `tsconfig.json` 中配置的 `baseUrl` 。    <span class="token property">"javascript.preferences.importModuleSpecifier"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 用于快速修复的首选引用样式<span class="token operator">:</span> `single` (单引号<span class="token punctuation">)</span>、`double` (双引号<span class="token punctuation">)</span> 或 `auto` (从已有 import 语句中推测引号类型<span class="token punctuation">)</span>。要求工作区使用高于 <span class="token number">2.9</span> 版本的 TypeScript。    <span class="token property">"javascript.preferences.quoteStyle"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 启用/禁用在重命名过程中引入对象速记属性的别名。需要在工作区中使用 TypeScript <span class="token number">3.4</span> 或更高版本。    <span class="token property">"javascript.preferences.renameShorthandProperties"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用/禁用在 JavaScript 文件中引用 CodeLens。    <span class="token property">"javascript.referencesCodeLens.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用或禁用自动导入建议。要求工作区使用高于 <span class="token number">2.6</span>.<span class="token number">1</span> 版本的 TypeScript。    <span class="token property">"javascript.suggest.autoImports"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 完成函数的参数签名。    <span class="token property">"javascript.suggest.completeFunctionCalls"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用/禁用对完成 JSDoc 注释的建议。    <span class="token property">"javascript.suggest.completeJSDocs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用或禁用自动完成建议。    <span class="token property">"javascript.suggest.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用或禁用在 JavaScript 建议列表中包含文件中的唯一名称。    <span class="token property">"javascript.suggest.names"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在 import 语句和 require 调用中，启用或禁用路径建议。    <span class="token property">"javascript.suggest.paths"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用或禁用编辑器中 JavaScript 文件的建议诊断。要求工作区使用高于 <span class="token number">2.8</span> 版本的 TypeScript。    <span class="token property">"javascript.suggestionActions.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 当在 VS Code 中重命名或移动文件时，启用或禁用自动更新导入路径。要求工作区使用高于 <span class="token number">2.9</span> 版本的 TypeScript。    //  - prompt<span class="token operator">:</span> 在每次重命名时进行提示。    //  - always<span class="token operator">:</span> 始终自动更新路径。    //  - never<span class="token operator">:</span> 一律不要重命名路径，也不要提示。    <span class="token property">"javascript.updateImportsOnFileMove.enabled"</span><span class="token operator">:</span> <span class="token string">"prompt"</span><span class="token punctuation">,</span>    // 启用/禁用 JavaScript 验证。    <span class="token property">"javascript.validate.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用或禁用自动关闭 JSX 标记。要求工作区使用高于 <span class="token number">3.0</span> 版本的 TypeScript。    <span class="token property">"typescript.autoClosingTags"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 检查是否安装了 NPM 以自动获取类型。    <span class="token property">"typescript.check.npmIsInstalled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 禁用自动类型获取。自动类型获取从 npm 提取 `@types` 包，提高对于外部库的 IntelliSense 能力。    <span class="token property">"typescript.disableAutomaticTypeAcquisition"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用/禁用默认 TypeScript 格式化程序。    <span class="token property">"typescript.format.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义逗号分隔符后面的空格处理。    <span class="token property">"typescript.format.insertSpaceAfterCommaDelimiter"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义 constructor 关键字后的空格处理方式。要求工作区使用高于 <span class="token number">2.3</span>.<span class="token number">0</span> 版本的 TypeScript。    <span class="token property">"typescript.format.insertSpaceAfterConstructor"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义匿名函数的函数关键字后面的空格处理。    <span class="token property">"typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义控制流语句中关键字后面的空格处理。    <span class="token property">"typescript.format.insertSpaceAfterKeywordsInControlFlowStatements"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。    <span class="token property">"typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义非空大括号中左括号后和右括号前的空格处理方式。要求工作区使用高于 <span class="token number">2.3</span>.<span class="token number">0</span> 版本的 TypeScript。    <span class="token property">"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义非空中括号的左括号后和右括号前的空格处理方式。    <span class="token property">"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义非空小括号的左括号后和右括号前的空格处理方式。    <span class="token property">"typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义模板字符串括号中左括号后和右括号前的空格处理方式。    <span class="token property">"typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义 for 语句中分号之后的空格处理方式。    <span class="token property">"typescript.format.insertSpaceAfterSemicolonInForStatements"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义 TypeScript 中类型断言后的空格处理方式。要求工作区使用高于 <span class="token number">2.4</span> 版本的 TypeScript。    <span class="token property">"typescript.format.insertSpaceAfterTypeAssertion"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义二进制运算符后面的空格处理    <span class="token property">"typescript.format.insertSpaceBeforeAndAfterBinaryOperators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 定义函数参数括号前的空格处理方式。    <span class="token property">"typescript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义控制块的左括号是否放置在新的一行。    <span class="token property">"typescript.format.placeOpenBraceOnNewLineForControlBlocks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义函数的左大括号是否放置在新的一行。    <span class="token property">"typescript.format.placeOpenBraceOnNewLineForFunctions"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用或禁用实现 CodeLens。此 CodeLens 显示接口的实现。    <span class="token property">"typescript.implementationsCodeLens.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 设置在报告 JavaScript 和 TypeScript 的错误时使用的区域设置。要求工作区使用高于 <span class="token number">2.6</span>.<span class="token number">0</span> 版本的 TypeScript。默认 (`<span class="token null">null</span>`<span class="token punctuation">)</span> 使用 VS Code 的区域设置。    <span class="token property">"typescript.locale"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 指定用于自动获取类型的 NPM 可执行文件的路径。要求工作区使用高于 <span class="token number">2.3</span>.<span class="token number">4</span> 版本的 TypeScript。    <span class="token property">"typescript.npm"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 自动 import 语句中路径的首选样式。    //  - auto<span class="token operator">:</span> 推断最短的路径类型。    //  - relative<span class="token operator">:</span> 相对于文件位置。    //  - non-relative<span class="token operator">:</span> 根据 `jsconfig.json` 或 `tsconfig.json` 中配置的 `baseUrl` 。    <span class="token property">"typescript.preferences.importModuleSpecifier"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 用于快速修复的首选引用样式<span class="token operator">:</span> `single` (单引号<span class="token punctuation">)</span>、`double` (双引号<span class="token punctuation">)</span> 或 `auto` (从已有 import 语句中推测引号类型<span class="token punctuation">)</span>。要求工作区使用高于 <span class="token number">2.9</span> 版本的 TypeScript。    <span class="token property">"typescript.preferences.quoteStyle"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 启用/禁用在重命名过程中引入对象速记属性的别名。需要在工作区中使用 TypeScript <span class="token number">3.4</span> 或更高版本。    <span class="token property">"typescript.preferences.renameShorthandProperties"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在 TypeScript 文件中启用或禁用引用 CodeLens。    <span class="token property">"typescript.referencesCodeLens.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 将风格检查的问题报告为警告。    <span class="token property">"typescript.reportStyleChecksAsWarnings"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用或禁用自动导入建议。要求工作区使用高于 <span class="token number">2.6</span>.<span class="token number">1</span> 版本的 TypeScript。    <span class="token property">"typescript.suggest.autoImports"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 完成函数的参数签名。    <span class="token property">"typescript.suggest.completeFunctionCalls"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用/禁用对完成 JSDoc 注释的建议。    <span class="token property">"typescript.suggest.completeJSDocs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用或禁用自动完成建议。    <span class="token property">"typescript.suggest.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在 import 语句和 require 调用中，启用或禁用路径建议。    <span class="token property">"typescript.suggest.paths"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用或禁用编辑器中 TypeScript 文件的建议诊断。要求工作区使用高于 <span class="token number">2.8</span> 版本的 TypeScript。    <span class="token property">"typescript.suggestionActions.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用或禁用偶尔出现的有关 JavaScript 和 TypeScript 的调查，帮助我们改善 VS Code 对两者的支持。    <span class="token property">"typescript.surveys.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制对 tsc 任务的自动检测。    //  - on<span class="token operator">:</span> 同时创建生成和监视任务。    //  - off<span class="token operator">:</span> 禁用此功能。    //  - build<span class="token operator">:</span> 仅创建单次运行编译任务。    //  - watch<span class="token operator">:</span> 仅创建编译和监视任务。    <span class="token property">"typescript.tsc.autoDetect"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // 指定包含要使用的 tsserver 和 lib*.d.ts 文件的文件夹路径。    <span class="token property">"typescript.tsdk"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 将 TS 服务器的日志保存到一个文件。此日志可用于诊断 TS 服务器问题。日志可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。    <span class="token property">"typescript.tsserver.log"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 其他用于搜索 TypeScript 语言服务插件的路径。要求工作区使用高于 <span class="token number">2.3</span>.<span class="token number">0</span> 版本的 TypeScript。    <span class="token property">"typescript.tsserver.pluginPaths"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 对发送到 TS 服务器的消息启用跟踪。此跟踪信息可用于诊断 TS 服务器问题。 跟踪信息可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。    <span class="token property">"typescript.tsserver.trace"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 当在 VS Code 中重命名或移动文件时，启用或禁用自动更新导入路径。要求工作区使用高于 <span class="token number">2.9</span> 版本的 TypeScript。    //  - prompt<span class="token operator">:</span> 在每次重命名时进行提示。    //  - always<span class="token operator">:</span> 始终自动更新路径。    //  - never<span class="token operator">:</span> 一律不要重命名路径，也不要提示。    <span class="token property">"typescript.updateImportsOnFileMove.enabled"</span><span class="token operator">:</span> <span class="token string">"prompt"</span><span class="token punctuation">,</span>    // 启用/禁用 TypeScript 验证。    <span class="token property">"typescript.validate.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制评论面板应何时打开。    <span class="token property">"comments.openPanel"</span><span class="token operator">:</span> <span class="token string">"openOnSessionStartWithComments"</span><span class="token punctuation">,</span>    // 允许在任何文件中设置断点。    <span class="token property">"debug.allowBreakpointsEverywhere"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制调试控制台中的字体系列。    <span class="token property">"debug.console.fontFamily"</span><span class="token operator">:</span> <span class="token string">"default"</span><span class="token punctuation">,</span>    // 控制调试控制台中的字体大小(以像素为单位<span class="token punctuation">)</span>。    <span class="token property">"debug.console.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    // 设置调试控制台中的行高(以像素为单位<span class="token punctuation">)</span>。使用 <span class="token number">0</span> 来计算从字体大小开始的行高。    <span class="token property">"debug.console.lineHeight"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    // 控制调试过程中是否启用非调试悬停提示。启用后，将调用悬停提供程序来提供悬停提示。即使启用此项设置，普通悬停提示也不会显示。    <span class="token property">"debug.enableAllHovers"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 当处于调试过程中时，在编辑器中内联显示变量值。    <span class="token property">"debug.inlineValues"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制何时打开内部调试控制台。    <span class="token property">"debug.internalConsoleOptions"</span><span class="token operator">:</span> <span class="token string">"openOnFirstSessionStart"</span><span class="token punctuation">,</span>    // 控制何时打开“调试”视图。    <span class="token property">"debug.openDebug"</span><span class="token operator">:</span> <span class="token string">"openOnSessionStart"</span><span class="token punctuation">,</span>    // 在调试会话结束时自动打开资源管理器视图。    <span class="token property">"debug.openExplorerOnEnd"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制何时显示调试状态栏。    //  - never<span class="token operator">:</span> 在状态栏中不再显示调试    //  - always<span class="token operator">:</span> 始终在状态栏中显示调试    //  - onFirstSessionStart<span class="token operator">:</span> 仅于第一次启动调试后在状态栏中显示调试    <span class="token property">"debug.showInStatusBar"</span><span class="token operator">:</span> <span class="token string">"onFirstSessionStart"</span><span class="token punctuation">,</span>    // 控制调试子会话是否显示在调试工具栏中。当此设置为 <span class="token boolean">false</span> 时<span class="token punctuation">,</span> 子会话上的 stop 命令也将停止父会话。    <span class="token property">"debug.showSubSessionsInToolBar"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制调试工具栏的位置。可在所有视图中“浮动”、在调试视图中“停靠”，也可“隐藏”。    <span class="token property">"debug.toolBarLocation"</span><span class="token operator">:</span> <span class="token string">"floating"</span><span class="token punctuation">,</span>    // 全局调试启动配置。应当作为跨工作区共享的 \<span class="token string">"launch.json\"</span> 的替代方法。    <span class="token property">"launch"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"compounds"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 默认情况下，VS Code 在选择 CSS 属性后触发属性值完成。使用此设置可禁用此行为。    <span class="token property">"css.completion.triggerPropertyValueCompletion"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // A list of JSON file paths that define custom CSS data that loads custom properties<span class="token punctuation">,</span> at directives<span class="token punctuation">,</span> pseudo classes / elements.    <span class="token property">"css.experimental.customData"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 无效的参数数量。    <span class="token property">"css.lint.argumentsInColorFunction"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    // 在使用 `padding` 或 `border` 时，不要使用 `width` 或 `height`。    <span class="token property">"css.lint.boxModel"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。    <span class="token property">"css.lint.compatibleVendorPrefixes"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 不要使用重复的样式定义。    <span class="token property">"css.lint.duplicateProperties"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 不要使用空规则集。    <span class="token property">"css.lint.emptyRules"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 避免使用 `float`。浮动会使 CSS 变得脆弱。即使只更改了一部分布局，也很容易造成破坏。    <span class="token property">"css.lint.float"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // `@font-face` 规则必须定义 `src` 和 `font-family` 属性。    <span class="token property">"css.lint.fontFaceProperties"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 十六进制颜色必须由三个或六个十六进制数字组成。    <span class="token property">"css.lint.hexColorLength"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。    <span class="token property">"css.lint.idSelector"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 仅在需要支持 IE7 及更低版本时，才需要 IE hack。    <span class="token property">"css.lint.ieHack"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 避免使用 `!important`。它表明整个 CSS 的优先级已经失去控制且需要进行重构。    <span class="token property">"css.lint.important"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // import 语句没有并行加载。    <span class="token property">"css.lint.importStatement"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 由于 `display` 属性值，属性被忽略。例如，使用 `display<span class="token operator">:</span> inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。    <span class="token property">"css.lint.propertyIgnoredDueToDisplay"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 通配选择符 (`*`<span class="token punctuation">)</span> 的运行效率低。    <span class="token property">"css.lint.universalSelector"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 未知的 @ 规则。    <span class="token property">"css.lint.unknownAtRules"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 未知的属性。    <span class="token property">"css.lint.unknownProperties"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 未知的供应商特定属性。    <span class="token property">"css.lint.unknownVendorSpecificProperties"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 不根据 <span class="token string">"unknownProperties"</span> 规则进行验证的属性列表。    <span class="token property">"css.lint.validProperties"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 使用厂商特定的前缀时，同时添加标准属性。    <span class="token property">"css.lint.vendorPrefix"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 零不需要单位。    <span class="token property">"css.lint.zeroUnits"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 跟踪 VS Code 与 CSS 语言服务器之间的通信。    <span class="token property">"css.trace.server"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // 启用或禁用所有验证。    <span class="token property">"css.validate"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 参数数目无效。    <span class="token property">"less.lint.argumentsInColorFunction"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    // 在使用 `padding` 或 `border` 时，不要使用 `width` 或 `height`。    <span class="token property">"less.lint.boxModel"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。    <span class="token property">"less.lint.compatibleVendorPrefixes"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 不要使用重复的样式定义。    <span class="token property">"less.lint.duplicateProperties"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 不要使用空规则集。    <span class="token property">"less.lint.emptyRules"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 避免使用 `float`。浮动会使 CSS 变得脆弱。即使只更改了一部分布局，也很容易造成破坏。    <span class="token property">"less.lint.float"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // `@font-face` 规则必须定义 `src` 和 `font-family` 属性。    <span class="token property">"less.lint.fontFaceProperties"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 十六进制颜色必须由三个或六个十六进制数字组成。    <span class="token property">"less.lint.hexColorLength"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。    <span class="token property">"less.lint.idSelector"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 仅在需要支持 IE7 及更低版本时，才需要 IE hack。    <span class="token property">"less.lint.ieHack"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 避免使用 `!important`。它表明整个 CSS 的优先级已经失去控制且需要进行重构。    <span class="token property">"less.lint.important"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // import 语句没有并行加载。    <span class="token property">"less.lint.importStatement"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 由于 `display` 属性值，属性被忽略。例如，使用 `display<span class="token operator">:</span> inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。    <span class="token property">"less.lint.propertyIgnoredDueToDisplay"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 通配选择符 (`*`<span class="token punctuation">)</span> 的运行效率低。    <span class="token property">"less.lint.universalSelector"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 未知的属性。    <span class="token property">"less.lint.unknownProperties"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 未知的供应商特定属性。    <span class="token property">"less.lint.unknownVendorSpecificProperties"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 不根据 <span class="token string">"unknownProperties"</span> 规则进行验证的属性列表。    <span class="token property">"less.lint.validProperties"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 使用厂商特定的前缀时，同时添加标准属性。    <span class="token property">"less.lint.vendorPrefix"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 零不需要单位。    <span class="token property">"less.lint.zeroUnits"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 启用或禁用所有验证。    <span class="token property">"less.validate"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 参数数目无效。    <span class="token property">"scss.lint.argumentsInColorFunction"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    // 在使用 `padding` 或 `border` 时，不要使用 `width` 或 `height`。    <span class="token property">"scss.lint.boxModel"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。    <span class="token property">"scss.lint.compatibleVendorPrefixes"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 不要使用重复的样式定义。    <span class="token property">"scss.lint.duplicateProperties"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 不要使用空规则集。    <span class="token property">"scss.lint.emptyRules"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 避免使用 `float`。浮动会使 CSS 变得脆弱。即使只更改了一部分布局，也很容易造成破坏。    <span class="token property">"scss.lint.float"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // `@font-face` 规则必须定义 `src` 和 `font-family` 属性。    <span class="token property">"scss.lint.fontFaceProperties"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 十六进制颜色必须由三个或六个十六进制数字组成。    <span class="token property">"scss.lint.hexColorLength"</span><span class="token operator">:</span> <span class="token string">"error"</span><span class="token punctuation">,</span>    // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。    <span class="token property">"scss.lint.idSelector"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 仅在需要支持 IE7 及更低版本时，才需要 IE hack。    <span class="token property">"scss.lint.ieHack"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 避免使用 `!important`。它表明整个 CSS 的优先级已经失去控制且需要进行重构。    <span class="token property">"scss.lint.important"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // import 语句没有并行加载。    <span class="token property">"scss.lint.importStatement"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 由于 `display` 属性值，属性被忽略。例如，使用 `display<span class="token operator">:</span> inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。    <span class="token property">"scss.lint.propertyIgnoredDueToDisplay"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 通配选择符 (`*`<span class="token punctuation">)</span> 的运行效率低。    <span class="token property">"scss.lint.universalSelector"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 未知的属性。    <span class="token property">"scss.lint.unknownProperties"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 未知的供应商特定属性。    <span class="token property">"scss.lint.unknownVendorSpecificProperties"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 不根据 <span class="token string">"unknownProperties"</span> 规则进行验证的属性列表。    <span class="token property">"scss.lint.validProperties"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 使用厂商特定的前缀时，同时添加标准属性。    <span class="token property">"scss.lint.vendorPrefix"</span><span class="token operator">:</span> <span class="token string">"warning"</span><span class="token punctuation">,</span>    // 零不需要单位。    <span class="token property">"scss.lint.zeroUnits"</span><span class="token operator">:</span> <span class="token string">"ignore"</span><span class="token punctuation">,</span>    // 启用或禁用所有验证。    <span class="token property">"scss.validate"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用后，将自动检查扩展更新。若扩展存在更新，将在“扩展”视图中将其标记为过时扩展。更新将从 Microsoft 联机服务中获取。    <span class="token property">"extensions.autoCheckUpdates"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用后，将自动安装扩展更新。更新将从 Microsoft 联机服务中获取。    <span class="token property">"extensions.autoUpdate"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用后，将在离开“扩展”视图时，自动关闭扩展详细信息页面。    <span class="token property">"extensions.closeExtensionDetailsOnViewChange"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用后，将不会显示扩展建议的通知。    <span class="token property">"extensions.ignoreRecommendations"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用后，除非用户特别进行请求，将不会获取或显示推荐。某些推荐将从 Microsoft 联机服务中获取。    <span class="token property">"extensions.showRecommendationsOnlyOnDemand"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 自定义要启动的终端类型。    //  - integrated<span class="token operator">:</span> 使用 VS Code 的集成终端。    //  - external<span class="token operator">:</span> 使用设定的外部终端。    <span class="token property">"terminal.explorerKind"</span><span class="token operator">:</span> <span class="token string">"integrated"</span><span class="token punctuation">,</span>    // 自定义要在 Linux 上运行的终端。    <span class="token property">"terminal.external.linuxExec"</span><span class="token operator">:</span> <span class="token string">"xterm"</span><span class="token punctuation">,</span>    // 定义在 macOS 上运行的终端应用程序。    <span class="token property">"terminal.external.osxExec"</span><span class="token operator">:</span> <span class="token string">"Terminal.app"</span><span class="token punctuation">,</span>    // 自定义要在 Windows 上运行的终端。    <span class="token property">"terminal.external.windowsExec"</span><span class="token operator">:</span> <span class="token string">"C:\\windows\\System32\\cmd.exe"</span><span class="token punctuation">,</span>    // 一组命令 ID，其键绑定将不发送到 shell，而始终由 Code 进行处理。这样，使用键绑定(通常由 shell 使用<span class="token punctuation">)</span>时的效果与终端未对焦时(例如，按 Ctrl+P 启动“快速打开”<span class="token punctuation">)</span>时的效果一致。    // 默认跳过的命令<span class="token operator">:</span>    //    // - editor.action.toggleTabFocusMode    // - workbench.action.debug.continue    // - workbench.action.debug.pause    // - workbench.action.debug.restart    // - workbench.action.debug.run    // - workbench.action.debug.start    // - workbench.action.debug.stepInto    // - workbench.action.debug.stepOut    // - workbench.action.debug.stepOver    // - workbench.action.debug.stop    // - workbench.action.firstEditorInGroup    // - workbench.action.focusActiveEditorGroup    // - workbench.action.focusEighthEditorGroup    // - workbench.action.focusFifthEditorGroup    // - workbench.action.focusFirstEditorGroup    // - workbench.action.focusFourthEditorGroup    // - workbench.action.focusLastEditorGroup    // - workbench.action.focusSecondEditorGroup    // - workbench.action.focusSeventhEditorGroup    // - workbench.action.focusSixthEditorGroup    // - workbench.action.focusThirdEditorGroup    // - workbench.action.lastEditorInGroup    // - workbench.action.navigateDown    // - workbench.action.navigateLeft    // - workbench.action.navigateRight    // - workbench.action.navigateUp    // - workbench.action.nextPanelView    // - workbench.action.nextSideBarView    // - workbench.action.openNextRecentlyUsedEditorInGroup    // - workbench.action.openPreviousRecentlyUsedEditorInGroup    // - workbench.action.previousPanelView    // - workbench.action.previousSideBarView    // - workbench.action.quickOpen    // - workbench.action.quickOpenPreviousEditor    // - workbench.action.quickOpenView    // - workbench.action.showCommands    // - workbench.action.tasks.build    // - workbench.action.tasks.reRunTask    // - workbench.action.tasks.restartTask    // - workbench.action.tasks.runTask    // - workbench.action.tasks.showLog    // - workbench.action.tasks.showTasks    // - workbench.action.tasks.terminate    // - workbench.action.tasks.test    // - workbench.action.terminal.clear    // - workbench.action.terminal.clearSelection    // - workbench.action.terminal.copySelection    // - workbench.action.terminal.deleteToLineStart    // - workbench.action.terminal.deleteWordLeft    // - workbench.action.terminal.deleteWordRight    // - workbench.action.terminal.findNextTerminalFocus    // - workbench.action.terminal.findPreviousTerminalFocus    // - workbench.action.terminal.focus    // - workbench.action.terminal.focusAtIndex1    // - workbench.action.terminal.focusAtIndex2    // - workbench.action.terminal.focusAtIndex3    // - workbench.action.terminal.focusAtIndex4    // - workbench.action.terminal.focusAtIndex5    // - workbench.action.terminal.focusAtIndex6    // - workbench.action.terminal.focusAtIndex7    // - workbench.action.terminal.focusAtIndex8    // - workbench.action.terminal.focusAtIndex9    // - workbench.action.terminal.focusFindWidget    // - workbench.action.terminal.focusNext    // - workbench.action.terminal.focusNextPane    // - workbench.action.terminal.focusPrevious    // - workbench.action.terminal.focusPreviousPane    // - workbench.action.terminal.hideFindWidget    // - workbench.action.terminal.kill    // - workbench.action.terminal.moveToLineEnd    // - workbench.action.terminal.moveToLineStart    // - workbench.action.terminal.new    // - workbench.action.terminal.newInActiveWorkspace    // - workbench.action.terminal.paste    // - workbench.action.terminal.resizePaneDown    // - workbench.action.terminal.resizePaneLeft    // - workbench.action.terminal.resizePaneRight    // - workbench.action.terminal.resizePaneUp    // - workbench.action.terminal.runActiveFile    // - workbench.action.terminal.runSelectedText    // - workbench.action.terminal.scrollDown    // - workbench.action.terminal.scrollDownPage    // - workbench.action.terminal.scrollToBottom    // - workbench.action.terminal.scrollToNextCommand    // - workbench.action.terminal.scrollToPreviousCommand    // - workbench.action.terminal.scrollToTop    // - workbench.action.terminal.scrollUp    // - workbench.action.terminal.scrollUpPage    // - workbench.action.terminal.selectAll    // - workbench.action.terminal.selectToNextCommand    // - workbench.action.terminal.selectToNextLine    // - workbench.action.terminal.selectToPreviousCommand    // - workbench.action.terminal.selectToPreviousLine    // - workbench.action.terminal.sendSequence    // - workbench.action.terminal.split    // - workbench.action.terminal.splitInActiveWorkspace    // - workbench.action.terminal.toggleFindCaseSensitiveTerminalFocus    // - workbench.action.terminal.toggleFindRegexTerminalFocus    // - workbench.action.terminal.toggleFindWholeWordTerminalFocus    // - workbench.action.terminal.toggleTerminal    // - workbench.action.toggleFullScreen    // - workbench.action.toggleMaximizedPanel    // - workbench.action.togglePanel    <span class="token property">"terminal.integrated.commandsToSkipShell"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 在存在活动终端会话的情况下，是否在退出时进行确认。    <span class="token property">"terminal.integrated.confirmOnExit"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否将终端中选定的文本复制到剪贴板。    <span class="token property">"terminal.integrated.copyOnSelection"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制终端光标是否闪烁。    <span class="token property">"terminal.integrated.cursorBlinking"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制终端光标的样式。    <span class="token property">"terminal.integrated.cursorStyle"</span><span class="token operator">:</span> <span class="token string">"block"</span><span class="token punctuation">,</span>    // 将在其中启动终端的一个显式起始路径，它用作 shell 进程的当前工作目录(cwd<span class="token punctuation">)</span>。当根目录为不方便的 cwd 时，此路径在工作区设置中可能十分有用。    <span class="token property">"terminal.integrated.cwd"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // 控制终端中的粗体文本是否始终使用 ANSI 的“明亮”颜色样式。    <span class="token property">"terminal.integrated.drawBoldTextInBrightColors"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制终端铃声是否启用。    <span class="token property">"terminal.integrated.enableBell"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Whether to enable the latency mitigation feature for high-latency terminals.    <span class="token property">"terminal.integrated.enableLatencyMitigation"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 要添加到 VS Code 进程中的带有环境变量的对象，其将被 Linux 终端使用。设置为 `<span class="token null">null</span>` 可删除环境变量。    <span class="token property">"terminal.integrated.env.linux"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 要添加到 VS Code 进程中的带有环境变量的对象，其将被 macOS 终端使用。设置为 `<span class="token null">null</span>` 可删除环境变量。    <span class="token property">"terminal.integrated.env.osx"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 要添加到 VS Code 进程中的带有环境变量的对象，其将被 Windows 终端使用。设置为 `<span class="token null">null</span>` 可删除环境变量。    <span class="token property">"terminal.integrated.env.windows"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // An experimental setting that will refresh the terminal renderer when the system is resumed.    <span class="token property">"terminal.integrated.experimentalRefreshOnResume"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制终端的字体系列，默认为 `editor.fontFamily` 的值。    <span class="token property">"terminal.integrated.fontFamily"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // 控制终端的字号(以像素为单位<span class="token punctuation">)</span>。    <span class="token property">"terminal.integrated.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    // 终端中非粗体字使用的字重。    <span class="token property">"terminal.integrated.fontWeight"</span><span class="token operator">:</span> <span class="token string">"normal"</span><span class="token punctuation">,</span>    // 终端中粗体字使用的字重。    <span class="token property">"terminal.integrated.fontWeightBold"</span><span class="token operator">:</span> <span class="token string">"bold"</span><span class="token punctuation">,</span>    // 控制终端字符的间距。此项的值为整数，表示在字符间添加的额外像素数。    <span class="token property">"terminal.integrated.letterSpacing"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    // 控制终端的行高，此数字乘上终端字号得到实际行高(以像素为单位<span class="token punctuation">)</span>。    <span class="token property">"terminal.integrated.lineHeight"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    // 在 macOS 中，控制是否在按住 Option 键并单击时进行强制选择。这将强制进行常规 (行<span class="token punctuation">)</span> 选择并禁用列选择模式<span class="token punctuation">;</span> 同时允许使用常规终端选择来进行复制与粘贴，例如，可在 tmux 启用了鼠标模式时适用。    <span class="token property">"terminal.integrated.macOptionClickForcesSelection"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否在 macOS 终端中，使用 Option 键作为 Meta 键。    <span class="token property">"terminal.integrated.macOptionIsMeta"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制终端的渲染方式。    //  - auto<span class="token operator">:</span> 让 VS Code 决定要使用的渲染器。    //  - canvas<span class="token operator">:</span> 使用标准 GPU/基于 canvas 的渲染器    //  - dom<span class="token operator">:</span> 使用基于 DOM 的备用渲染器。    <span class="token property">"terminal.integrated.rendererType"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // 控制终端对右键单击的响应方式。    //  - default<span class="token operator">:</span> 显示上下文菜单。    //  - copyPaste<span class="token operator">:</span> 当有内容选中时进行复制，否则进行粘贴。    //  - selectWord<span class="token operator">:</span> 选择光标下的单词并显示上下文菜单。    <span class="token property">"terminal.integrated.rightClickBehavior"</span><span class="token operator">:</span> <span class="token string">"copyPaste"</span><span class="token punctuation">,</span>    // 控制终端保持在缓冲区的最大行数。    <span class="token property">"terminal.integrated.scrollback"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>    // 控制是否在终端启动时设置语言区域变量。    <span class="token property">"terminal.integrated.setLocaleVariables"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 终端在 Linux 上使用的 Shell 的路径。<span class="token punctuation">[</span>阅读有关配置 Shell 的详细信息<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/integrated-terminal#_configuration<span class="token punctuation">)</span>。    <span class="token property">"terminal.integrated.shell.linux"</span><span class="token operator">:</span> <span class="token string">"/bin/bash"</span><span class="token punctuation">,</span>    // 终端在 macOS 上使用的 Shell 的路径。<span class="token punctuation">[</span>阅读有关配置 Shell 的详细信息<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/integrated-terminal#_configuration<span class="token punctuation">)</span>。    <span class="token property">"terminal.integrated.shell.osx"</span><span class="token operator">:</span> <span class="token string">"/bin/bash"</span><span class="token punctuation">,</span>    // 终端在 Windows 上使用的 Shell 的路径。<span class="token punctuation">[</span>阅读有关配置 Shell 的详细信息<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/integrated-terminal#_configuration<span class="token punctuation">)</span>。    <span class="token property">"terminal.integrated.shell.windows"</span><span class="token operator">:</span> <span class="token string">"C:\\windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe"</span><span class="token punctuation">,</span>    // 在 Linux 终端上使用的命令行参数。<span class="token punctuation">[</span>阅读有关配置 Shell 的详细信息<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/integrated-terminal#_configuration<span class="token punctuation">)</span>。    <span class="token property">"terminal.integrated.shellArgs.linux"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 在 macOS 终端上使用的命令行参数。<span class="token punctuation">[</span>阅读有关配置 Shell 的详细信息<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/integrated-terminal#_configuration<span class="token punctuation">)</span>。    <span class="token property">"terminal.integrated.shellArgs.osx"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"-l"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 在 Windows 终端上使用的命令行参数。<span class="token punctuation">[</span>阅读有关配置 Shell 的详细信息<span class="token punctuation">]</span>(https<span class="token operator">:</span>//code.visualstudio.com/docs/editor/integrated-terminal#_configuration<span class="token punctuation">)</span>。    <span class="token property">"terminal.integrated.shellArgs.windows"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 当退出代码非零时，控制是否显示“终端进程以某退出代码终止”的警告。    <span class="token property">"terminal.integrated.showExitAlert"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制拆分终端的初始工作目录。    //  - workspaceRoot<span class="token operator">:</span> 新拆分终端将使用工作区根目录作为工作目录。在多根目录工作区中，可选择要使用的根目录。    //  - initial<span class="token operator">:</span> 新拆分终端将使用父终端起始目录作为工作目录。    //  - inherited<span class="token operator">:</span> 在macOS和Linux上，一个新的分割终端将使用父终端的工作目录。在Windows上，这与初始值相同。    <span class="token property">"terminal.integrated.splitCwd"</span><span class="token operator">:</span> <span class="token string">"inherited"</span><span class="token punctuation">,</span>    // Works in conjunction with the `terminal.integrated.windowsEnableConpty` setting. Both must be enabled for tasks to use conpty. Defaults to `<span class="token boolean">false</span>`.    <span class="token property">"terminal.integrated.windowsAllowConptyTasks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 是否要将 ConPTY 用于 Windows 终端进程通信(需要 Windows <span class="token number">10</span> 内部版本号 <span class="token number">18309</span>+<span class="token punctuation">)</span>。如果此为 <span class="token boolean">false</span>，则将使用 Winpty。    <span class="token property">"terminal.integrated.windowsEnableConpty"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在打开文件时，控制是否在“问题”视图中对其进行定位。    <span class="token property">"problems.autoReveal"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在文件和文件夹上显示错误和警告。    <span class="token property">"problems.decorations.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 启用/禁用导航路径。    <span class="token property">"breadcrumbs.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否及如何在“导航路径”视图中显示文件路径。    //  - on<span class="token operator">:</span> 在导航路径视图中显示文件路径。    //  - off<span class="token operator">:</span> 不在导航路径视图中显示文件路径。    //  - last<span class="token operator">:</span> 在导航路径视图中仅显示文件路径的最后一个元素。    <span class="token property">"breadcrumbs.filePath"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // 控制是否及如何在“导航路径”视图中显示符号。    //  - on<span class="token operator">:</span> 在“导航路径”视图中显示所有符号。    //  - off<span class="token operator">:</span> 不在导航路径视图中显示符号。    //  - last<span class="token operator">:</span> 在导航路径视图中仅显示当前符号。    <span class="token property">"breadcrumbs.symbolPath"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // 控制“导航路径”大纲视图中符号的排序方式。    //  - position<span class="token operator">:</span> 以文件位置顺序显示符号大纲。    //  - name<span class="token operator">:</span> 以字母顺序显示符号大纲。    //  - type<span class="token operator">:</span> 以符号类型顺序显示符号大纲。    <span class="token property">"breadcrumbs.symbolSortOrder"</span><span class="token operator">:</span> <span class="token string">"position"</span><span class="token punctuation">,</span>    // 将崩溃报告发送到 Microsoft 联机服务。    // 此选项在重新启动后才能生效。    <span class="token property">"telemetry.enableCrashReporter"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 将使用数据和错误发送到 Microsoft 联机服务。    <span class="token property">"telemetry.enableTelemetry"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 显示大纲元素的图标。    <span class="token property">"outline.icons"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 使用错误和警告的徽章。    <span class="token property">"outline.problems.badges"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 使用颜色表示错误和警告。    <span class="token property">"outline.problems.colors"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 显示大纲元素上的错误和警告。    <span class="token property">"outline.problems.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Colorize Quokka output    <span class="token property">"quokka.colorizeOutput"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Quokka gutter indicators colors (requires a restart after change<span class="token punctuation">)</span>    <span class="token property">"quokka.colors"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"covered"</span><span class="token operator">:</span> <span class="token string">"#62b455"</span><span class="token punctuation">,</span>        <span class="token property">"errorPath"</span><span class="token operator">:</span> <span class="token string">"#ffa0a0"</span><span class="token punctuation">,</span>        <span class="token property">"errorSource"</span><span class="token operator">:</span> <span class="token string">"#fe536a"</span><span class="token punctuation">,</span>        <span class="token property">"notCovered"</span><span class="token operator">:</span> <span class="token string">"#cccccc"</span><span class="token punctuation">,</span>        <span class="token property">"partiallyCovered"</span><span class="token operator">:</span> <span class="token string">"#d2a032"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Minimize the number of new line characters between output console messages    <span class="token property">"quokka.compactMessageOutput"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Override Quokka Dark Theme Error    <span class="token property">"quokka.darkTheme.error.decorationAttachmentRenderOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"border"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"borderColor"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"fontStyle"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"fontWeight"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"textDecoration"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"#fe536a"</span><span class="token punctuation">,</span>        <span class="token property">"backgroundColor"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"margin"</span><span class="token operator">:</span> <span class="token string">"1.2em"</span><span class="token punctuation">,</span>        <span class="token property">"width"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token null">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Override Quokka Dark Theme Log    <span class="token property">"quokka.darkTheme.log.decorationAttachmentRenderOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"border"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"borderColor"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"fontStyle"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"fontWeight"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"textDecoration"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"rgba(86, 156, 214, 1)"</span><span class="token punctuation">,</span>        <span class="token property">"backgroundColor"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"margin"</span><span class="token operator">:</span> <span class="token string">"1.2em"</span><span class="token punctuation">,</span>        <span class="token property">"width"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token null">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Override Quokka Light Theme Error    <span class="token property">"quokka.lightTheme.error.decorationAttachmentRenderOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"border"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"borderColor"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"fontStyle"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"fontWeight"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"textDecoration"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"#c80000"</span><span class="token punctuation">,</span>        <span class="token property">"backgroundColor"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"margin"</span><span class="token operator">:</span> <span class="token string">"1.2em"</span><span class="token punctuation">,</span>        <span class="token property">"width"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token null">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Override Quokka Light Theme Log    <span class="token property">"quokka.lightTheme.log.decorationAttachmentRenderOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"border"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"borderColor"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"fontStyle"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"fontWeight"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"textDecoration"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"color"</span><span class="token operator">:</span> <span class="token string">"#0000ff"</span><span class="token punctuation">,</span>        <span class="token property">"backgroundColor"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"margin"</span><span class="token operator">:</span> <span class="token string">"1.2em"</span><span class="token punctuation">,</span>        <span class="token property">"width"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>        <span class="token property">"height"</span><span class="token operator">:</span> <span class="token null">null</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Show Quokka output window on start up    <span class="token property">"quokka.showOutputOnStart"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Stop Quokka expiring license update reminders    <span class="token property">"quokka.suppressExpirationNotifications"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Supress Quokka Glyph Margin Notifications    <span class="token property">"quokka.suppressGlyphMarginNotifications"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Always show the ESlint status bar item.    <span class="token property">"eslint.alwaysShowStatus"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Turns auto fix on save on or off.    <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    //    <span class="token property">"eslint.codeAction.disableRuleComment"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"location"</span><span class="token operator">:</span> <span class="token string">"separateLine"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    //    <span class="token property">"eslint.codeAction.showDocumentation"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"enable"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Controls whether eslint is enabled for JavaScript files or not.    <span class="token property">"eslint.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // A path added to NODE_PATH when resolving the eslint module.    <span class="token property">"eslint.nodePath"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // The eslint options object to provide args normally passed to eslint when executed from a command line (see http<span class="token operator">:</span>//eslint.org/docs/developer-guide/nodejs-api#cliengine<span class="token punctuation">)</span>.    <span class="token property">"eslint.options"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // The package manager you use to install node modules.    <span class="token property">"eslint.packageManager"</span><span class="token operator">:</span> <span class="token string">"npm"</span><span class="token punctuation">,</span>    // Controls whether a task for linting the whole workspace will be available.    <span class="token property">"eslint.provideLintTask"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Turns on quiet mode<span class="token punctuation">,</span> which ignores warnings.    <span class="token property">"eslint.quiet"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Run the linter on save (onSave<span class="token punctuation">)</span> or on type (onType<span class="token punctuation">)</span>    <span class="token property">"eslint.run"</span><span class="token operator">:</span> <span class="token string">"onType"</span><span class="token punctuation">,</span>    // The location of the node binary to run ESLint under.    <span class="token property">"eslint.runtime"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Traces the communication between VSCode and the eslint linter service.    <span class="token property">"eslint.trace.server"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // An array of language ids which should be validated by ESLint    <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"javascript"</span><span class="token punctuation">,</span> <span class="token string">"javascriptreact"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    //    <span class="token property">"eslint.workingDirectories"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 针对 <span class="token punctuation">[</span>git-commit<span class="token punctuation">]</span> 语言，配置替代编辑器设置。    <span class="token property">"[git-commit]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"editor.rulers"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">72</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 针对 <span class="token punctuation">[</span>go<span class="token punctuation">]</span> 语言，配置替代编辑器设置。    <span class="token property">"[go]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"editor.insertSpaces"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 针对 <span class="token punctuation">[</span>json<span class="token punctuation">]</span> 语言，配置替代编辑器设置。    <span class="token property">"[json]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"editor.quickSuggestions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"strings"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 针对 <span class="token punctuation">[</span>makefile<span class="token punctuation">]</span> 语言，配置替代编辑器设置。    <span class="token property">"[makefile]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"editor.insertSpaces"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 针对 <span class="token punctuation">[</span>markdown<span class="token punctuation">]</span> 语言，配置替代编辑器设置。    <span class="token property">"[markdown]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"editor.wordWrap"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>        <span class="token property">"editor.quickSuggestions"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // 针对 <span class="token punctuation">[</span>yaml<span class="token punctuation">]</span> 语言，配置替代编辑器设置。    <span class="token property">"[yaml]"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"editor.insertSpaces"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token property">"editor.autoIndent"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Specifies the length of abbreviated commit ids (shas<span class="token punctuation">)</span>    <span class="token property">"gitlens.advanced.abbreviatedShaLength"</span><span class="token operator">:</span> <span class="token string">"7"</span><span class="token punctuation">,</span>    // Specifies additional arguments to pass to the `git blame` command    <span class="token property">"gitlens.advanced.blame.customArguments"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Specifies the time (in milliseconds<span class="token punctuation">)</span> to wait before re-blaming an unsaved document after an edit. Use <span class="token number">0</span> to specify an infinite wait    <span class="token property">"gitlens.advanced.blame.delayAfterEdit"</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>    // Specifies the maximum document size (in lines<span class="token punctuation">)</span> allowed to be re-blamed after an edit while still unsaved. Use <span class="token number">0</span> to specify no maximum    <span class="token property">"gitlens.advanced.blame.sizeThresholdAfterEdit"</span><span class="token operator">:</span> <span class="token number">5000</span><span class="token punctuation">,</span>    // Specifies whether git output will be cached — changing the default is not recommended    <span class="token property">"gitlens.advanced.caching.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether file histories will follow renames — will affect how merge commits are shown in histories    <span class="token property">"gitlens.advanced.fileHistoryFollowsRenames"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies the maximum number of items to show in a list. Use <span class="token number">0</span> to specify no maximum    <span class="token property">"gitlens.advanced.maxListItems"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    // Specifies the maximum number of items to show in a search. Use <span class="token number">0</span> to specify no maximum    <span class="token property">"gitlens.advanced.maxSearchItems"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    // Specifies which messages should be suppressed    <span class="token property">"gitlens.advanced.messages"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"suppressCommitHasNoPreviousCommitWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"suppressCommitNotFoundWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"suppressFileNotUnderSourceControlWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"suppressGitDisabledWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"suppressGitVersionWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"suppressLineUncommittedWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"suppressNoRepositoryWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"suppressSupportGitLensNotification"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Specifies whether to close QuickPick menus when focus is lost    <span class="token property">"gitlens.advanced.quickPick.closeOnFocusOut"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies how many folders deep to search for repositories    <span class="token property">"gitlens.advanced.repositorySearchDepth"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    // Specifies the amount (percent<span class="token punctuation">)</span> of similarity a deleted and added file pair must have to be considered a rename    <span class="token property">"gitlens.advanced.similarityThreshold"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Specifies whether to enable GitLens telemetry (even if enabled still abides by the overall `telemetry.enableTelemetry` setting    <span class="token property">"gitlens.advanced.telemetry.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to show avatar images in the gutter blame annotations    <span class="token property">"gitlens.blame.avatars"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to compact (deduplicate<span class="token punctuation">)</span> matching adjacent gutter blame annotations    <span class="token property">"gitlens.blame.compact"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies how to format absolute dates (e.g. using the `$<span class="token punctuation">{</span>date<span class="token punctuation">}</span>` token<span class="token punctuation">)</span> in gutter blame annotations. See the <span class="token punctuation">[</span>Moment.js docs<span class="token punctuation">]</span>(https<span class="token operator">:</span>//momentjs.com/docs/#/displaying/format/<span class="token punctuation">)</span> for valid formats    <span class="token property">"gitlens.blame.dateFormat"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Specifies the format of the gutter blame annotations. See <span class="token punctuation">[</span>_Commit Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens<span class="token punctuation">)</span> in the GitLens docs. Date formatting is controlled by the `gitlens.blame.dateFormat` setting    <span class="token property">"gitlens.blame.format"</span><span class="token operator">:</span> "$<span class="token punctuation">{</span>message|<span class="token number">40</span>?<span class="token punctuation">}</span> $<span class="token punctuation">{</span>agoOrDate|<span class="token number">14</span>-<span class="token punctuation">}</span>"<span class="token punctuation">,</span>    // Specifies whether to provide a heatmap indicator in the gutter blame annotations    <span class="token property">"gitlens.blame.heatmap.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies where the heatmap indicators will be shown in the gutter blame annotations    //  - left<span class="token operator">:</span> Adds a heatmap indicator on the left edge of the gutter blame annotations    //  - right<span class="token operator">:</span> Adds a heatmap indicator on the right edge of the gutter blame annotations    <span class="token property">"gitlens.blame.heatmap.location"</span><span class="token operator">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>    // Specifies whether to highlight lines associated with the current line    <span class="token property">"gitlens.blame.highlight.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies where the associated line highlights will be shown    <span class="token property">"gitlens.blame.highlight.locations"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"gutter"</span><span class="token punctuation">,</span> <span class="token string">"line"</span><span class="token punctuation">,</span> <span class="token string">"overview"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // Specifies whether to ignore whitespace when comparing revisions during blame operations    <span class="token property">"gitlens.blame.ignoreWhitespace"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Specifies whether gutter blame annotations will be separated by a small gap    <span class="token property">"gitlens.blame.separateLines"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies how the gutter blame annotations will be toggled    //  - file<span class="token operator">:</span> Toggles each file individually    //  - window<span class="token operator">:</span> Toggles the window<span class="token punctuation">,</span> i.e. all files at once    <span class="token property">"gitlens.blame.toggleMode"</span><span class="token operator">:</span> <span class="token string">"file"</span><span class="token punctuation">,</span>    // Specifies the command to be executed when an _authors_ code lens is clicked    //  - gitlens.toggleFileBlame<span class="token operator">:</span> Toggles file blame annotations    //  - gitlens.diffWithPrevious<span class="token operator">:</span> Compares the current committed file with the previous commit    //  - gitlens.showQuickCommitDetails<span class="token operator">:</span> Shows a commit details quick pick    //  - gitlens.showQuickCommitFileDetails<span class="token operator">:</span> Shows a commit file details quick pick    //  - gitlens.showQuickFileHistory<span class="token operator">:</span> Shows a file history quick pick    //  - gitlens.showQuickRepoHistory<span class="token operator">:</span> Shows a branch history quick pick    <span class="token property">"gitlens.codeLens.authors.command"</span><span class="token operator">:</span> <span class="token string">"gitlens.toggleFileBlame"</span><span class="token punctuation">,</span>    // Specifies whether to provide an _authors_ code lens<span class="token punctuation">,</span> showing number of authors of the file or code block and the most prominent author (if there is more than one<span class="token punctuation">)</span>    <span class="token property">"gitlens.codeLens.authors.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to provide any Git code lens<span class="token punctuation">,</span> by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`<span class="token punctuation">)</span> to toggle the Git code lens on and off for the current window    <span class="token property">"gitlens.codeLens.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to provide any Git code lens on symbols that span only a single line    <span class="token property">"gitlens.codeLens.includeSingleLineSymbols"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Specifies the command to be executed when a _recent change_ code lens is clicked    //  - gitlens.toggleFileBlame<span class="token operator">:</span> Toggles file blame annotations    //  - gitlens.diffWithPrevious<span class="token operator">:</span> Compares the current committed file with the previous commit    //  - gitlens.showQuickCommitDetails<span class="token operator">:</span> Shows a commit details quick pick    //  - gitlens.showQuickCommitFileDetails<span class="token operator">:</span> Shows a commit file details quick pick    //  - gitlens.showQuickFileHistory<span class="token operator">:</span> Shows a file history quick pick    //  - gitlens.showQuickRepoHistory<span class="token operator">:</span> Shows a branch history quick pick    <span class="token property">"gitlens.codeLens.recentChange.command"</span><span class="token operator">:</span> <span class="token string">"gitlens.showQuickCommitFileDetails"</span><span class="token punctuation">,</span>    // Specifies whether to provide a _recent change_ code lens<span class="token punctuation">,</span> showing the author and date of the most recent commit for the file or code block    <span class="token property">"gitlens.codeLens.recentChange.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies where Git code lens will be shown in the document    <span class="token property">"gitlens.codeLens.scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">,</span> <span class="token string">"containers"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // Specifies where Git code lens will be shown in the document for the specified languages    <span class="token property">"gitlens.codeLens.scopesByLanguage"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"azure-pipelines"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"css"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"json"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"jsonc"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"less"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"postcss"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"python"</span><span class="token punctuation">,</span>            <span class="token property">"symbolScopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"!Module"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"scss"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"stylus"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"yaml"</span><span class="token punctuation">,</span>            <span class="token property">"scopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"document"</span><span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    // Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`    <span class="token property">"gitlens.codeLens.symbolScopes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // Specifies how to format absolute dates (e.g. using the `$<span class="token punctuation">{</span>date<span class="token punctuation">}</span>` token<span class="token punctuation">)</span> for the current line blame annotation. See the <span class="token punctuation">[</span>Moment.js docs<span class="token punctuation">]</span>(https<span class="token operator">:</span>//momentjs.com/docs/#/displaying/format/<span class="token punctuation">)</span> for valid formats    <span class="token property">"gitlens.currentLine.dateFormat"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Specifies whether to provide a blame annotation for the current line<span class="token punctuation">,</span> by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`<span class="token punctuation">)</span> to toggle the annotations on and off for the current window    <span class="token property">"gitlens.currentLine.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies the format of the current line blame annotation. See <span class="token punctuation">[</span>_Commit Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens<span class="token punctuation">)</span> in the GitLens docs. Date formatting is controlled by the `gitlens.currentLine.dateFormat` setting    <span class="token property">"gitlens.currentLine.format"</span><span class="token operator">:</span> <span class="token string">"${author}, ${agoOrDate} • ${message}"</span><span class="token punctuation">,</span>    // Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport    <span class="token property">"gitlens.currentLine.scrollable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies debug mode    <span class="token property">"gitlens.debug"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Specifies how absolute dates will be formatted by default. See the <span class="token punctuation">[</span>Moment.js docs<span class="token punctuation">]</span>(https<span class="token operator">:</span>//momentjs.com/docs/#/displaying/format/<span class="token punctuation">)</span> for valid formats    <span class="token property">"gitlens.defaultDateFormat"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Specifies how short absolute dates will be formatted by default. See the <span class="token punctuation">[</span>Moment.js docs<span class="token punctuation">]</span>(https<span class="token operator">:</span>//momentjs.com/docs/#/displaying/format/<span class="token punctuation">)</span> for valid formats    <span class="token property">"gitlens.defaultDateShortFormat"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Specifies whether commit dates should use the authored or committed date    //  - authored<span class="token operator">:</span> Uses the date when the changes were authored (i.e. originally written<span class="token punctuation">)</span>    //  - committed<span class="token operator">:</span> Uses the date when the changes were committed    <span class="token property">"gitlens.defaultDateSource"</span><span class="token operator">:</span> <span class="token string">"authored"</span><span class="token punctuation">,</span>    // Specifies how dates will be displayed by default    //  - relative<span class="token operator">:</span> e.g. <span class="token number">1</span> day ago    //  - absolute<span class="token operator">:</span> e.g. July 25th<span class="token punctuation">,</span> <span class="token number">2018</span> <span class="token number">7</span><span class="token operator">:</span>18pm    <span class="token property">"gitlens.defaultDateStyle"</span><span class="token operator">:</span> <span class="token string">"relative"</span><span class="token punctuation">,</span>    // Specifies the style of the gravatar default (fallback<span class="token punctuation">)</span> images    //  - identicon<span class="token operator">:</span> A geometric pattern    //  - mp<span class="token operator">:</span> A simple<span class="token punctuation">,</span> cartoon-style silhouetted outline of a person (does not vary by email hash<span class="token punctuation">)</span>    //  - monsterid<span class="token operator">:</span> A monster with different colors<span class="token punctuation">,</span> faces<span class="token punctuation">,</span> etc    //  - retro<span class="token operator">:</span> <span class="token number">8</span>-bit arcade-style pixelated faces    //  - robohash<span class="token operator">:</span> A robot with different colors<span class="token punctuation">,</span> faces<span class="token punctuation">,</span> etc    //  - wavatar<span class="token operator">:</span> A face with differing features and backgrounds    <span class="token property">"gitlens.defaultGravatarsStyle"</span><span class="token operator">:</span> <span class="token string">"robohash"</span><span class="token punctuation">,</span>    // Specifies the age of the most recent change (in days<span class="token punctuation">)</span> after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor`<span class="token punctuation">)</span>    <span class="token property">"gitlens.heatmap.ageThreshold"</span><span class="token operator">:</span> <span class="token string">"90"</span><span class="token punctuation">,</span>    // Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold<span class="token punctuation">)</span> than the `gitlens.heatmap.ageThreshold` value    <span class="token property">"gitlens.heatmap.coldColor"</span><span class="token operator">:</span> <span class="token string">"#0a60f6"</span><span class="token punctuation">,</span>    // Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot<span class="token punctuation">)</span> than the `gitlens.heatmap.ageThreshold` value    <span class="token property">"gitlens.heatmap.hotColor"</span><span class="token operator">:</span> <span class="token string">"#f66a0a"</span><span class="token punctuation">,</span>    // Specifies how the gutter heatmap annotations will be toggled    //  - file<span class="token operator">:</span> Toggles each file individually    //  - window<span class="token operator">:</span> Toggles the window<span class="token punctuation">,</span> i.e. all files at once    <span class="token property">"gitlens.heatmap.toggleMode"</span><span class="token operator">:</span> <span class="token string">"file"</span><span class="token punctuation">,</span>    // Specifies whether to provide a _changes (diff<span class="token punctuation">)</span>_ hover for all lines when showing blame annotations    <span class="token property">"gitlens.hovers.annotations.changes"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations    <span class="token property">"gitlens.hovers.annotations.details"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to provide any hovers when showing blame annotations    <span class="token property">"gitlens.hovers.annotations.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies when to trigger hovers when showing blame annotations    //  - annotation<span class="token operator">:</span> Only shown when hovering over the line annotation    //  - line<span class="token operator">:</span> Shown when hovering anywhere over the line    <span class="token property">"gitlens.hovers.annotations.over"</span><span class="token operator">:</span> <span class="token string">"line"</span><span class="token punctuation">,</span>    // Specifies whether to show avatar images in hovers    <span class="token property">"gitlens.hovers.avatars"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff<span class="token punctuation">)</span>_ hover    //  - line<span class="token operator">:</span> Shows only the changes to the line    //  - hunk<span class="token operator">:</span> Shows the set of related changes    <span class="token property">"gitlens.hovers.changesDiff"</span><span class="token operator">:</span> <span class="token string">"line"</span><span class="token punctuation">,</span>    // Specifies whether to provide a _changes (diff<span class="token punctuation">)</span>_ hover for the current line    <span class="token property">"gitlens.hovers.currentLine.changes"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to provide a _commit details_ hover for the current line    <span class="token property">"gitlens.hovers.currentLine.details"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to provide any hovers for the current line    <span class="token property">"gitlens.hovers.currentLine.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies when to trigger hovers for the current line    //  - annotation<span class="token operator">:</span> Only shown when hovering over the line annotation    //  - line<span class="token operator">:</span> Shown when hovering anywhere over the line    <span class="token property">"gitlens.hovers.currentLine.over"</span><span class="token operator">:</span> <span class="token string">"annotation"</span><span class="token punctuation">,</span>    // Specifies the format (in markdown<span class="token punctuation">)</span> of the _commit details_ hover. See <span class="token punctuation">[</span>_Commit Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.hovers.detailsMarkdownFormat"</span><span class="token operator">:</span> <span class="token string">"${avatar} &amp;nbsp;__${author}__, ${ago} &amp;nbsp; _(${date})_ \n\n${message}\n\n${commands}"</span><span class="token punctuation">,</span>    // Specifies whether to provide any hovers    <span class="token property">"gitlens.hovers.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to enable experimental features    <span class="token property">"gitlens.insiders"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Specifies the keymap to use for GitLens shortcut keys    //  - alternate<span class="token operator">:</span> Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS<span class="token punctuation">)</span>    //  - chorded<span class="token operator">:</span> Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS<span class="token punctuation">)</span>    //  - none<span class="token operator">:</span> No shortcut keys will be added    <span class="token property">"gitlens.keymap"</span><span class="token operator">:</span> <span class="token string">"chorded"</span><span class="token punctuation">,</span>    // Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share    <span class="token property">"gitlens.liveshare.allowGuestAccess"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies which commands will be added to which menus    <span class="token property">"gitlens.menus"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"editor"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"blame"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"clipboard"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"compare"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"details"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"history"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"remote"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"editorGroup"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"blame"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"compare"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"editorTab"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"clipboard"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"compare"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"history"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"remote"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"explorer"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"clipboard"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"compare"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"history"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"remote"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"scmGroup"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"compare"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"openClose"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"stash"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"stashInline"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"scmItem"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"clipboard"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"compare"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"history"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"remote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"stash"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Specifies the active GitLens mode<span class="token punctuation">,</span> if any    <span class="token property">"gitlens.mode.active"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // Specifies the active GitLens mode alignment in the status bar    //  - left<span class="token operator">:</span> Aligns to the left    //  - right<span class="token operator">:</span> Aligns to the right    <span class="token property">"gitlens.mode.statusBar.alignment"</span><span class="token operator">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>    // Specifies whether to provide the active GitLens mode in the status bar    <span class="token property">"gitlens.mode.statusBar.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies the user-defined GitLens modes    <span class="token property">"gitlens.modes"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"zen"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Zen"</span><span class="token punctuation">,</span>            <span class="token property">"statusBarItemName"</span><span class="token operator">:</span> <span class="token string">"Zen"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"for a zen-like experience, disables many visual features"</span><span class="token punctuation">,</span>            <span class="token property">"codeLens"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"currentLine"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"hovers"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"statusBar"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"review"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Review"</span><span class="token punctuation">,</span>            <span class="token property">"statusBarItemName"</span><span class="token operator">:</span> <span class="token string">"Reviewing"</span><span class="token punctuation">,</span>            <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"for reviewing code, enables many visual features"</span><span class="token punctuation">,</span>            <span class="token property">"codeLens"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"currentLine"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"hovers"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Specifies how much (if any<span class="token punctuation">)</span> output will be sent to the GitLens output channel    //  - silent<span class="token operator">:</span> Logs nothing    //  - errors<span class="token operator">:</span> Logs only errors    //  - verbose<span class="token operator">:</span> Logs all errors<span class="token punctuation">,</span> warnings<span class="token punctuation">,</span> and messages    //  - debug<span class="token operator">:</span> Logs all errors<span class="token punctuation">,</span> warnings<span class="token punctuation">,</span> and messages with extra context useful for debugging    <span class="token property">"gitlens.outputLevel"</span><span class="token operator">:</span> <span class="token string">"errors"</span><span class="token punctuation">,</span>    // Specifies where the highlights of the recently changed lines will be shown    <span class="token property">"gitlens.recentChanges.highlight.locations"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"gutter"</span><span class="token punctuation">,</span> <span class="token string">"line"</span><span class="token punctuation">,</span> <span class="token string">"overview"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // Specifies how the recently changed lines annotations will be toggled    //  - file<span class="token operator">:</span> Toggles each file individually    //  - window<span class="token operator">:</span> Toggles the window<span class="token punctuation">,</span> i.e. all files at once    <span class="token property">"gitlens.recentChanges.toggleMode"</span><span class="token operator">:</span> <span class="token string">"file"</span><span class="token punctuation">,</span>    // Specifies user-defined remote (code-hosting<span class="token punctuation">)</span> services or custom domains for built-in remote services    <span class="token property">"gitlens.remotes"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Specifies the display mode of the interactive settings editor    //  - simple<span class="token operator">:</span> Only displays common settings    //  - advanced<span class="token operator">:</span> Displays all settings    <span class="token property">"gitlens.settings.mode"</span><span class="token operator">:</span> <span class="token string">"simple"</span><span class="token punctuation">,</span>    // Specifies whether to show What's New after upgrading to new feature releases    <span class="token property">"gitlens.showWhatsNewAfterUpgrades"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies the blame alignment in the status bar    //  - left<span class="token operator">:</span> Aligns to the left    //  - right<span class="token operator">:</span> Aligns to the right    <span class="token property">"gitlens.statusBar.alignment"</span><span class="token operator">:</span> <span class="token string">"right"</span><span class="token punctuation">,</span>    // Specifies the command to be executed when the blame status bar item is clicked    //  - gitlens.toggleFileBlame<span class="token operator">:</span> Toggles file blame annotations    //  - gitlens.diffWithPrevious<span class="token operator">:</span> Compares the current line commit with the previous    //  - gitlens.diffWithWorking<span class="token operator">:</span> Compares the current line commit with the working tree    //  - gitlens.toggleCodeLens<span class="token operator">:</span> Toggles Git code lens    //  - gitlens.showQuickCommitDetails<span class="token operator">:</span> Shows a commit details quick pick    //  - gitlens.showQuickCommitFileDetails<span class="token operator">:</span> Shows a commit file details quick pick    //  - gitlens.showQuickFileHistory<span class="token operator">:</span> Shows a file history quick pick    //  - gitlens.showQuickRepoHistory<span class="token operator">:</span> Shows a branch history quick pick    <span class="token property">"gitlens.statusBar.command"</span><span class="token operator">:</span> <span class="token string">"gitlens.showQuickCommitDetails"</span><span class="token punctuation">,</span>    // Specifies how to format absolute dates (e.g. using the `$<span class="token punctuation">{</span>date<span class="token punctuation">}</span>` token<span class="token punctuation">)</span> in the blame information in the status bar. See the <span class="token punctuation">[</span>Moment.js docs<span class="token punctuation">]</span>(https<span class="token operator">:</span>//momentjs.com/docs/#/displaying/format/<span class="token punctuation">)</span> for valid formats    <span class="token property">"gitlens.statusBar.dateFormat"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Specifies whether to provide blame information in the status bar    <span class="token property">"gitlens.statusBar.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies the format of the blame information in the status bar. See <span class="token punctuation">[</span>_Commit Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens<span class="token punctuation">)</span> in the GitLens docs. Date formatting is controlled by the `gitlens.statusBar.dateFormat` setting    <span class="token property">"gitlens.statusBar.format"</span><span class="token operator">:</span> <span class="token string">"${author}, ${agoOrDate}"</span><span class="token punctuation">,</span>    // Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar <span class="token string">"flashing"</span>    <span class="token property">"gitlens.statusBar.reduceFlicker"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes    <span class="token property">"gitlens.strings.codeLens.unsavedChanges.authorsOnly"</span><span class="token operator">:</span> <span class="token string">"Unsaved changes (cannot determine authors)"</span><span class="token punctuation">,</span>    // Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes    <span class="token property">"gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors"</span><span class="token operator">:</span> <span class="token string">"Unsaved changes (cannot determine recent change or authors)"</span><span class="token punctuation">,</span>    // Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes    <span class="token property">"gitlens.strings.codeLens.unsavedChanges.recentChangeOnly"</span><span class="token operator">:</span> <span class="token string">"Unsaved changes (cannot determine recent change)"</span><span class="token punctuation">,</span>    // Specifies the description format of committed changes in the views. See <span class="token punctuation">[</span>_Commit Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.commitDescriptionFormat"</span><span class="token operator">:</span> <span class="token string">"${changes  •  }${author}, ${agoOrDate}"</span><span class="token punctuation">,</span>    // Specifies the description format of a committed file in the views. See <span class="token punctuation">[</span>_File Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.commitFileDescriptionFormat"</span><span class="token operator">:</span> <span class="token string">"${directory}${  ←  originalPath}"</span><span class="token punctuation">,</span>    // Specifies the format of a committed file in the views. See <span class="token punctuation">[</span>_File Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.commitFileFormat"</span><span class="token operator">:</span> <span class="token string">"${file}"</span><span class="token punctuation">,</span>    // Specifies the format of committed changes in the views. See <span class="token punctuation">[</span>_Commit Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.commitFormat"</span><span class="token operator">:</span> <span class="token string">"${message}"</span><span class="token punctuation">,</span>    // Specifies whether to show avatar images instead of commit (or status<span class="token punctuation">)</span> icons in the _Compare_ view    <span class="token property">"gitlens.views.compare.avatars"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to show the _Compare_ view    <span class="token property">"gitlens.views.compare.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to compact (flatten<span class="token punctuation">)</span> unnecessary file nesting in the _Compare_ view. Only applies when `gitlens.views.compare.files.layout` is set to `tree` or `auto`    <span class="token property">"gitlens.views.compare.files.compact"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies how the _Compare_ view will display files    //  - auto<span class="token operator">:</span> Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.compare.files.threshold` value and the number of files at each nesting level    //  - list<span class="token operator">:</span> Displays files as a list    //  - tree<span class="token operator">:</span> Displays files as a tree    <span class="token property">"gitlens.views.compare.files.layout"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Compare_ view. Only applies when `gitlens.views.compare.files.layout` is set to `auto`    <span class="token property">"gitlens.views.compare.files.threshold"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    // Specifies where to show the _Compare_ view    //  - gitlens<span class="token operator">:</span> Adds to the GitLens side bar    //  - explorer<span class="token operator">:</span> Adds to the Explorer side bar    //  - scm<span class="token operator">:</span> Adds to the Source Control side bar    <span class="token property">"gitlens.views.compare.location"</span><span class="token operator">:</span> <span class="token string">"gitlens"</span><span class="token punctuation">,</span>    // Specifies the default number of items to show in a view list. Use <span class="token number">0</span> to specify no limit    <span class="token property">"gitlens.views.defaultItemLimit"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    // Specifies whether to show avatar images instead of status icons in the _File History_ view    <span class="token property">"gitlens.views.fileHistory.avatars"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to show the _File History_ view    <span class="token property">"gitlens.views.fileHistory.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies where to show the _File History_ view    //  - gitlens<span class="token operator">:</span> Adds to the GitLens side bar    //  - explorer<span class="token operator">:</span> Adds to the Explorer side bar    //  - scm<span class="token operator">:</span> Adds to the Source Control side bar    <span class="token property">"gitlens.views.fileHistory.location"</span><span class="token operator">:</span> <span class="token string">"gitlens"</span><span class="token punctuation">,</span>    // Specifies whether to show avatar images instead of status icons in the _Line History_ view    <span class="token property">"gitlens.views.lineHistory.avatars"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to show the _Line History_ view    <span class="token property">"gitlens.views.lineHistory.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies where to show the _Line History_ view    //  - gitlens<span class="token operator">:</span> Adds to the GitLens side bar    //  - explorer<span class="token operator">:</span> Adds to the Explorer side bar    //  - scm<span class="token operator">:</span> Adds to the Source Control side bar    <span class="token property">"gitlens.views.lineHistory.location"</span><span class="token operator">:</span> <span class="token string">"gitlens"</span><span class="token punctuation">,</span>    // Specifies the number of items to show in a each page when paginating a view list. Use <span class="token number">0</span> to specify no limit    <span class="token property">"gitlens.views.pageItemLimit"</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    // Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes    <span class="token property">"gitlens.views.repositories.autoRefresh"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files    <span class="token property">"gitlens.views.repositories.autoReveal"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to show avatar images instead of commit (or status<span class="token punctuation">)</span> icons in the _Repositories_ view    <span class="token property">"gitlens.views.repositories.avatars"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies how the _Repositories_ view will display branches    //  - list<span class="token operator">:</span> Displays branches as a list    //  - tree<span class="token operator">:</span> Displays branches as a tree when branch names contain slashes `/`    <span class="token property">"gitlens.views.repositories.branches.layout"</span><span class="token operator">:</span> <span class="token string">"tree"</span><span class="token punctuation">,</span>    // Specifies whether to show the _Repositories_ view in a compact display density    <span class="token property">"gitlens.views.repositories.compact"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Specifies whether to show the _Repositories_ view    <span class="token property">"gitlens.views.repositories.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to compact (flatten<span class="token punctuation">)</span> unnecessary file nesting in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `tree` or `auto`    <span class="token property">"gitlens.views.repositories.files.compact"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies how the _Repositories_ view will display files    //  - auto<span class="token operator">:</span> Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.repositories.files.threshold` value and the number of files at each nesting level    //  - list<span class="token operator">:</span> Displays files as a list    //  - tree<span class="token operator">:</span> Displays files as a tree    <span class="token property">"gitlens.views.repositories.files.layout"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `gitlens.views.repositories.files.layout` is set to `auto`    <span class="token property">"gitlens.views.repositories.files.threshold"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    // Specifies whether to include working tree file status for each repository in the _Repositories_ view    <span class="token property">"gitlens.views.repositories.includeWorkingTree"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies where to show the _Repositories_ view    //  - gitlens<span class="token operator">:</span> Adds to the GitLens side bar    //  - explorer<span class="token operator">:</span> Adds to the Explorer side bar    //  - scm<span class="token operator">:</span> Adds to the Source Control side bar    <span class="token property">"gitlens.views.repositories.location"</span><span class="token operator">:</span> <span class="token string">"gitlens"</span><span class="token punctuation">,</span>    // Specifies whether to show the tracking branch when displaying local branches in the _Repositories_ view    <span class="token property">"gitlens.views.repositories.showTrackingBranch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to show avatar images instead of commit (or status<span class="token punctuation">)</span> icons in the _Search Commits_ view    <span class="token property">"gitlens.views.search.avatars"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to show the _Search Commits_ view    <span class="token property">"gitlens.views.search.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies whether to compact (flatten<span class="token punctuation">)</span> unnecessary file nesting in the _Search Commits_ view. Only applies when `gitlens.views.search.files.layout` is set to `tree` or `auto`    <span class="token property">"gitlens.views.search.files.compact"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies how the _Search Commits_ view will display files    //  - auto<span class="token operator">:</span> Automatically switches between displaying files as a `tree` or `list` based on the `gitlens.views.search.files.threshold` value and the number of files at each nesting level    //  - list<span class="token operator">:</span> Displays files as a list    //  - tree<span class="token operator">:</span> Displays files as a tree    <span class="token property">"gitlens.views.search.files.layout"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search Commits_ view. Only applies when `gitlens.views.search.files.layout` is set to `auto`    <span class="token property">"gitlens.views.search.files.threshold"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>    // Specifies where to show the _Search Commits_ view    //  - gitlens<span class="token operator">:</span> Adds to the GitLens side bar    //  - explorer<span class="token operator">:</span> Adds to the Explorer side bar    //  - scm<span class="token operator">:</span> Adds to the Source Control side bar    <span class="token property">"gitlens.views.search.location"</span><span class="token operator">:</span> <span class="token string">"gitlens"</span><span class="token punctuation">,</span>    // Specifies whether to show relative date markers (_Less than a week ago_<span class="token punctuation">,</span> _Over a week ago_<span class="token punctuation">,</span> _Over a month ago_<span class="token punctuation">,</span> etc<span class="token punctuation">)</span> on revision (commit<span class="token punctuation">)</span> histories in the views    <span class="token property">"gitlens.views.showRelativeDateMarkers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Specifies the description format of stashed changes in the views. See <span class="token punctuation">[</span>_Commit Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.stashDescriptionFormat"</span><span class="token operator">:</span> <span class="token string">"${changes  •  }${agoOrDate}"</span><span class="token punctuation">,</span>    // Specifies the description format of a stashed file in the views. See <span class="token punctuation">[</span>_File Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.stashFileDescriptionFormat"</span><span class="token operator">:</span> <span class="token string">"${directory}${  ←  originalPath}"</span><span class="token punctuation">,</span>    // Specifies the format of a stashed file in the views. See <span class="token punctuation">[</span>_File Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.stashFileFormat"</span><span class="token operator">:</span> <span class="token string">"${file}"</span><span class="token punctuation">,</span>    // Specifies the format of stashed changes in the views. See <span class="token punctuation">[</span>_Commit Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.stashFormat"</span><span class="token operator">:</span> <span class="token string">"${message}"</span><span class="token punctuation">,</span>    // Specifies the description format of the status of a working or committed file in the views. See <span class="token punctuation">[</span>_File Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.statusFileDescriptionFormat"</span><span class="token operator">:</span> <span class="token string">"${directory}${  ←  originalPath}"</span><span class="token punctuation">,</span>    // Specifies the format of the status of a working or committed file in the views. See <span class="token punctuation">[</span>_File Tokens_<span class="token punctuation">]</span>(https<span class="token operator">:</span>//github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens<span class="token punctuation">)</span> in the GitLens docs    <span class="token property">"gitlens.views.statusFileFormat"</span><span class="token operator">:</span> <span class="token string">"${working  }${file}"</span><span class="token punctuation">,</span>    // 控制是否自动检测 Grunt 任务。默认开启。    <span class="token property">"grunt.autoDetect"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // Current accent color selected    <span class="token property">"materialTheme.accent"</span><span class="token operator">:</span> <span class="token string">"Blue"</span><span class="token punctuation">,</span>    // 控制是否启用强制推送 (不论 force 还是 force-with-lease<span class="token punctuation">)</span>。    <span class="token property">"git.allowForcePush"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 始终显示“暂存的更改”资源组。    <span class="token property">"git.alwaysShowStagedChangesResourceGroup"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制所有提交的 signoff 标志。    <span class="token property">"git.alwaysSignOff"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 启用时，提交将自动从当前Git存储库的默认远程获取。    <span class="token property">"git.autofetch"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 在启用 <span class="token string">"git.autofetch"</span> 情况下每次自动 git fetch 之间的间隔时间(以秒为单位<span class="token punctuation">)</span>。    <span class="token property">"git.autofetchPeriod"</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">,</span>    // 是否启用自动刷新。    <span class="token property">"git.autorefresh"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 配置何时自动检测存储库。    //  - <span class="token boolean">true</span><span class="token operator">:</span> 扫描当前打开文件夹与当前打开文件所在文件夹的子文件夹。    //  - <span class="token boolean">false</span><span class="token operator">:</span> 禁止自动扫描存储库。    //  - subFolders<span class="token operator">:</span> 扫描当前打开文件夹的子文件夹。    //  - openEditors<span class="token operator">:</span> 扫描当前打开文件的父文件夹。    <span class="token property">"git.autoRepositoryDetection"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在拉取前暂存所有更改，在成功拉取后还原这些更改。    <span class="token property">"git.autoStash"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 用于验证新分支名称的正则表达式。    <span class="token property">"git.branchValidationRegex"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // 在新分支名称中替换空白字符的字符。    <span class="token property">"git.branchWhitespaceChar"</span><span class="token operator">:</span> <span class="token string">"-"</span><span class="token punctuation">,</span>    // 控制在运行“推送到...”功能时列出的分支类型。    //  - all<span class="token operator">:</span> 显示全部参考文献。    //  - local<span class="token operator">:</span> 只显示本地分支。    //  - tags<span class="token operator">:</span> 仅显示标记。    //  - remote<span class="token operator">:</span> 仅显示远程分支。    <span class="token property">"git.checkoutType"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>    // 在创建空提交时始终进行确认。    <span class="token property">"git.confirmEmptyCommits"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在强制推送前是否进行确认。    <span class="token property">"git.confirmForcePush"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 同步 Git 存储库前请先进行确认。    <span class="token property">"git.confirmSync"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制 Git 徽章计数器。    //  - all<span class="token operator">:</span> 对所有更改计数。    //  - tracked<span class="token operator">:</span> 仅对跟踪的更改计数。    //  - off<span class="token operator">:</span> 关闭计数器。    <span class="token property">"git.countBadge"</span><span class="token operator">:</span> <span class="token string">"all"</span><span class="token punctuation">,</span>    // 控制 Git 是否在资源管理器和“打开的编辑器”视图中添加颜色和小标。    <span class="token property">"git.decorations.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 克隆 Git 存储库的默认位置。    <span class="token property">"git.defaultCloneDirectory"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 控制是否自动检测 Git 子模块。    <span class="token property">"git.detectSubmodules"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制可检测到的 Git 子模块的限制。    <span class="token property">"git.detectSubmodulesLimit"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    // 启用使用 GPG 签名的提交    <span class="token property">"git.enableCommitSigning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 是否启用 Git。    <span class="token property">"git.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在没有暂存的更改时提交所有更改。    <span class="token property">"git.enableSmartCommit"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 在拉取时是抓取所有分支还是仅当前分支。    <span class="token property">"git.fetchOnPull"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 要忽略的 Git 存储库列表。    <span class="token property">"git.ignoredRepositories"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 忽略“旧版 Git”警告。    <span class="token property">"git.ignoreLegacyWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 忽略“存储库中存在大量更改”的警告。    <span class="token property">"git.ignoreLimitWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 忽略“缺失 Git”的警告。    <span class="token property">"git.ignoreMissingGitWarning"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制何时显示提交消息输入验证。    <span class="token property">"git.inputValidation"</span><span class="token operator">:</span> <span class="token string">"warn"</span><span class="token punctuation">,</span>    // 控制显示提交消息长度警告的长度阈值。    <span class="token property">"git.inputValidationLength"</span><span class="token operator">:</span> <span class="token number">72</span><span class="token punctuation">,</span>    // 控制显示警告的提交消息主题长度阈值。请取消设置它以继承 <span class="token string">"config.inputValidationLength"</span> 的值。    <span class="token property">"git.inputValidationSubjectLength"</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">,</span>    // 控制单击更改时是否应打开差异编辑器。否则将打开常规编辑器。    <span class="token property">"git.openDiffOnClick"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Git 可执行文件的路径和文件名。例如<span class="token operator">:</span> `C<span class="token operator">:</span>\Program Files\Git\bin\git.exe` (Windows<span class="token punctuation">)</span>。    <span class="token property">"git.path"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 成功提交后运行 git 命令。    //  - none<span class="token operator">:</span> 提交后不要运行任何命令。    //  - push<span class="token operator">:</span> 成功提交后运行'Git Push'。    //  - sync<span class="token operator">:</span> 成功提交后运行'Git Sync'。    <span class="token property">"git.postCommitCommand"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    // 控制 Git 是否在提交之前检查未保存的文件。    <span class="token property">"git.promptToSaveFilesBeforeCommit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 在运行“同步”命令时，强制 Git 使用“变基”。    <span class="token property">"git.rebaseWhenSync"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 在其中搜索 Git 存储库的路径的列表。    <span class="token property">"git.scanRepositories"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 控制是否在 Git 更改视图中显示内联“打开文件”操作。    <span class="token property">"git.showInlineOpenFileAction"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制 Git 操作是否显示进度提示。    <span class="token property">"git.showProgress"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 控制在推送成功时是否显示通知。    <span class="token property">"git.showPushSuccessNotification"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 控制是否使用更安全的 force-with-lease 进行强制推送。    <span class="token property">"git.useForcePushWithLease"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Include parentheses around a sole arrow function parameter    <span class="token property">"prettier.arrowParens"</span><span class="token operator">:</span> <span class="token string">"avoid"</span><span class="token punctuation">,</span>    // Controls the printing of spaces inside object literals    <span class="token property">"prettier.bracketSpacing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // A list of languages IDs to disable this extension on    <span class="token property">"prettier.disableLanguages"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // Specify the end of line used by prettier    <span class="token property">"prettier.endOfLine"</span><span class="token operator">:</span> <span class="token string">"auto"</span><span class="token punctuation">,</span>    // Use 'prettier-eslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from eslint rules.    <span class="token property">"prettier.eslintIntegration"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Specify the global whitespace sensitivity for HTML files.    //  Valid options<span class="token operator">:</span>    // 'css' - Respect the default value of CSS display property.    // 'strict' - Whitespaces are considered sensitive.    // 'ignore' - Whitespaces are considered insensitive.    <span class="token property">"prettier.htmlWhitespaceSensitivity"</span><span class="token operator">:</span> <span class="token string">"css"</span><span class="token punctuation">,</span>    // Path to a .prettierignore or similar file    <span class="token property">"prettier.ignorePath"</span><span class="token operator">:</span> <span class="token string">".prettierignore"</span><span class="token punctuation">,</span>    // If <span class="token boolean">true</span><span class="token punctuation">,</span> puts the `>` of a multi-line jsx element at the end of the last line instead of being alone on the next line    <span class="token property">"prettier.jsxBracketSameLine"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Use single quotes instead of double quotes in JSX    <span class="token property">"prettier.jsxSingleQuote"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Override the parser. You shouldn't have to change this setting.    <span class="token property">"prettier.parser"</span><span class="token operator">:</span> <span class="token string">"babylon"</span><span class="token punctuation">,</span>    // Fit code within this line limit    <span class="token property">"prettier.printWidth"</span><span class="token operator">:</span> <span class="token number">80</span><span class="token punctuation">,</span>    // (Markdown<span class="token punctuation">)</span> wrap prose over multiple lines    <span class="token property">"prettier.proseWrap"</span><span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>    // Change when properties in objects are quoted    <span class="token property">"prettier.quoteProps"</span><span class="token operator">:</span> <span class="token string">"as-needed"</span><span class="token punctuation">,</span>    // Require a 'prettierconfig' to format    <span class="token property">"prettier.requireConfig"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Whether to add a semicolon at the end of every line    <span class="token property">"prettier.semi"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // If <span class="token boolean">true</span><span class="token punctuation">,</span> will use single instead of double quotes    <span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Use 'prettier-stylelint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from stylelint rules.    <span class="token property">"prettier.stylelintIntegration"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Number of spaces it should use per tab    <span class="token property">"prettier.tabWidth"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    // Controls the printing of trailing commas wherever possible.    //  Valid options<span class="token operator">:</span>    //     'none' - No trailing commas    //     'es5' - Trailing commas where valid in ES5 (objects<span class="token punctuation">,</span> arrays<span class="token punctuation">,</span> etc<span class="token punctuation">)</span>    //     'all' - Trailing commas wherever possible (function arguments<span class="token punctuation">)</span>    <span class="token property">"prettier.trailingComma"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    // Use 'prettier-tslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from tslint rules.    <span class="token property">"prettier.tslintIntegration"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Indent lines with tabs    <span class="token property">"prettier.useTabs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 不应展开 Emmet 缩写的语言数组。    <span class="token property">"emmet.excludeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"markdown"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 指向包含 Emmet 配置文件与代码片段的文件夹路径。    <span class="token property">"emmet.extensionsPath"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // 在默认不支持 Emmet 的语言中启用 Emmet 缩写功能。在此添加该语言与受支持的语言间的映射。    // 示例<span class="token operator">:</span> `<span class="token punctuation">{</span><span class="token property">"vue-html"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span> <span class="token property">"javascript"</span><span class="token operator">:</span> <span class="token string">"javascriptreact"</span><span class="token punctuation">}</span>`    <span class="token property">"emmet.includeLanguages"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 当设置为 `<span class="token boolean">false</span>` 时，将分析整个文件并确定当前位置能否展开 Emmet 缩写。当设置为 `<span class="token boolean">true</span>` 时，将仅在 CSS/SCSS/LESS 文件中分析当前位置周围的内容。    <span class="token property">"emmet.optimizeStylesheetParsing"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 用于修改 Emmet 某些操作和解析程序的行为的首选项。    <span class="token property">"emmet.preferences"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 将可能的 Emmet 缩写作为建议进行显示。当在样式表中或 emmet.showExpandedAbbreviation 设置为 `<span class="token string">"never"</span>` 时不适用。    <span class="token property">"emmet.showAbbreviationSuggestions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 将展开的 Emmet 缩写作为建议进行显示。    // 若选择 `<span class="token string">"inMarkupAndStylesheetFilesOnly"</span>`，将在 html、haml、jade、slim、xml、xsl、css、scss、sass、less 和 stylus 文件中生效。    // 若选择 `<span class="token string">"always"</span>`，将在所有适用文件 (不仅仅是标记或 CSS 文件<span class="token punctuation">)</span> 的所有部分生效。    <span class="token property">"emmet.showExpandedAbbreviation"</span><span class="token operator">:</span> <span class="token string">"always"</span><span class="token punctuation">,</span>    // 若为 `<span class="token boolean">true</span>`，Emmet 建议将显示为代码片段。可以在 `editor.snippetSuggestions` 设置中排列其顺序。    <span class="token property">"emmet.showSuggestionsAsSnippets"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 为指定的语法定义配置文件或使用带有特定规则的配置文件。    <span class="token property">"emmet.syntaxProfiles"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 启用后，按下 TAB 键，将展开 Emmet 缩写。    <span class="token property">"emmet.triggerExpansionOnTab"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 用于 Emmet 代码片段的变量    <span class="token property">"emmet.variables"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // Set the languages that the extension will be activated.  e.g. <span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">,</span><span class="token string">"xml"</span><span class="token punctuation">,</span><span class="token string">"php"</span><span class="token punctuation">]</span>. Use <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span> to activate for all languages.    <span class="token property">"auto-close-tag.activationOnLanguage"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"xml"</span><span class="token punctuation">,</span>        <span class="token string">"php"</span><span class="token punctuation">,</span>        <span class="token string">"blade"</span><span class="token punctuation">,</span>        <span class="token string">"ejs"</span><span class="token punctuation">,</span>        <span class="token string">"jinja"</span><span class="token punctuation">,</span>        <span class="token string">"javascript"</span><span class="token punctuation">,</span>        <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>        <span class="token string">"typescript"</span><span class="token punctuation">,</span>        <span class="token string">"typescriptreact"</span><span class="token punctuation">,</span>        <span class="token string">"plaintext"</span><span class="token punctuation">,</span>        <span class="token string">"markdown"</span><span class="token punctuation">,</span>        <span class="token string">"vue"</span><span class="token punctuation">,</span>        <span class="token string">"liquid"</span><span class="token punctuation">,</span>        <span class="token string">"erb"</span><span class="token punctuation">,</span>        <span class="token string">"lang-cfml"</span><span class="token punctuation">,</span>        <span class="token string">"cfml"</span><span class="token punctuation">,</span>        <span class="token string">"HTML (Eex)"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    // Whether to close self-closing tag automatically    <span class="token property">"auto-close-tag.enableAutoCloseSelfClosingTag"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Whether to insert close tag automatically    <span class="token property">"auto-close-tag.enableAutoCloseTag"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Set the tag list that would not be auto closed.    <span class="token property">"auto-close-tag.excludedTags"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"area"</span><span class="token punctuation">,</span>        <span class="token string">"base"</span><span class="token punctuation">,</span>        <span class="token string">"br"</span><span class="token punctuation">,</span>        <span class="token string">"col"</span><span class="token punctuation">,</span>        <span class="token string">"command"</span><span class="token punctuation">,</span>        <span class="token string">"embed"</span><span class="token punctuation">,</span>        <span class="token string">"hr"</span><span class="token punctuation">,</span>        <span class="token string">"img"</span><span class="token punctuation">,</span>        <span class="token string">"input"</span><span class="token punctuation">,</span>        <span class="token string">"keygen"</span><span class="token punctuation">,</span>        <span class="token string">"link"</span><span class="token punctuation">,</span>        <span class="token string">"meta"</span><span class="token punctuation">,</span>        <span class="token string">"param"</span><span class="token punctuation">,</span>        <span class="token string">"source"</span><span class="token punctuation">,</span>        <span class="token string">"track"</span><span class="token punctuation">,</span>        <span class="token string">"wbr"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    // Enable both Visual Studio and Sublime Text mode    <span class="token property">"auto-close-tag.fullMode"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Auto close tag when &lt;/ is typed<span class="token punctuation">,</span> same as Sublime Text <span class="token number">3</span>    <span class="token property">"auto-close-tag.SublimeText3Mode"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 是否在解决合并冲突后自动转到下一个合并冲突。    <span class="token property">"merge-conflict.autoNavigateNextConflict.enabled"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 为编辑器中的合并冲突区域创建 CodeLens。    <span class="token property">"merge-conflict.codeLens.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 为编辑器中的合并冲突区域创建提示小标。    <span class="token property">"merge-conflict.decorators.enabled"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Set the languages that the extension will be activated.  e.g. <span class="token punctuation">[</span><span class="token string">"html"</span><span class="token punctuation">,</span><span class="token string">"xml"</span><span class="token punctuation">,</span><span class="token string">"php"</span><span class="token punctuation">]</span> By default<span class="token punctuation">,</span> it is <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span> and will be activated for all languages.    <span class="token property">"auto-rename-tag.activationOnLanguage"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // 控制是否自动检测 npm 脚本。    <span class="token property">"npm.autoDetect"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // 在资源管理器中启用“npm 脚本”视图。    <span class="token property">"npm.enableScriptExplorer"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 配置应从自动脚本检测中排除的文件夹的 glob 模式。    <span class="token property">"npm.exclude"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // 从 https<span class="token operator">:</span>//registry.npmjs/org 和 https<span class="token operator">:</span>//registry.bower.io 获取数据，并在 npm 依赖中提供自动完成和悬停信息功能。    <span class="token property">"npm.fetchOnlinePackageInfo"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 用于运行脚本的程序包管理器。    <span class="token property">"npm.packageManager"</span><span class="token operator">:</span> <span class="token string">"npm"</span><span class="token punctuation">,</span>    // 使用 `--silent` 选项运行 npm 命令。    <span class="token property">"npm.runSilent"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 在脚本资源管理器中点击时进行的默认操作<span class="token operator">:</span> `open` (打开<span class="token punctuation">)</span> 或 `run` (运行<span class="token punctuation">)</span>。默认值为 `open`。    <span class="token property">"npm.scriptExplorerAction"</span><span class="token operator">:</span> <span class="token string">"open"</span><span class="token punctuation">,</span>    // Whether to clear previous output before each run.    <span class="token property">"code-runner.clearPreviousOutput"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Set the custom command to run.    <span class="token property">"code-runner.customCommand"</span><span class="token operator">:</span> <span class="token string">"echo Hello"</span><span class="token punctuation">,</span>    // Set the working directory.    <span class="token property">"code-runner.cwd"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // Set the default language to run.    <span class="token property">"code-runner.defaultLanguage"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // Whether to enable AppInsights to track user telemetry data.    <span class="token property">"code-runner.enableAppInsights"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Set the executor of each language.    <span class="token property">"code-runner.executorMap"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"javascript"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>        <span class="token property">"java"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; javac $fileName &amp;&amp; java $fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">"c"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">"cpp"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">"objective-c"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; gcc -framework Cocoa $fileName -o $fileNameWithoutExt &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">"php"</span><span class="token operator">:</span> <span class="token string">"php"</span><span class="token punctuation">,</span>        <span class="token property">"python"</span><span class="token operator">:</span> <span class="token string">"python -u"</span><span class="token punctuation">,</span>        <span class="token property">"perl"</span><span class="token operator">:</span> <span class="token string">"perl"</span><span class="token punctuation">,</span>        <span class="token property">"perl6"</span><span class="token operator">:</span> <span class="token string">"perl6"</span><span class="token punctuation">,</span>        <span class="token property">"ruby"</span><span class="token operator">:</span> <span class="token string">"ruby"</span><span class="token punctuation">,</span>        <span class="token property">"go"</span><span class="token operator">:</span> <span class="token string">"go run"</span><span class="token punctuation">,</span>        <span class="token property">"lua"</span><span class="token operator">:</span> <span class="token string">"lua"</span><span class="token punctuation">,</span>        <span class="token property">"groovy"</span><span class="token operator">:</span> <span class="token string">"groovy"</span><span class="token punctuation">,</span>        <span class="token property">"powershell"</span><span class="token operator">:</span> <span class="token string">"powershell -ExecutionPolicy ByPass -File"</span><span class="token punctuation">,</span>        <span class="token property">"bat"</span><span class="token operator">:</span> <span class="token string">"cmd /c"</span><span class="token punctuation">,</span>        <span class="token property">"shellscript"</span><span class="token operator">:</span> <span class="token string">"bash"</span><span class="token punctuation">,</span>        <span class="token property">"fsharp"</span><span class="token operator">:</span> <span class="token string">"fsi"</span><span class="token punctuation">,</span>        <span class="token property">"csharp"</span><span class="token operator">:</span> <span class="token string">"scriptcs"</span><span class="token punctuation">,</span>        <span class="token property">"vbscript"</span><span class="token operator">:</span> <span class="token string">"cscript //Nologo"</span><span class="token punctuation">,</span>        <span class="token property">"typescript"</span><span class="token operator">:</span> <span class="token string">"ts-node"</span><span class="token punctuation">,</span>        <span class="token property">"coffeescript"</span><span class="token operator">:</span> <span class="token string">"coffee"</span><span class="token punctuation">,</span>        <span class="token property">"scala"</span><span class="token operator">:</span> <span class="token string">"scala"</span><span class="token punctuation">,</span>        <span class="token property">"swift"</span><span class="token operator">:</span> <span class="token string">"swift"</span><span class="token punctuation">,</span>        <span class="token property">"julia"</span><span class="token operator">:</span> <span class="token string">"julia"</span><span class="token punctuation">,</span>        <span class="token property">"crystal"</span><span class="token operator">:</span> <span class="token string">"crystal"</span><span class="token punctuation">,</span>        <span class="token property">"ocaml"</span><span class="token operator">:</span> <span class="token string">"ocaml"</span><span class="token punctuation">,</span>        <span class="token property">"r"</span><span class="token operator">:</span> <span class="token string">"Rscript"</span><span class="token punctuation">,</span>        <span class="token property">"applescript"</span><span class="token operator">:</span> <span class="token string">"osascript"</span><span class="token punctuation">,</span>        <span class="token property">"clojure"</span><span class="token operator">:</span> <span class="token string">"lein exec"</span><span class="token punctuation">,</span>        <span class="token property">"haxe"</span><span class="token operator">:</span> <span class="token string">"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">"rust"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; rustc $fileName &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">"racket"</span><span class="token operator">:</span> <span class="token string">"racket"</span><span class="token punctuation">,</span>        <span class="token property">"ahk"</span><span class="token operator">:</span> <span class="token string">"autohotkey"</span><span class="token punctuation">,</span>        <span class="token property">"autoit"</span><span class="token operator">:</span> <span class="token string">"autoit3"</span><span class="token punctuation">,</span>        <span class="token property">"dart"</span><span class="token operator">:</span> <span class="token string">"dart"</span><span class="token punctuation">,</span>        <span class="token property">"pascal"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">"d"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">"haskell"</span><span class="token operator">:</span> <span class="token string">"runhaskell"</span><span class="token punctuation">,</span>        <span class="token property">"nim"</span><span class="token operator">:</span> <span class="token string">"nim compile --verbosity:0 --hints:off --run"</span><span class="token punctuation">,</span>        <span class="token property">"lisp"</span><span class="token operator">:</span> <span class="token string">"sbcl --script"</span><span class="token punctuation">,</span>        <span class="token property">"kit"</span><span class="token operator">:</span> <span class="token string">"kitc --run"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Set the executor of each file extension.    <span class="token property">"code-runner.executorMapByFileExtension"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">".vb"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; vbc /nologo $fileName &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">".vbs"</span><span class="token operator">:</span> <span class="token string">"cscript //Nologo"</span><span class="token punctuation">,</span>        <span class="token property">".scala"</span><span class="token operator">:</span> <span class="token string">"scala"</span><span class="token punctuation">,</span>        <span class="token property">".jl"</span><span class="token operator">:</span> <span class="token string">"julia"</span><span class="token punctuation">,</span>        <span class="token property">".cr"</span><span class="token operator">:</span> <span class="token string">"crystal"</span><span class="token punctuation">,</span>        <span class="token property">".ml"</span><span class="token operator">:</span> <span class="token string">"ocaml"</span><span class="token punctuation">,</span>        <span class="token property">".exs"</span><span class="token operator">:</span> <span class="token string">"elixir"</span><span class="token punctuation">,</span>        <span class="token property">".hx"</span><span class="token operator">:</span> <span class="token string">"haxe --cwd $dirWithoutTrailingSlash --run $fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">".rkt"</span><span class="token operator">:</span> <span class="token string">"racket"</span><span class="token punctuation">,</span>        <span class="token property">".ahk"</span><span class="token operator">:</span> <span class="token string">"autohotkey"</span><span class="token punctuation">,</span>        <span class="token property">".au3"</span><span class="token operator">:</span> <span class="token string">"autoit3"</span><span class="token punctuation">,</span>        <span class="token property">".kt"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; kotlinc $fileName -include-runtime -d $fileNameWithoutExt.jar &amp;&amp; java -jar $fileNameWithoutExt.jar"</span><span class="token punctuation">,</span>        <span class="token property">".kts"</span><span class="token operator">:</span> <span class="token string">"kotlinc -script"</span><span class="token punctuation">,</span>        <span class="token property">".dart"</span><span class="token operator">:</span> <span class="token string">"dart"</span><span class="token punctuation">,</span>        <span class="token property">".pas"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">".pp"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; fpc $fileName &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">".d"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; dmd $fileName &amp;&amp; $dir$fileNameWithoutExt"</span><span class="token punctuation">,</span>        <span class="token property">".hs"</span><span class="token operator">:</span> <span class="token string">"runhaskell"</span><span class="token punctuation">,</span>        <span class="token property">".nim"</span><span class="token operator">:</span> <span class="token string">"nim compile --verbosity:0 --hints:off --run"</span><span class="token punctuation">,</span>        <span class="token property">".csproj"</span><span class="token operator">:</span> <span class="token string">"dotnet run --project"</span><span class="token punctuation">,</span>        <span class="token property">".fsproj"</span><span class="token operator">:</span> <span class="token string">"dotnet run --project"</span><span class="token punctuation">,</span>        <span class="token property">".lisp"</span><span class="token operator">:</span> <span class="token string">"sbcl --script"</span><span class="token punctuation">,</span>        <span class="token property">".kit"</span><span class="token operator">:</span> <span class="token string">"kitc --run"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Set the executor by glob.    <span class="token property">"code-runner.executorMapByGlob"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"pom.xml"</span><span class="token operator">:</span> <span class="token string">"cd $dir &amp;&amp; mvn clean package"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Whether to use the directory of the file to be executed as the working directory.    <span class="token property">"code-runner.fileDirectoryAsCwd"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Whether to ignore selection to always run entire file.    <span class="token property">"code-runner.ignoreSelection"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Set the mapping of languageId to file extension.    <span class="token property">"code-runner.languageIdToFileExtensionMap"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"bat"</span><span class="token operator">:</span> <span class="token string">".bat"</span><span class="token punctuation">,</span>        <span class="token property">"powershell"</span><span class="token operator">:</span> <span class="token string">".ps1"</span><span class="token punctuation">,</span>        <span class="token property">"typescript"</span><span class="token operator">:</span> <span class="token string">".ts"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Whether to preserve focus on code editor after code run is triggered.    <span class="token property">"code-runner.preserveFocus"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Whether to respect Shebang to run code.    <span class="token property">"code-runner.respectShebang"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Whether to run code in Integrated Terminal.    <span class="token property">"code-runner.runInTerminal"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Whether to save all files before running.    <span class="token property">"code-runner.saveAllFilesBeforeRun"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Whether to save the current file before running.    <span class="token property">"code-runner.saveFileBeforeRun"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Whether to show extra execution message like <span class="token punctuation">[</span>Running<span class="token punctuation">]</span> ... and <span class="token punctuation">[</span>Done<span class="token punctuation">]</span> ...    <span class="token property">"code-runner.showExecutionMessage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Whether to show 'Run Code' command in editor context menu.    <span class="token property">"code-runner.showRunCommandInEditorContextMenu"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Whether to show 'Run Code' command in explorer context menu.    <span class="token property">"code-runner.showRunCommandInExplorerContextMenu"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Whether to show 'Run Code' icon in editor title menu.    <span class="token property">"code-runner.showRunIconInEditorTitleMenu"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Temporary file name used in running selected code snippet. When it is set as empty<span class="token punctuation">,</span> the file name will be random.    <span class="token property">"code-runner.temporaryFileName"</span><span class="token operator">:</span> <span class="token string">"tempCodeRunnerFile"</span><span class="token punctuation">,</span>    // For Windows system<span class="token punctuation">,</span> replaces the Windows style drive letter in the command with a Unix style root when using a custom shell as the terminal<span class="token punctuation">,</span> like Bash or Cgywin. Example<span class="token operator">:</span> Setting this to '/mnt/' will replace 'C<span class="token operator">:</span>\path' with '/mnt/c/path'    <span class="token property">"code-runner.terminalRoot"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // Include completion for module export and auto import them    <span class="token property">"vetur.completion.autoImport"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Casing conversion for tag completion    //  - initial<span class="token operator">:</span> use the key in `components<span class="token operator">:</span> <span class="token punctuation">{</span>...<span class="token punctuation">}</span>` as is for tag completion and do not force any casing    //  - kebab<span class="token operator">:</span> kebab-case completion for &lt;my-tag>    <span class="token property">"vetur.completion.tagCasing"</span><span class="token operator">:</span> <span class="token string">"kebab"</span><span class="token punctuation">,</span>    // Enable/disable Vetur's built-in scaffolding snippets    <span class="token property">"vetur.completion.useScaffoldSnippets"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Log level for VLS    //  - INFO<span class="token operator">:</span> Only log info messages. This is the default.    //  - DEBUG<span class="token operator">:</span> Log info and debug messages.    <span class="token property">"vetur.dev.logLevel"</span><span class="token operator">:</span> <span class="token string">"INFO"</span><span class="token punctuation">,</span>    // Path to VLS for Vetur developers. There are two ways of using it.    //    // <span class="token number">1</span>. Clone vuejs/vetur from GitHub<span class="token punctuation">,</span> build it and point it to the ABSOLUTE path of `/server`.    // <span class="token number">2</span>. `yarn global add vue-language-server` and point Vetur to the installed location (`yarn global dir` + node_modules/vue-language-server<span class="token punctuation">)</span>    <span class="token property">"vetur.dev.vlsPath"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // The port that VLS listens to. Can be used for attaching to the VLS Node process for debugging / profiling.    <span class="token property">"vetur.dev.vlsPort"</span><span class="token operator">:</span> -<span class="token number">1</span><span class="token punctuation">,</span>    // Enable template interpolation service that offers diagnostics / hover / definition / references.    <span class="token property">"vetur.experimental.templateInterpolationService"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Default formatter for &lt;style> region    //  - none<span class="token operator">:</span> disable formatting    //  - prettier<span class="token operator">:</span> css formatter using css parser from prettier    <span class="token property">"vetur.format.defaultFormatter.css"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>    // Default formatter for &lt;template> region    //  - none<span class="token operator">:</span> disable formatting    //  - prettyhtml<span class="token operator">:</span> prettyhtml    //  - js-beautify-html<span class="token operator">:</span> html formatter of js-beautify    //  - prettier<span class="token operator">:</span> prettier    <span class="token property">"vetur.format.defaultFormatter.html"</span><span class="token operator">:</span> <span class="token string">"prettyhtml"</span><span class="token punctuation">,</span>    // Default formatter for &lt;script> region    //  - none<span class="token operator">:</span> disable formatting    //  - prettier<span class="token operator">:</span> js formatter from prettier    //  - prettier-eslint<span class="token operator">:</span> prettier-eslint    //  - vscode-typescript<span class="token operator">:</span> js formatter from TypeScript    <span class="token property">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>    // Default formatter for &lt;style lang='less'> region    //  - none<span class="token operator">:</span> disable formatting    //  - prettier<span class="token operator">:</span> less formatter using postcss parser from prettier    <span class="token property">"vetur.format.defaultFormatter.less"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>    // Default formatter for &lt;style lang='postcss'> region    //  - none<span class="token operator">:</span> disable formatting    //  - prettier<span class="token operator">:</span> postcss formatter using css parser from prettier    <span class="token property">"vetur.format.defaultFormatter.postcss"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>    // Default formatter for &lt;style lang='scss'> region    //  - none<span class="token operator">:</span> disable formatting    //  - prettier<span class="token operator">:</span> scss formatter using scss parser from prettier    <span class="token property">"vetur.format.defaultFormatter.scss"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>    // Default formatter for &lt;style lang='stylus'> region    //  - none<span class="token operator">:</span> disable formatting    //  - stylus-supremacy<span class="token operator">:</span> stylus formatter from stylus-supremacy    <span class="token property">"vetur.format.defaultFormatter.stylus"</span><span class="token operator">:</span> <span class="token string">"stylus-supremacy"</span><span class="token punctuation">,</span>    // Default formatter for &lt;script> region    //  - none<span class="token operator">:</span> disable formatting    //  - prettier<span class="token operator">:</span> ts formatter using typescript parser from prettier    //  - vscode-typescript<span class="token operator">:</span> ts formatter from TypeScript    <span class="token property">"vetur.format.defaultFormatter.ts"</span><span class="token operator">:</span> <span class="token string">"prettier"</span><span class="token punctuation">,</span>    // Options for all default formatters    <span class="token property">"vetur.format.defaultFormatterOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"js-beautify-html"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-expand-multiline"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"prettyhtml"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"printWidth"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token property">"singleQuote"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"wrapAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"sortAttributes"</span><span class="token operator">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Enable/disable the Vetur document formatter.    <span class="token property">"vetur.format.enable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Number of spaces per indentation level. Inherited by all formatters.    <span class="token property">"vetur.format.options.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    // Use tabs for indentation. Inherited by all formatters.    <span class="token property">"vetur.format.options.useTabs"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Whether to have initial indent for &lt;script> region    <span class="token property">"vetur.format.scriptInitialIndent"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Whether to have initial indent for &lt;style> region    <span class="token property">"vetur.format.styleInitialIndent"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Mapping from custom block tag name to language name. Used for generating grammar to support syntax highlighting for custom blocks.    <span class="token property">"vetur.grammar.customBlocks"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"docs"</span><span class="token operator">:</span> <span class="token string">"md"</span><span class="token punctuation">,</span>        <span class="token property">"i18n"</span><span class="token operator">:</span> <span class="token string">"json"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Traces the communication between VS Code and Vue Language Server.    <span class="token property">"vetur.trace.server"</span><span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">,</span>    // Use dependencies from workspace. Currently only for TypeScript.    <span class="token property">"vetur.useWorkspaceDependencies"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Validate js/ts in &lt;script>    <span class="token property">"vetur.validation.script"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Validate css/scss/less/postcss in &lt;style>    <span class="token property">"vetur.validation.style"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Validate vue-html in &lt;template> using eslint-plugin-vue    <span class="token property">"vetur.validation.template"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // CSS for the active scope. Use <span class="token punctuation">{</span>color<span class="token punctuation">}</span> to match the bracket color. The string types listed at https<span class="token operator">:</span>//code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used    <span class="token property">"bracketPairColorizer.activeScopeCSS"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"borderStyle : solid"</span><span class="token punctuation">,</span>        <span class="token string">"borderWidth : 1px"</span><span class="token punctuation">,</span>        <span class="token string">"borderColor : {color}; opacity: 0.5"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    // Should different brackets share a color group (Consecutive<span class="token punctuation">)</span><span class="token punctuation">,</span> or use their own color group (Independent<span class="token punctuation">)</span>    <span class="token property">"bracketPairColorizer.colorMode"</span><span class="token operator">:</span> <span class="token string">"Consecutive"</span><span class="token punctuation">,</span>    // Define paired characters and their shared color group    <span class="token property">"bracketPairColorizer.consecutivePairColors"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"()"</span><span class="token punctuation">,</span> <span class="token string">"[]"</span><span class="token punctuation">,</span> <span class="token string">"{}"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Gold"</span><span class="token punctuation">,</span> <span class="token string">"Orchid"</span><span class="token punctuation">,</span> <span class="token string">"LightSkyBlue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // Don't colorize files of these languages    <span class="token property">"bracketPairColorizer.excludedLanguages"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // Should opening brackets iterate the color cycle even if they are not nested    <span class="token property">"bracketPairColorizer.forceIterationColorCycle"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Ensure that an opening brackets color does not match a previous brackets color    <span class="token property">"bracketPairColorizer.forceUniqueOpeningColor"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Should the active scope brackets always be highlighted? Recommended to disable editor.matchBrackets if using this feature.    <span class="token property">"bracketPairColorizer.highlightActiveScope"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Define paired characters and their color groups    <span class="token property">"bracketPairColorizer.independentPairColors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">"()"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Gold"</span><span class="token punctuation">,</span> <span class="token string">"Orchid"</span><span class="token punctuation">,</span> <span class="token string">"LightSkyBlue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"[]"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Gold"</span><span class="token punctuation">,</span> <span class="token string">"Orchid"</span><span class="token punctuation">,</span> <span class="token string">"LightSkyBlue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"{}"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"Gold"</span><span class="token punctuation">,</span> <span class="token string">"Orchid"</span><span class="token punctuation">,</span> <span class="token string">"LightSkyBlue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"Red"</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    // Show active bracket scope in ruler?    <span class="token property">"bracketPairColorizer.rulerPosition"</span><span class="token operator">:</span> <span class="token string">"Center"</span><span class="token punctuation">,</span>    // CSS for the scope line. Use <span class="token punctuation">{</span>color<span class="token punctuation">}</span> to match the bracket color. The string types listed at https<span class="token operator">:</span>//code.visualstudio.com/docs/extensionAPI/vscode-api#DecorationRenderOptions can be used    <span class="token property">"bracketPairColorizer.scopeLineCSS"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"borderStyle : solid"</span><span class="token punctuation">,</span>        <span class="token string">"borderWidth : 1px"</span><span class="token punctuation">,</span>        <span class="token string">"borderColor : {color}; opacity: 0.5"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    // <span class="token boolean">True</span><span class="token operator">:</span> Scope Line will start from the ending bracket position. <span class="token boolean">False</span><span class="token operator">:</span> Scope Line will always be at column <span class="token number">0</span>    <span class="token property">"bracketPairColorizer.scopeLineRelativePosition"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Show active bracket scope in gutter?    <span class="token property">"bracketPairColorizer.showBracketsInGutter"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Show active bracket scope in ruler?    <span class="token property">"bracketPairColorizer.showBracketsInRuler"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Show a horizontal line to create a block around the active bracket scope?    <span class="token property">"bracketPairColorizer.showHorizontalScopeLine"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Show a vertical line on the left side of the editor representing the active bracket scope?    <span class="token property">"bracketPairColorizer.showVerticalScopeLine"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // How long the user should idle for<span class="token punctuation">,</span> before the document is colorized. Set to <span class="token number">0</span> to disable    <span class="token property">"bracketPairColorizer.timeOut"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    // 控制是否自动检测 Jake 任务。默认开启。    <span class="token property">"jake.autoDetect"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // Qiniu AccessKey    <span class="token property">"markdown-preview-enhanced.AccessKey"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // Automatically show preview of markdown being edited.    <span class="token property">"markdown-preview-enhanced.automaticallyShowPreviewOfMarkdownBeingEdited"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // In Markdown<span class="token punctuation">,</span> a single newline character doesn't cause a line break in the generated HTML. In GitHub Flavored Markdown<span class="token punctuation">,</span> that is not <span class="token boolean">true</span>. Enable this config option to insert line breaks in rendered HTML for single newlines in Markdown source.    <span class="token property">"markdown-preview-enhanced.breakOnSingleNewLine"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Qiniu Bucket    <span class="token property">"markdown-preview-enhanced.Bucket"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // Code block theme. If `auto.css` is chosen<span class="token punctuation">,</span> then the code block theme that best matches the current preview theme will be picked.    <span class="token property">"markdown-preview-enhanced.codeBlockTheme"</span><span class="token operator">:</span> <span class="token string">"auto.css"</span><span class="token punctuation">,</span>    // Qiniu Domain    <span class="token property">"markdown-preview-enhanced.Domain"</span><span class="token operator">:</span> <span class="token string">"http://"</span><span class="token punctuation">,</span>    // Enable CriticMarkup syntax. Only works with markdown-it parser. Please check http<span class="token operator">:</span>//criticmarkup.com/users-guide.php for more information.    <span class="token property">"markdown-preview-enhanced.enableCriticMarkupSyntax"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Enable emoji &amp; font-awesome plugin. This only works for markdown-it parser<span class="token punctuation">,</span> but not pandoc parser.    <span class="token property">"markdown-preview-enhanced.enableEmojiSyntax"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Enable extended table syntax to support merging table cells.    <span class="token property">"markdown-preview-enhanced.enableExtendedTableSyntax"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Enable or disable conversion of URL-like text to links in the markdown preview.    <span class="token property">"markdown-preview-enhanced.enableLinkify"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Enables executing code chunks and importing javascript files.    // ⚠️ Please use this feature with caution because it may put your security at risk! Your machine can get hacked if someone makes you open a markdown with malicious code while script execution is enabled.    <span class="token property">"markdown-preview-enhanced.enableScriptExecution"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Enable smartypants and other sweet transforms.    <span class="token property">"markdown-preview-enhanced.enableTypographer"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Enable Wiki Link syntax support. More information can be found at https<span class="token operator">:</span>//help.github.com/articles/adding-links-to-wikis/    <span class="token property">"markdown-preview-enhanced.enableWikiLinkSyntax"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Front matter rendering option    <span class="token property">"markdown-preview-enhanced.frontMatterRenderingOption"</span><span class="token operator">:</span> <span class="token string">"none"</span><span class="token punctuation">,</span>    // When using Image Helper to copy images<span class="token punctuation">,</span> by default images will be copied to root image folder path '/assets'    <span class="token property">"markdown-preview-enhanced.imageFolderPath"</span><span class="token operator">:</span> <span class="token string">"/assets"</span><span class="token punctuation">,</span>    // You can choose different image uploader to upload image    <span class="token property">"markdown-preview-enhanced.imageUploader"</span><span class="token operator">:</span> <span class="token string">"imgur"</span><span class="token punctuation">,</span>    // Default latex engine for Pandoc export and latex code chunk.    <span class="token property">"markdown-preview-enhanced.latexEngine"</span><span class="token operator">:</span> <span class="token string">"pdflatex"</span><span class="token punctuation">,</span>    // Re-render the preview as the contents of the source changes<span class="token punctuation">,</span> without requiring the source buffer to be saved. If disabled<span class="token punctuation">,</span> the preview is re-rendered only when the buffer is saved to disk.    <span class="token property">"markdown-preview-enhanced.liveUpdate"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Use customized Math expression block delimiters.    <span class="token property">"markdown-preview-enhanced.mathBlockDelimiters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">"$$"</span><span class="token punctuation">,</span> <span class="token string">"$$"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"\\["</span><span class="token punctuation">,</span> <span class="token string">"\\]"</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    // Use customized Math expression inline delimiters.    <span class="token property">"markdown-preview-enhanced.mathInlineDelimiters"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">[</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"$"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">[</span><span class="token string">"\\("</span><span class="token punctuation">,</span> <span class="token string">"\\)"</span><span class="token punctuation">]</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    // Choose the Math expression rendering method option for GFM markdown export (Save as Markdown<span class="token punctuation">)</span>.    <span class="token property">"markdown-preview-enhanced.mathRenderingOnlineService"</span><span class="token operator">:</span> <span class="token string">"https://latex.codecogs.com/gif.latex"</span><span class="token punctuation">,</span>    // Choose the Math expression rendering method here. You can also disable math rendering if you want by choosing 'None'.    <span class="token property">"markdown-preview-enhanced.mathRenderingOption"</span><span class="token operator">:</span> <span class="token string">"KaTeX"</span><span class="token punctuation">,</span>    // Mermaid theme<span class="token punctuation">,</span> you can choose one from <span class="token punctuation">[</span><span class="token string">"mermaid.css"</span><span class="token punctuation">,</span> <span class="token string">"mermaid.dark.css"</span><span class="token punctuation">,</span> <span class="token string">"mermaid.forest.css"</span><span class="token punctuation">]</span>    <span class="token property">"markdown-preview-enhanced.mermaidTheme"</span><span class="token operator">:</span> <span class="token string">"mermaid.css"</span><span class="token punctuation">,</span>    // Comma separated pandoc arguments e.g. `--smart<span class="token punctuation">,</span> --filter=/bin/exe`. Please use long argument names.    <span class="token property">"markdown-preview-enhanced.pandocArguments"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // The pandoc markdown flavor you want    <span class="token property">"markdown-preview-enhanced.pandocMarkdownFlavor"</span><span class="token operator">:</span> <span class="token string">"markdown-raw_tex+tex_math_single_backslash"</span><span class="token punctuation">,</span>    // Pandoc executable path    <span class="token property">"markdown-preview-enhanced.pandocPath"</span><span class="token operator">:</span> <span class="token string">"pandoc"</span><span class="token punctuation">,</span>    // PhantomJS executable path    <span class="token property">"markdown-preview-enhanced.phantomPath"</span><span class="token operator">:</span> <span class="token string">"phantomjs"</span><span class="token punctuation">,</span>    // Preview Theme    <span class="token property">"markdown-preview-enhanced.previewTheme"</span><span class="token operator">:</span> <span class="token string">"github-light.css"</span><span class="token punctuation">,</span>    // Whether to print background for file export or not. If set to `<span class="token boolean">false</span>`<span class="token punctuation">,</span> then `github-light` preview theme will be used. You can also set `print_background` in front-matter for individual files.    <span class="token property">"markdown-preview-enhanced.printBackground"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Accepted protocols for links.    <span class="token property">"markdown-preview-enhanced.protocolsWhiteList"</span><span class="token operator">:</span> <span class="token string">"http://, https://, atom://, file://, mailto:, tel:"</span><span class="token punctuation">,</span>    // RevealJS Presentation Theme    <span class="token property">"markdown-preview-enhanced.revealjsTheme"</span><span class="token operator">:</span> <span class="token string">"white.css"</span><span class="token punctuation">,</span>    // Automatic scroll sync. This is now partially supported.    <span class="token property">"markdown-preview-enhanced.scrollSync"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Qiniu SecretKey    <span class="token property">"markdown-preview-enhanced.SecretKey"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // Open Only One Preview.    <span class="token property">"markdown-preview-enhanced.singlePreview"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Enable this option will render markdown by pandoc instead of markdown-it.    <span class="token property">"markdown-preview-enhanced.usePandocParser"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // By default<span class="token punctuation">,</span> the extension for wikilink is `.md`. For example<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token punctuation">]</span> will direct to file path `test.md`.    <span class="token property">"markdown-preview-enhanced.wikiLinkFileExtension"</span><span class="token operator">:</span> <span class="token string">".md"</span><span class="token punctuation">,</span>    // 在创建时询问 gist 的名称. 能够帮助你识别多个 gist.    <span class="token property">"sync.askGistName"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 设置为 <span class="token boolean">true</span> 在编辑器打开时自动下载远程配置. <span class="token punctuation">[</span>需要重启<span class="token punctuation">]</span>    <span class="token property">"sync.autoDownload"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 设置为 <span class="token boolean">true</span> 在编辑器打开时自动上传本地配置. <span class="token punctuation">[</span>需要重启<span class="token punctuation">]</span>    <span class="token property">"sync.autoUpload"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 设置为 <span class="token boolean">true</span> 将会下载远程配置<span class="token punctuation">,</span> 即便本地已有更新的配置.    <span class="token property">"sync.forceDownload"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 设置同步使用的 GitHub GIST ID    <span class="token property">"sync.gist"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // 如果设置为 <span class="token boolean">true</span><span class="token punctuation">,</span> 开启静默模式. 上传和下载的概要信息显示在状态栏而非输出面板    <span class="token property">"sync.quietSync"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 设置为 <span class="token boolean">false</span> 如果你不想在下载时移除扩展.    <span class="token property">"sync.removeExtensions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 设置为 <span class="token boolean">false</span> 如果你不想上传/下载扩展.    <span class="token property">"sync.syncExtensions"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Note<span class="token operator">:</span> If it is not <span class="token null">Null</span><span class="token punctuation">,</span> It will override CustomBrowser and ChromeDebuggingAttachment settings.    //    //  Examples <span class="token operator">:</span>    // chrome --incognito --headless --remote-debugging-port=<span class="token number">9222</span>    //  C<span class="token operator">:</span>\\Program Files\\Firefox Developer Edition\\firefox.exe --private-window    <span class="token property">"liveServer.settings.AdvanceCustomBrowserCmdLine"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // Enable Chrome Debugging Attachment to Live Server at Debuging Port <span class="token number">9222</span>.    //  NOTE<span class="token operator">:</span> You have to install 'Debugger for Chrome'    // If the value is <span class="token boolean">true</span><span class="token punctuation">,</span> Select 'Attach to Chrome' from Debug Window to start debugging.    //    //  CAUTION<span class="token operator">:</span> If it is <span class="token boolean">true</span><span class="token punctuation">,</span> 'Launch Chrome against localhost' may not work.    <span class="token property">"liveServer.settings.ChromeDebuggingAttachment"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Specify custom browser settings for Live Server.    // By Default it will open your default favorite browser.    <span class="token property">"liveServer.settings.CustomBrowser"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // To disable information pop up messages.    <span class="token property">"liveServer.settings.donotShowInfoMsg"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // To turn off prompt warning message if body or head or other supporting tag is missing in your HTML.    <span class="token property">"liveServer.settings.donotVerifyTags"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // When set<span class="token punctuation">,</span> serve this file (server root relative<span class="token punctuation">)</span> for every <span class="token number">404</span> (useful for single-page applications<span class="token punctuation">)</span>    <span class="token property">"liveServer.settings.file"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    // By Default Live Server inject CSS changes without full reloading of browser. You can change this behviour by making this setting as `<span class="token boolean">true</span>`    <span class="token property">"liveServer.settings.fullReload"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // To switch between localhost or <span class="token number">127.0</span>.<span class="token number">0.1</span> or anything else. Default is <span class="token number">127.0</span>.<span class="token number">0.1</span>    <span class="token property">"liveServer.settings.host"</span><span class="token operator">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    // Setup https configuration    <span class="token property">"liveServer.settings.https"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"cert"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"key"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token property">"passphrase"</span><span class="token operator">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // To ignore specific file changes    <span class="token property">"liveServer.settings.ignoreFiles"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">".vscode/**"</span><span class="token punctuation">,</span> <span class="token string">"**/*.scss"</span><span class="token punctuation">,</span> <span class="token string">"**/*.sass"</span><span class="token punctuation">,</span> <span class="token string">"**/*.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // Mount a directory to a route. Such as <span class="token punctuation">[</span><span class="token punctuation">[</span>'/components'<span class="token punctuation">,</span> './node_modules'<span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token property">"liveServer.settings.mount"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    // This the entry point of server when you're in multiroot workspace    <span class="token property">"liveServer.settings.multiRootWorkspaceName"</span><span class="token operator">:</span> <span class="token null">null</span><span class="token punctuation">,</span>    // If it is <span class="token boolean">true</span> live server will start without browser opened.    <span class="token property">"liveServer.settings.NoBrowser"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Set Custom Port Number of Live Server. Set <span class="token number">0</span> if you want random port.    <span class="token property">"liveServer.settings.port"</span><span class="token operator">:</span> <span class="token number">5500</span><span class="token punctuation">,</span>    // To Setup Proxy    <span class="token property">"liveServer.settings.proxy"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"enable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token property">"baseUri"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>        <span class="token property">"proxyUri"</span><span class="token operator">:</span> <span class="token string">"http://127.0.0.1:80"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Set Custom root of Live Server.    // To change root the the server to sub folder of workspace<span class="token punctuation">,</span> use '/' and relative path from workspace.    // Example<span class="token operator">:</span> /subfolder1/subfolder2    <span class="token property">"liveServer.settings.root"</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    // Change this to <span class="token boolean">false</span> if you don't want the button to show in the statusbar    <span class="token property">"liveServer.settings.showOnStatusbar"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Open in Browser Preview inside VS Code<span class="token punctuation">,</span> instead of default browser    <span class="token property">"liveServer.settings.useBrowserPreview"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Use local IP as host    <span class="token property">"liveServer.settings.useLocalIp"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // You have to install a browser extension. That will be works for your dynamic pages (like PHP<span class="token punctuation">)</span>.    <span class="token property">"liveServer.settings.useWebExt"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Delay before live reloading. Value in milliseconds. Default is <span class="token number">100</span>    <span class="token property">"liveServer.settings.wait"</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span>    // 选择一个图标包。    //  - angular<span class="token operator">:</span> Angular的图标。    //  - angular_ngrx<span class="token operator">:</span> Angular和ngrx的图标。    //  - react<span class="token operator">:</span> React的图标。    //  - react_redux<span class="token operator">:</span> React和Redux的图标。    //  - none<span class="token operator">:</span> 没有启用图标包。    <span class="token property">"material-icon-theme.activeIconPack"</span><span class="token operator">:</span> <span class="token string">"angular"</span><span class="token punctuation">,</span>    // 设置自定义文件图标关联。    <span class="token property">"material-icon-theme.files.associations"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 设置自定义文件夹图标关联。    <span class="token property">"material-icon-theme.folders.associations"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 更改文件夹图标的颜色。    <span class="token property">"material-icon-theme.folders.color"</span><span class="token operator">:</span> <span class="token string">"#90a4ae"</span><span class="token punctuation">,</span>    // 设置文件夹图标的类型。    //  - specific<span class="token operator">:</span> 选择特定文件夹图标。    //  - classic<span class="token operator">:</span> 选择经典文件夹图标。    //  - none<span class="token operator">:</span> 没有文件夹图标。    <span class="token property">"material-icon-theme.folders.theme"</span><span class="token operator">:</span> <span class="token string">"specific"</span><span class="token punctuation">,</span>    // 隐藏该文件夹旁边的箭头。    <span class="token property">"material-icon-theme.hidesExplorerArrows"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 定义自定义语言映射的图标。    <span class="token property">"material-icon-theme.languages.associations"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // 更改图标的透明度。    <span class="token property">"material-icon-theme.opacity"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    // Change the saturation of the icons.    <span class="token property">"material-icon-theme.saturation"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    // 显示重启消息。    <span class="token property">"material-icon-theme.showReloadMessage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 更新后显示升级信息。    <span class="token property">"material-icon-theme.showUpdateMessage"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 首次安装后显示欢迎信息。    <span class="token property">"material-icon-theme.showWelcomeMessage"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 当 Node.js 从集成终端以调试模式启动时自动附加 Node 调试器    //  - disabled<span class="token operator">:</span> 自动附加被禁用，且不在状态栏中显示。    //  - on<span class="token operator">:</span> 自动附加已启用。    //  - off<span class="token operator">:</span> 自动附加未启用。    <span class="token property">"debug.node.autoAttach"</span><span class="token operator">:</span> <span class="token string">"disabled"</span><span class="token punctuation">,</span>    // 控制是否自动检测 Gulp 任务。默认开启。    <span class="token property">"gulp.autoDetect"</span><span class="token operator">:</span> <span class="token string">"on"</span><span class="token punctuation">,</span>    // Sets an absolute path to the current workspace    <span class="token property">"path-intellisense.absolutePathToWorkspace"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // Automatically adds slash after directory    <span class="token property">"path-intellisense.autoSlashAfterDirectory"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Adds the file extension to a import statements    <span class="token property">"path-intellisense.extensionOnImport"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Mappings for paths    <span class="token property">"path-intellisense.mappings"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    // Show hidden files    <span class="token property">"path-intellisense.showHiddenFiles"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // Override the kind of an extension. `ui` extensions are installed and run on the local machine while `workspace` extensions are run on the remote. By overriding an extension's default kind using this setting<span class="token punctuation">,</span> you specify if that extension should be installed and enabled locally or remotely.    <span class="token property">"remote.extensionKind"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"pub.name"</span><span class="token operator">:</span> <span class="token string">"ui"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    // Controls whether 'Peek References' or 'Find References' is invoked when selecting code lens references    //  - peek<span class="token operator">:</span> Show references in peek editor.    //  - view<span class="token operator">:</span> Show references in separate view.    <span class="token property">"references.preferredLocation"</span><span class="token operator">:</span> <span class="token string">"peek"</span><span class="token punctuation">}</span></code></pre><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>  <code>Option + LeftClick</code> 快速多行选择（多处光标同时编辑）</li><li>  <code>Command + L +Command + 0</code> 一键收缩代码</li></ul><h1 id="配置格式化工具-prettier"><a href="#配置格式化工具-prettier" class="headerlink" title="配置格式化工具 prettier"></a>配置格式化工具 prettier</h1><p>在 setting.json 里添加<br>添加两行<br><code>&quot;prettier.requireConfig&quot;: true,</code><br><code>&quot;editor.formatOnSave&quot;: true</code><br>项目根目录下添加一个 Prettier 的配置文件： <code>.prettierrc.js</code></p><blockquote><p><a href="https://prettier.io/docs/en/options.html?url=bin.zmide.com">官方文档</a><br><a href="https://juejin.cn/post/6844903832485363720#heading-2">vscode 中 prettier 配置和 vetur 配置 prettier</a><br><a href="https://xuoutput.github.io/2019/02/20/prettier%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E7%BE%8E%E5%8C%96/">prettier 代码格式美化</a><br><a href="https://juejin.cn/post/6914549928131821576">VSCode 插件之 Prettier</a></p></blockquote><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    semi<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 行位是否使用分号，默认为true</span>    trailingComma<span class="token punctuation">:</span> <span class="token string">'es5'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 是否使用尾逗号，有三个可选值"&lt;none|es5|all>"</span>    singleQuote<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 字符串是否使用单引号，默认为false，使用双引号</span>    printWidth<span class="token punctuation">:</span> <span class="token number">160</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一行的字符数，如果超过会进行换行，默认为80</span>    tabWidth<span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一个tab代表几个空格数</span>    useTabs<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 启用tab缩进</span>    bracketSpacing<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 对象大括号直接是否有空格，默认为true，效果：{ foo: bar }</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 钩子顺序和数据异步请求</title>
      <link href="/2019/12/12/za-tan-vue-gou-zi-he-yi-bu-shu-ju/"/>
      <url>/2019/12/12/za-tan-vue-gou-zi-he-yi-bu-shu-ju/</url>
      
        <content type="html"><![CDATA[<p>vue 生命周期钩子函数，作者就没有设计成阻塞。但是为了实现上一个钩子的异步请求回调成功之前不允许下一个钩子的需求的话，就做不到了。</p><p>问题相关<a href="https://segmentfault.com/q/1010000013787292">segmentfault</a></p><p>所以目前有两种实现方式：</p><ol><li><p><code>vi-if</code>先禁止渲染，直到异步回来赋值之后才允许渲染</p></li><li><p>同方法 1，在入口 js 里，先异步请求，拿到数据后才允许<code>new Vue(&#123;render&#125;)</code></p></li><li><p><strong>放弃</strong> 用<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E8%B7%AF%E7%94%B1%E7%8B%AC%E4%BA%AB%E7%9A%84%E5%AE%88%E5%8D%AB">组件内路由守卫</a>的<code>next()</code>来控制，思路来源<a href="https://juejin.im/post/5bfa4bb951882558ae3c171e">掘金</a>。</p><p><em>补充：beforeRouteEnter 的函数体中是访问不到当前组件的上下文的，需要在回调参参数 next（这是个函数引用）中，使用 next 这个函数的回调参数<code>vm（next(vm =&gt; &#123;&#125;)）</code>中的<code>vm</code>才能访问到当前组件的上下文；beforeRouterEnter 的阻塞作用基本就废掉了</em></p><p><em>二次补充：或者在 next 之前把数据存在 localStorage 里，next 之后在 create 钩子里拿。</em>结论是绕远了，更不如直接用 v-if 控制。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2019/11/12/bi-ji-linux/"/>
      <url>/2019/11/12/bi-ji-linux/</url>
      
        <content type="html"><![CDATA[<p>sudo apt autoremove</p><p><a href="https://www.josephxia.com/document/server/Linux%E5%91%BD%E4%BB%A4.html">博客</a></p><h2 id="Cron-表达式"><a href="#Cron-表达式" class="headerlink" title="Cron 表达式"></a>Cron 表达式</h2><p><a href="https://blog.csdn.net/jbgtwang/article/details/7995801">csdc 链接</a><br>[简书 链接]<a href="https://www.jianshu.com/p/9ddb40797685">https://www.jianshu.com/p/9ddb40797685</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2019/11/07/bi-ji-git/"/>
      <url>/2019/11/07/bi-ji-git/</url>
      
        <content type="html"><![CDATA[<p><a href="https://git-scm.com/docs/">官方链接</a>，<br><a href="https://git-scm.com/book/zh">官方中文</a></p><h2 id="导图"><a href="#导图" class="headerlink" title="导图"></a>导图</h2><p><img src="https://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt="导图"></p><ul><li>Workspace：工作区</li><li>Index / Stage：暂存区</li><li>Repository：仓库区（或本地仓库）</li><li>Remote：远程仓库</li><li>HEAD：理解为 当前分支的最近一次 commit</li></ul><h2 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="init"><a href="#init" class="headerlink" title="init"></a><code>init</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在当前目录新建一个Git代码库</span>$ <span class="token function">git</span> init<span class="token comment" spellcheck="true"># 在当前目录新创建一个名为repo且只包含 .git 子文件夹的空目录，将其初始化为Git代码库</span>$ <span class="token function">git</span> init <span class="token punctuation">[</span>repo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 在服务器机器上创建裸仓库（因为服务器不需要对工作区直接操作，纯/裸仓库即普通仓库的.git文件夹）</span><span class="token function">mkdir</span> robbin_site.git + <span class="token function">cd</span> robbin_site.git + <span class="token function">git</span> --bare init</code></pre><h3 id="指定远程仓库"><a href="#指定远程仓库" class="headerlink" title="指定远程仓库"></a>指定远程仓库</h3><h4 id="remote"><a href="#remote" class="headerlink" title="remote"></a><code>remote</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看远程库的信息</span>$ <span class="token function">git</span> remote<span class="token comment" spellcheck="true">#查看所有远程库地址和名称</span>$ <span class="token function">git</span> remote –v<span class="token comment" spellcheck="true"># 查看某个远程服务器仓库状态</span>$ <span class="token function">git</span> remote show <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 增加一个新的远程仓库，并命名</span>$ <span class="token function">git</span> remote add <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> <span class="token punctuation">[</span>git@github:robbin/robbin_site.git<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 设置远程仓库地址(用于修改远程仓库地址)</span>$ <span class="token function">git</span> remote set-url <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> <span class="token punctuation">[</span>git@github.com:robbin/robbin_site.git<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 设置远程仓库的HEAD指向master分支</span>$ <span class="token function">git</span> remote set-head <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> <span class="token punctuation">[</span>master<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除远程仓库</span>$ <span class="token function">git</span> remote <span class="token function">rm</span> <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span></code></pre><h3 id="拉数据"><a href="#拉数据" class="headerlink" title="拉数据"></a>拉数据</h3><h4 id="clone"><a href="#clone" class="headerlink" title="clone"></a><code>clone</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 根据[url]从远程仓库中克隆下载一个项目和它的整个代码历史</span>$ <span class="token function">git</span> clone <span class="token punctuation">[</span>https://github.com/Hojondo/barerepo.git<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 用带版本的项目创建纯版裸仓库，不包括工作区直接就是版本库的内容</span>$ <span class="token function">git</span> clone --bare <span class="token punctuation">[</span>remote-bare-repo<span class="token punctuation">]</span> <span class="token punctuation">[</span>local-bare-repo.git<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将纯仓库上传到服务器上</span><span class="token function">scp</span> -r my_project.git git@git.csdn.net:~</code></pre><p>[注：]<a href="https://www.worldhello.net/gotgit/02-git-solo/100-git-clone.html">–bare &amp; –mirror的区别</a></p><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a><code>fetch</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 抓取下载远程仓库更新，加下一条指令等同于git pull</span><span class="token comment" spellcheck="true"># 与git pull相比git fetch相当于是从远程获取最新版本到本地，但不会自动merge</span>$ <span class="token function">git</span> fetch <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span>/master    <span class="token comment" spellcheck="true"># 将远程主分支合并到本地当前分支</span></code></pre><h4 id="pull"><a href="#pull" class="headerlink" title="pull"></a><code>pull</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 抓取远程仓库所有分支更新并合并到本地</span>$ <span class="token function">git</span> pull<span class="token comment" spellcheck="true"># 取回远程仓库的某分支变化，并与当前本地分支合并</span>$ <span class="token function">git</span> pull <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span>$ <span class="token function">git</span> pull --no-ff</code></pre><h3 id="推数据"><a href="#推数据" class="headerlink" title="推数据"></a>推数据</h3><h4 id="push"><a href="#push" class="headerlink" title="push"></a><code>push</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># push所有分支（所有已经设置好upstream的本地分支）</span>$ <span class="token function">git</span> push<span class="token comment" spellcheck="true"># 客户端首次提交(没有master时)需要加-u</span>$ <span class="token function">git</span> push –u <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> master<span class="token comment" spellcheck="true"># 将本地某分支推到远程分支 / 创建远程分支（远程没有对应分支时）</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span>:<span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> branchName <span class="token comment" spellcheck="true"># 当本地远程分支名字相同时</span><span class="token comment" spellcheck="true"># 强行推送当前分支到远程仓库，即使有冲突</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> --force<span class="token comment" spellcheck="true"># 推送所有分支到远程仓库</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> --all<span class="token comment" spellcheck="true"># 先删除本地分支，然后再push删除远程分支</span>$ <span class="token function">git</span> branch -d <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> :<span class="token punctuation">[</span>remote_branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除远程tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交指定tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交所有tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> --tags</code></pre><h4 id="submodule"><a href="#submodule" class="headerlink" title="submodule"></a><code>submodule</code></h4><h2 id="配置-gitconfig"><a href="#配置-gitconfig" class="headerlink" title="配置 gitconfig"></a>配置 gitconfig</h2><p>用户的配置文件<code>~/.gitconfig</code></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示当前的Git配置,列举所有配置</span>$ <span class="token function">git</span> config --list<span class="token comment" spellcheck="true"># 编辑Git配置文件</span>$ <span class="token function">git</span> config -e <span class="token punctuation">[</span>--global<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 设置提交代码时的用户信息</span><span class="token function">git</span> config --global user.name <span class="token string">"xxx"</span><span class="token function">git</span> config --global user.email <span class="token string">"xxxxxx@gmail.com"</span><span class="token comment" spellcheck="true"># git status等命令自动着色</span><span class="token function">git</span> config --global color.ui <span class="token boolean">true</span><span class="token function">git</span> config --global color.status auto<span class="token function">git</span> config --global color.diff auto<span class="token function">git</span> config --global color.branch auto<span class="token function">git</span> config --global color.interactive auto<span class="token comment" spellcheck="true"># 配置别名，co 配为checkout 别名，等等etc...</span><span class="token function">git</span> config --global alias.co checkout<span class="token function">git</span> config --global alias.ci commit<span class="token function">git</span> config --global alias.st status<span class="token function">git</span> config --global alias.br branch<span class="token comment" spellcheck="true"># 设置Editor使用textmate</span><span class="token function">git</span> config --global core.editor <span class="token string">"mate -w"</span><span class="token comment" spellcheck="true"># remove  proxy configuration on git</span><span class="token function">git</span> config --global --unset https.proxy</code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="分支和合并"><a href="#分支和合并" class="headerlink" title="分支和合并"></a>分支和合并</h3><h4 id="branch"><a href="#branch" class="headerlink" title="branch"></a><code>branch</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有本地分支</span>$ <span class="token function">git</span> branch<span class="token comment" spellcheck="true"># 列出所有远程分支</span>$ <span class="token function">git</span> branch -r<span class="token comment" spellcheck="true"># 列出所有本地分支和远程分支</span>$ <span class="token function">git</span> branch -a<span class="token comment" spellcheck="true"># 查看各个分支最后提交信息</span>$ <span class="token function">git</span> branch -v<span class="token comment" spellcheck="true"># 移动/重命名分支及其对应的日志</span>$ <span class="token function">git</span> branch -m oldName newName<span class="token comment" spellcheck="true"># 查看已经被合并到当前分支的分支</span>$ <span class="token function">git</span> branch --merged<span class="token comment" spellcheck="true"># 查看尚未被合并到当前分支的分支</span>$ <span class="token function">git</span> branch --no-merged<span class="token comment" spellcheck="true"># 建立追踪关系，在现已有本地分支与指定的远程分支之间</span>$ <span class="token function">git</span> branch --set-upstream-to <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 建立追踪关系，在当前激活本地分支与指定的远程分支之间</span>$ <span class="token function">git</span> branch --set-upstream-to <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，但依然停留在当前分支</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，指向指定commit</span>$ <span class="token function">git</span> branch <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit-id<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，与指定的远程分支建立追踪关系</span>$ <span class="token function">git</span> branch --track <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除本地分支</span>$ <span class="token function">git</span> branch -d <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 强制删除分支 (未被合并的分支被删除时 需要强制)</span>$ <span class="token function">git</span> branch -D <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除远程分支</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> --delete <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> :<span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>$ <span class="token function">git</span> branch -dr <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span></code></pre><h4 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a><code>checkout</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 新建一个分支，并切换到该分支(-b等同于branch命令)</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切换到指定分支，并更新工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 切换到上一个分支</span>$ <span class="token function">git</span> checkout -<span class="token comment" spellcheck="true"># 基于branch创建新的new_branch</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>new_branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 跟踪某个远程分支创建相应的本地分支</span>$ <span class="token function">git</span> checkout --track <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span>/<span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 基于远程分支创建本地分支，功能同上</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>local_branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span>/<span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span>$ <span class="token function">git</span> checkout  <span class="token punctuation">[</span>commit-id<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 把某次历史提交记录checkout出来，创建成一个分支</span>$ <span class="token function">git</span> checkout  <span class="token punctuation">[</span>commit-id<span class="token punctuation">]</span> -b <span class="token punctuation">[</span>new_branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 依据需要合并的最后一条 commit 创建新分支</span>$ <span class="token function">git</span> checkout -b newbranch <span class="token punctuation">[</span>last_commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个分支，指向某个tag</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 撤销工作区修改，恢复暂存区的所有文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 撤销xx文件修改，在工作区的修改全部撤销到暂存区状态</span>$ <span class="token function">git</span> checkout -- xx<span class="token comment" spellcheck="true"># 恢复暂存区的指定文件到工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 撤销指定文件到指定版本，恢复某个commit的指定文件到暂存区和工作区</span>$ <span class="token function">git</span> checkout <span class="token punctuation">[</span>commit-id<span class="token punctuation">]</span> <span class="token punctuation">[</span>/path/to/file<span class="token punctuation">]</span></code></pre><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a><code>merge</code></h4><p><a href="https://www.jianshu.com/p/58a166f24c81">git merge 详解</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 合并指定分支到当前分支</span>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将远程主分支合并到本地当前分支</span>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>remote-branch<span class="token punctuation">]</span>/<span class="token punctuation">[</span>local-branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 不要Fast-Foward合并，这样可以生成merge提交</span>$ <span class="token function">git</span> merge <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> --no-ff<span class="token comment" spellcheck="true"># 选择一个其它分支的某一次提交commit，合并进当前分支(合并其它分支一系列提交，后缀为 first_commit ~ last_commit)</span>$ <span class="token function">git</span> cherry-pick <span class="token punctuation">[</span>commit-id<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 将master rebase到branch，等同于：</span><span class="token comment" spellcheck="true"># git checkout   [branch] + git rebase master + git checkout  master + git merge [branch]</span>$ <span class="token function">git</span> rebase <span class="token punctuation">[</span>master<span class="token punctuation">]</span> <span class="token punctuation">[</span>branch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 从新分支中需要合并的第一条 commit 开始合并</span>$ <span class="token function">git</span> rebase --onto master <span class="token punctuation">[</span>first_commit<span class="token punctuation">]</span>^</code></pre><h4 id="stash"><a href="#stash" class="headerlink" title="stash"></a><code>stash</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#暂存当前分支的工作区，恢复现场后可继续工作</span>$ <span class="token function">git</span> stash<span class="token comment" spellcheck="true">#查看暂存文件队列列表</span>$ <span class="token function">git</span> stash list<span class="token comment" spellcheck="true">#恢复暂存内容，暂存区不删除</span>$ <span class="token function">git</span> stash apply <span class="token punctuation">[</span>stash@<span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#删除暂存文件</span>$ <span class="token function">git</span> stash drop <span class="token punctuation">[</span>stash@<span class="token punctuation">{</span>0<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#恢复并删除文件</span>$ <span class="token function">git</span> stash pop <span class="token punctuation">[</span>stash@<span class="token punctuation">{</span>2<span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="tag"><a href="#tag" class="headerlink" title="tag"></a><code>tag</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 列出所有tag</span>$ <span class="token function">git</span> tag<span class="token comment" spellcheck="true"># 新建一个tag在当前commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 新建一个tag在指定commit</span>$ <span class="token function">git</span> tag <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit-id<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除本地tag</span>$ <span class="token function">git</span> tag -d <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 删除远程tag</span>$ <span class="token function">git</span> push origin :refs/tags/<span class="token punctuation">[</span>tagName<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看tag信息</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交指定tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 提交所有tag</span>$ <span class="token function">git</span> push <span class="token punctuation">[</span>remote-repo<span class="token punctuation">]</span> --tags<span class="token comment" spellcheck="true"># 新建一个分支，指向某个tag</span>$ <span class="token function">git</span> checkout -b <span class="token punctuation">[</span>branch<span class="token punctuation">]</span> <span class="token punctuation">[</span>tag<span class="token punctuation">]</span></code></pre><h3 id="基本快照操作"><a href="#基本快照操作" class="headerlink" title="基本快照操作"></a>基本快照操作</h3><h4 id="add"><a href="#add" class="headerlink" title="add"></a><code>add</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 添加指定文件到暂存区</span>$ <span class="token function">git</span> add <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 添加指定目录到暂存区，包括子目录</span>$ <span class="token function">git</span> add <span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 添加当前目录的所有文件到暂存区</span>$ <span class="token function">git</span> add <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 添加每个变化前，都会要求确认</span><span class="token comment" spellcheck="true"># 对于同一个文件的多处变化，可以实现分次提交</span>$ <span class="token function">git</span> add -p</code></pre><h4 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 删除工作区文件，并且将这次删除放入暂存区</span>$ <span class="token function">git</span> <span class="token function">rm</span> <span class="token punctuation">[</span>file1<span class="token punctuation">]</span> <span class="token punctuation">[</span>file2<span class="token punctuation">]</span> <span class="token punctuation">..</span>.<span class="token comment" spellcheck="true"># 停止追踪指定文件，但该文件会保留在工作区，即 从远程版本库中删除文件，但不删除本地文件</span>$ <span class="token function">git</span> <span class="token function">rm</span> --cached <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 改名文件，并且将这个改名放入暂存区</span>$ <span class="token function">git</span> <span class="token function">mv</span> <span class="token punctuation">[</span>file-original<span class="token punctuation">]</span> <span class="token punctuation">[</span>file-renamed<span class="token punctuation">]</span></code></pre><h4 id="commit"><a href="#commit" class="headerlink" title="commit"></a><code>commit</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#提交单个文件</span>$ <span class="token function">git</span> commit  <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true">#提交暂存区的文件到仓库区</span>$ <span class="token function">git</span> commit –m “description”<span class="token comment" spellcheck="true"># 提交工作区自上次commit之后的变化，直接到仓库区，等同执行git add、 git rm及git commit</span>$ <span class="token function">git</span> commit -a$ <span class="token function">git</span> commit -am <span class="token string">"some comments"</span><span class="token comment" spellcheck="true"># 撤销最后一次提交记录，重新提交；如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>$ <span class="token function">git</span> commit --amend</code></pre><h4 id="reset"><a href="#reset" class="headerlink" title="reset"></a><code>reset</code></h4><p>重置 HEAD(当前分支的版本顶端）到另外一个 commit。<br><a href="https://www.jianshu.com/p/0e1fe709dd97">reset 和 revert 的区别详解</a><br>其实就是<code>--soft</code> 、<code>--mixed</code> 以及<code>--hard</code> 是三个恢复等级。</p><ol><li>使用<code>--soft</code> 就仅仅将 HEAD 指针恢复，已经 add 的缓存以及工作空间的所有东西都不变。</li><li>如果使用<code>--mixed</code>(默认)，就将 HEAD 恢复掉，已经 add 的缓存也会丢失掉，工作空间的代码什么的是不变的。</li><li>如果使用<code>--hard</code>，那么一切就全都恢复了，HEAD 变，aad 的缓存消失，代码什么的也恢复到以前状态。</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从暂存区恢复某一文件，重置HEAD到另外一个commit,并且重置index以便和HEAD相匹配，working copy不会被更改</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span>$ <span class="token function">git</span> reset <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 从暂存区恢复所有文件</span>$ <span class="token function">git</span> reset -- <span class="token keyword">.</span><span class="token comment" spellcheck="true"># 重置当前分支的HEAD为上一次commit，重置暂存区与工作区</span>$ <span class="token function">git</span> reset --hard 或 $ <span class="token function">git</span> reset  –hard HEAD^/HEAD~<span class="token comment" spellcheck="true"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span>$ <span class="token function">git</span> reset --hard <span class="token punctuation">[</span>commit<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变,即 取消最后一次commit</span>$ <span class="token function">git</span> reset --keep <span class="token punctuation">[</span>commit<span class="token punctuation">]</span></code></pre><h4 id="status"><a href="#status" class="headerlink" title="status"></a><code>status</code></h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> status        <span class="token comment" spellcheck="true">#查看仓库状态，显示有变更的文件</span></code></pre><h3 id="审核-amp-比较"><a href="#审核-amp-比较" class="headerlink" title="审核&amp;比较"></a>审核&amp;比较</h3><h4 id="show"><a href="#show" class="headerlink" title="show"></a><code>show</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示某次提交的元数据和内容变化</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit-id<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示某次提交发生变化的文件名</span>$ <span class="token function">git</span> show --name-only <span class="token punctuation">[</span>commit-id<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示某次提交时，某个文件的内容</span>$ <span class="token function">git</span> show <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>:<span class="token punctuation">[</span>filename<span class="token punctuation">]</span></code></pre><h4 id="log"><a href="#log" class="headerlink" title="log"></a><code>log</code></h4><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2">官方中文文档</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看（文件）提交历史记录</span>$ <span class="token function">git</span> log   <span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 查看每次详细修改内容的diff</span>$ <span class="token function">git</span> log -p <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 查看最近两次详细修改内容的diff</span>$ <span class="token function">git</span> log -p -2<span class="token comment" spellcheck="true"># 查看提交统计信息,显示简要的增改行数统计</span>$ <span class="token function">git</span> log --stat<span class="token comment" spellcheck="true"># 同上，用'log'格式输出</span>$ <span class="token function">git</span> log -g<span class="token comment" spellcheck="true"># 搜索包含name的log</span>$ <span class="token function">git</span> log -- <span class="token function">grep</span> <span class="token string">"name"</span><span class="token comment" spellcheck="true"># 查看指定ID记录，-L [?startLine],[?endLine]:fileName显示一行</span>$ <span class="token function">git</span> log record-ID  -L 2,3:file2.txt<span class="token comment" spellcheck="true"># 搜索提交历史，根据关键词</span>$ <span class="token function">git</span> log -S <span class="token punctuation">[</span>keyword-string<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 显示某个commit之后的所有变动，按 每个commit占据一行 的格式</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD --pretty<span class="token operator">=</span>format:%s<span class="token comment" spellcheck="true"># 显示过去5次提交</span>$ <span class="token function">git</span> log -5 --pretty --oneline 或 $ <span class="token function">git</span> log -5 --pretty<span class="token operator">=</span>oneline<span class="token comment" spellcheck="true"># 显示某个commit之后的所有变动，筛选"提交说明"中符合关键字搜索条件的历史记录</span>$ <span class="token function">git</span> log <span class="token punctuation">[</span>tag<span class="token punctuation">]</span> HEAD --grep feature<span class="token comment" spellcheck="true"># 显示某个文件的版本历史，包括文件改名前的历史</span>$ <span class="token function">git</span> log --follow <span class="token punctuation">[</span>file<span class="token punctuation">]</span>$ <span class="token function">git</span> whatchanged <span class="token punctuation">[</span>file<span class="token punctuation">]</span></code></pre><h4 id="shortlog"><a href="#shortlog" class="headerlink" title="shortlog"></a><code>shortlog</code></h4><p>汇总 git log 的输出</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示所有提交过的用户，-n:按提交次数排序,-s:省略commit注释</span>$ <span class="token function">git</span> shortlog -sn</code></pre><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a><code>diff</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 比较当前文件和暂存区文件差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>file<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 比较所有文件,显示暂存区和工作区的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span><span class="token comment" spellcheck="true"># 比较本地和远端仓库</span>$ <span class="token function">git</span> <span class="token function">diff</span> master<span class="token punctuation">..</span>Andylee-Github/master<span class="token comment" spellcheck="true"># 比较两次提交之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>commit-id1<span class="token punctuation">]</span> <span class="token punctuation">[</span>commit-id2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 比较分支</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token punctuation">[</span>branch1<span class="token punctuation">]</span><span class="token punctuation">..</span><span class="token punctuation">[</span>branch2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 比较暂存区和版本库差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> --staged<span class="token comment" spellcheck="true"># 比较暂存区和版本库即上一个commit的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> --cached<span class="token comment" spellcheck="true"># 仅仅比较统计信息</span>$ <span class="token function">git</span> <span class="token function">diff</span> --stat<span class="token comment" spellcheck="true"># 显示工作区与当前分支最新commit之间的差异</span>$ <span class="token function">git</span> <span class="token function">diff</span> HEAD<span class="token comment" spellcheck="true"># 显示今天你做了哪些改动</span>$ <span class="token function">git</span> <span class="token function">diff</span> --shortstat <span class="token string">"@{0 day ago}"</span></code></pre><h3 id="补丁-Patch"><a href="#补丁-Patch" class="headerlink" title="补丁 Patch"></a>补丁 Patch</h3><h4 id="diff-1"><a href="#diff-1" class="headerlink" title="diff"></a><code>diff</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 生成补丁</span>$ <span class="token function">git</span> <span class="token function">diff</span> <span class="token operator">></span> <span class="token punctuation">..</span>/sync.patch</code></pre><h4 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick"></a><code>cherry-pick</code></h4><pre class=" language-bash"><code class="language-bash"></code></pre><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a><code>apply</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 打补丁</span>$ <span class="token function">git</span> apply <span class="token punctuation">..</span>/sync.patch<span class="token comment" spellcheck="true"># 测试补丁能否成功</span>$ <span class="token function">git</span> apply --check <span class="token punctuation">..</span>/sync.patch</code></pre><h4 id="revert"><a href="#revert" class="headerlink" title="revert"></a><code>revert</code></h4><p><a href="https://www.jianshu.com/p/0e1fe709dd97">reset 和 revert 的区别详解</a><br>git revert 是用一次新的 commit 来回滚之前的 commit，git reset 是直接删除指定的 commit；<br>git reset 是把 HEAD 向后移动了一下，而 git revert 是 HEAD 继续前进，只是新的 commit 的内容和要 revert 的内容正好相反，能够抵消要被 revert 的内容。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> revert <span class="token punctuation">[</span><span class="token variable">$id</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 恢复某次提交的状态，恢复动作本身也创建了一次提交对象</span><span class="token function">git</span> revert HEAD     <span class="token comment" spellcheck="true"># 恢复最后一次提交的状态</span><span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 撤销提交</span><span class="token function">git</span> revert --continue <span class="token comment" spellcheck="true"># 处理完后，重新提交</span><span class="token comment" spellcheck="true"># 新建一个commit，用来撤销指定commit</span><span class="token comment" spellcheck="true"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span>$ <span class="token function">git</span> revert <span class="token punctuation">[</span>commit<span class="token punctuation">]</span></code></pre><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a><code>rebase</code></h4><p><a href="https://www.jianshu.com/p/129e721adc6e">merge 和 rebase 的区别</a>，<a href="https://jartto.wang/2018/12/11/git-rebase/">rebase 的详解</a><br>rebase 用于合并多次提交记录</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 合并最近的4次提交记录</span>$ <span class="token function">git</span> rebase -i HEAD~4</code></pre><h3 id="调试-Debug"><a href="#调试-Debug" class="headerlink" title="调试 Debug"></a>调试 Debug</h3><h4 id="blame"><a href="#blame" class="headerlink" title="blame"></a><code>blame</code></h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 显示指定文件是什么人在什么时间修改过</span>$ <span class="token function">git</span> blame <span class="token punctuation">[</span>file<span class="token punctuation">]</span></code></pre><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a><code>grep</code></h4><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><h4 id="archive"><a href="#archive" class="headerlink" title="archive"></a><code>archive</code></h4><h4 id="bundle"><a href="#bundle" class="headerlink" title="bundle"></a><code>bundle</code></h4><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a><code>clean</code></h4><p>…</p><blockquote><p><a href="https://stackoverflow.com/questions/39400848/in-github-urls-what-is-the-difference-between-a-tree-and-a-blob">what is the difference between a tree and a blob?</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 版本库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webpack</title>
      <link href="/2019/09/20/bi-ji-webpack/"/>
      <url>/2019/09/20/bi-ji-webpack/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h1><p>是基于 Node.js 开发的前端项目构建工具</p><ul><li><p>常见的静态资源</p><p>.js .jsx .coffee .ts(typescript)</p><p>.css .less .scss</p><p>.jpg .png .gif .bmp .svg</p><p>.svg .ttf .eot .woff .woff2</p><p>模版文件 .wja .jade .vue</p></li><li><p>网页中引入的静态资源多了后的问题</p><p>网页加载速度慢，发起很多二次请求；</p><p>要处理各个包之间的依赖关系，比如 bootstrap 是依赖 jquery 的</p></li><li><p>如何解决上述问题</p><p>合并压缩 js css 文件、</p><p>对于图片来说 精灵图、base64、</p><p>使用 requireJS、webpack 解决各个包直接的依赖关系</p></li></ul><h2 id="webpack-和-gulp-区别"><a href="#webpack-和-gulp-区别" class="headerlink" title="webpack 和 gulp 区别"></a>webpack 和 gulp 区别</h2><p>Gulp 基于各个小 task 任务，webpack 基于整个项目进行构建</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>全局安装<code>npm i webpack -g</code></p><p><em>不推荐全局安装 webpack，这会导致命令行运行 webpack 的时候锁定版本</em></p><p>示例安装 jq：<code>npm i jquery -S</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> $ <span class="token keyword">from</span> <span class="token string">"jquery"</span><span class="token punctuation">;</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"li:odd"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"backgroundColor"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>执行全局安装的话，可在 terminal 写命令行 <code>webpack ./src/入口文件.js ./dist/bundle.js</code></p></li><li><p>局部安装</p><p><code>npm install webpack webpack-cli -D</code></p><p><em>webpack 和 webpack-cli 曾经是在一起的，在 4.x 版本中进行了拆分，所以必须同时安装这两个</em></p></li></ul><h2 id="配置文件结构module-exports"><a href="#配置文件结构module-exports" class="headerlink" title="配置文件结构module.exports"></a>配置文件结构<code>module.exports</code></h2><p>在最新的 <a href="https://webpack.js.org/configuration/">官方文档</a> 中，webpack4 有两个新的配置项，<code>mode</code> 和 <code>optimization</code></p><p><a href="https://juejin.im/post/5b53f977518825620f57dd4c">教程来源</a></p><h3 id="mode"><a href="#mode" class="headerlink" title="mode"></a><code>mode</code></h3><p>默认值 production。</p><p>4.x 特点是约定大于配置，mode 为对应值的时候，其他字段会有对应的默认设置。</p><ul><li><p>mode: production 或 development 时，optimization 都会开启的优化</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"production"</span> || <span class="token string">"development"</span><span class="token punctuation">,</span>  <span class="token property">"optimization"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"removeAvailableModules"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"removeEmptyChunks"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"mergeDuplicateChunks"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"nodeEnv"</span><span class="token operator">:</span> <span class="token string">"production"</span> || <span class="token string">"development"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>mode: production</code>时，<code>optimization</code>开启的优化</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  <span class="token string">"mode"</span><span class="token punctuation">:</span> <span class="token string">"production"</span><span class="token punctuation">,</span>  <span class="token string">"devtool"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">"cache"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">"output"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"pathinfo"</span><span class="token punctuation">:</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"optimization"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"flagIncludedChunks"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"occurrenceOrder"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"usedExports"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"sideEffects"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"concatenateModules"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"minimize"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"removeAvailableModules"</span><span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 会降低webpack性能，下个大版本中会默认false</span>    <span class="token string">"mangleExports"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"innerGraph"</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"performance"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"hints"</span><span class="token punctuation">:</span> <span class="token string">"error"</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p><code>mode: development</code>时，<code>optimization</code>开启的优化</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"mode"</span><span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  <span class="token property">"devtool"</span><span class="token operator">:</span> <span class="token string">"eval"</span><span class="token punctuation">,</span>  <span class="token property">"cache"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"module"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"unsafeCache"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"output"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"pathinfo"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"optimization"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"providedExports"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"splitChunks"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"runtimeChunk"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"noEmitOnErrors"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"namedModules"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"namedChunks"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><h3 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a><code>optimization</code></h3><p><em>从 webpack 4 开始，会根据你选择的 <a href="https://webpack.docschina.org/concepts/mode/"><code>mode</code></a> 来执行不同的优化，不过所有的<a href="https://webpack.docschina.org/configuration/optimization/">优化</a>还是可以手动配置和重写。</em></p><ul><li><code>minimize</code> ：告诉 <strong>webpack</strong> 使用 <strong>TerserPlugin</strong> 最小化打包文件，对打包文件进行 <strong>压缩</strong>、<strong>混淆</strong>。 <strong>production 模式</strong> 下， 默认为 <strong>true</strong></li><li><code>minimizer</code> ：允许你通过提供一个或多个定制过的 <a href="https://webpack.docschina.org/plugins/terser-webpack-plugin/">TerserPlugin</a> 实例，覆盖默认压缩工具(minimizer)。</li><li><code>splitChunks</code> ：找到 chunk 中共享的模块,取出来生成单独的 chunk。对于动态导入模块，默认使用 webpack v4+ 提供的全新的通用分块策略</li><li><code>runtimeChunk</code> ：会为每个仅含有 runtime 的入口起点添加一个额外 chunk</li><li><code>noEmitOnErrors</code> ：在编译出错时，使用来跳过生成阶段，可以确保没有生成出错误资源不写入到输出</li><li><code>namedModules</code> ：告知 webpack 使用可读取模块标识符来帮助更好地调试</li><li><code>namedChunks</code> ：告知 webpack 使用可读取 chunk 标识符来帮助更好地调试</li><li><code>moduleIds</code> ： 给模块有意义的名称代替 ids</li><li><code>chunkIds</code> ：给 chunk 有意义的名称代替 ids</li><li><code>nodeEnv</code> ：告知 webpack 将 process.env.NODE_ENV 设置为一个给定字符串</li><li><code>mangleWasmImports</code> ：在设置为 true 时，告知 webpack 通过将导入修改为更短的字符串，来减少 WASM 大小。这会破坏模块和导出名称。</li><li><code>removeAvailableModules</code> ：如果模块已经包含在所有父级模块中，告知 webpack 从 chunk 中检测出这些模块，或移除这些模块</li><li><code>removeEmptyChunks</code> ：如果 chunk 为空，告知 webpack 检测或移除这些 chunk</li><li><code>mergeDuplicateChunks</code> ：告知 webpack 合并含有相同模块的 chunk</li><li><code>flagIncludedChunks</code> ：告知 webpack 确定和标记出作为其他 chunk 子集的那些 chunk，其方式是在已经加载过较大的 chunk 之后，就不再去加载这些 chunk 子集</li><li><code>occurrenceOrder</code> ：排序最终打包结果中各个模块</li><li><code>providedExports</code> ：在可能的情况下确定每个模块的导出,被用于其他优化或代码生成，<code>export * from ...</code>时指定是否更高效的生成 export 代码</li><li><code>usedExports</code> ：依赖字段 providedExports，告知 webpack 是否对每个模块都查找引用的 exports</li><li><code>concatenateModules</code> ：依赖字段 providedExports 和字段 usedExports，是否查找模块图表中可以安全连接到单个模块中的片段</li><li><code>sideEffects</code> ：是否 识别模块的 package.json 中 sideEffects 字段 或 rules 来跳过该模块，用于移除 JavaScript 上下文 中的 未引用代码(dead-code) - tree shaking</li><li><code>portableRecords</code> ：告诉 webpack 生成 具有相对路径的记录，以便能够 移动上下文文件夹</li><li><code>mangleExports</code> ：控制 export 压缩</li><li><code>innerGraph</code> ：是否处理未使用的 exports 的内部模块图</li></ul><h3 id="devtool"><a href="#devtool" class="headerlink" title="devtool"></a><code>devtool</code></h3><p>该配置项用以控制是 <strong>否生成 source map</strong> 以及 <strong>怎样生成 source map</strong>，方便调试定位源码</p><p><code>eval</code>|<code>source-map</code>|<code>cheap</code>|<code>module</code>|<code>inline</code>|<code>hidden</code>|<code>nosources</code></p><h3 id="context"><a href="#context" class="headerlink" title="context"></a><code>context</code></h3><p><em>webpack 处理打包文件的时候的初始目录</em></p><p>基础目录，<strong>绝对路径</strong>，用于从配置中解析 <strong>入口起点(entry point)</strong> 和 <strong>loader</strong>。</p><p><code>context: path.resolve(__dirname, &#39;../&#39;)</code></p><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a><code>entry</code></h3><p><em>入口文件，webapck 4.x 默认的就是 src/index.js4.x 约定大于配置：其中 入口是<code>src-&gt;index.js</code>打包输出目录是<code>dist-&gt;main.js</code></em></p><blockquote><ol><li>如果 <strong>entry</strong> 配置项的值的类型为 <strong>string</strong>， 对应 <strong>单页面单入口应用</strong>。在编译过程中， 生成 <strong>一个模块依赖关系图</strong></li><li>如果 <strong>entry</strong> 配置项的值的类型为 <strong>[string]</strong>, 对应 <strong>单页面多入口应用</strong>。应用程序启动时，数组中的入口文件按序执行。在编译过程中，生成 <strong>一个模块依赖关系图</strong>。</li><li>如果 <strong>entry</strong> 配置项的值为 <strong>object</strong>， 对应 <strong>多页面(单入口/多入口)应用</strong>。在编译过程中，生成 <strong>多个模块依赖关系图</strong>。</li><li>如果 <strong>entry</strong> 配置项的值的类型为 <strong>function</strong>，则是 <strong>动态入口</strong></li></ol></blockquote><h3 id="output"><a href="#output" class="headerlink" title="output"></a><code>output</code></h3><ul><li><p><code>path</code> ：output 目录对应一个<strong>绝对路径</strong>，指定 打包文件 的 输出目录，即打包后 文件在硬盘中的存储位置。</p></li><li><p><code>filename</code> ：此选项决定了每个输出 bundle 的名称。这些 bundle 将写入到 <a href="https://webpack.docschina.org/configuration/output/#output-path"><code>output.path</code></a> 选项指定的目录下</p><blockquote><p>我们可以使用以下常用方式为每一个 <strong>打包文件</strong> 提供 <strong>唯一</strong> 的 <strong>文件名</strong>：</p><ul><li><strong>‘bundle.js’</strong> - 指定 <strong>入口文件(main.js)</strong> 所在的 <strong>chunk</strong> 的 <strong>文件名</strong>， <strong>仅适用于单页面应用</strong>；</li><li><strong>‘[name].js’</strong> - 使用 <strong>chunk</strong> 的 <strong>name</strong>；</li><li><strong>‘[name].[hash].js’</strong> - 使用 <strong>compilation</strong> 的 <strong>hash</strong>，<strong>所有 chunk 文件名中 hash 值一样</strong>；</li><li><strong>‘[name].[chunkhash].js’</strong> - 使用 <strong>chunk</strong> 内容的 <strong>hash</strong>，<strong>每个 chunk 文件名中的 hash 值都不一样</strong>；</li><li><strong>‘[name].[id].js’</strong> - 使用 <strong>chunk</strong> 的 <strong>id</strong>；</li><li><strong>[name].[contenthash].js</strong> - 使用提取内容的 <strong>hash</strong>？？</li></ul><p>我们也可以将 <strong>filename</strong> 指定一个 <strong>function</strong> 来返回输出的文件名， <strong>返回值</strong> 的格式和上面一样。</p><p>常见命名格式： <code>[name].[chunkhash].js</code></p></blockquote></li><li><p><code>publicPath</code> ：对于按需加载(on-demand-load)或加载外部资源(external resources)（如图片、文件等）来说，会为所有的资源指定一个基础路径。<strong>设置了 publicPath 后，会为所有资源引用添加此前缀</strong>，publicPath 并不会对 生成文件的路径 造成影响，主要是 对页面里面引入的资源的路径做对应的补全</p></li><li><p><code>chunkFilename</code> ：指定 输出的打包文件 的 文件名</p></li><li><p><code>pathinfo</code> ：告诉 webpack 在 chunk 中引入 所包含模块信息的相关注释，不应该用于生产环境</p></li><li><p><code>chunkLoadTimeout</code> ：chunk 请求超时的时间，单位为 毫秒，默认为 120000。</p></li><li><p><code>crossOriginLoading</code> ：告诉 webpack 是否启用 chunk 的 跨域加载， 默认值为 false。</p></li><li><p><code>jsonpScriptType</code> ：在 动态添加 script 元素 的方式来进行 懒加载时，指定 script 元素 的类型，即 设置 type 属性的值。</p></li><li><p><code>devtoolFallbackModuleFilenameTemplate</code> ：</p></li><li><p><code>devtoolModuleFilenameTemplate</code> ：</p></li><li><p><code>devtoolNamespace</code> ：</p></li><li><p><code>assetModuleFilename</code> ：</p></li><li><p><code>libraryExport</code> ：用于指定 具体的入口文件的返回值</p></li><li><p><code>library</code> ：常用于 开发类库， 需和 libraryTarget 属性 配合使用</p></li><li><p><code>libraryTarget</code> ：配置如何暴露 library</p></li><li><p><code>globalObject</code> ：和 library、libraryTarget 一起使用，指示将 入口文件的返回值 分配给哪个 全局对象，默认值为 window</p></li><li><p><code>auxiliaryComment</code> ：在和 output.library 和 output.libraryTarget 一起使用时，此选项允许用户向 导出容器(export wrapper) 中插入 注释</p></li><li><p><code>hashDigest</code> ：</p></li><li><p><code>hashDigestLength</code> ：</p></li><li><p><code>hashFunction</code> ：</p></li><li><p><code>hashSalt</code> ：</p></li><li><p><code>hotUpdateChunkFilename</code> ：</p></li><li><p><code>hotUpdateFunction</code> ：</p></li><li><p><code>hotUpdateMainFilename</code> ：</p></li><li><p><code>jsonpFunction</code> ：当 输出多个 chunk 时， webpack 会构建一个 全局方法， 用于 安装 chunk。jsonpFunction 可用于指定 安装 chunk 的 方法名。</p></li><li><p><code>sourceMapFilename</code> ：配置 source map 的命名方式。默认使用 ‘[file].map’。</p></li><li><p><code>sourcePrefix</code> ：</p></li><li><p><code>strictModuleExceptionHandling</code> ：如果一个模块在导入时抛出异常，告诉 webpack 从 模块实例缓存 中 删除 这个模块</p></li><li><p><code>umdNamedDefine</code> ：会对 UMD 的构建过程中的 AMD 模块进行命名。否则就使用 匿名 的 define</p></li><li><p><code>futureEmitAssets</code> ：告诉 webpack 在 输出文件到指定位置 时，使用 未来的版本， 它允许输出以后 释放内存</p></li><li><p><code>ecmaVersion</code> ：</p></li><li><p><code>compareBeforeEmit</code> ：</p></li><li><p><code>iife</code> ：</p></li><li><p><code>module</code> ：</p></li></ul><h3 id="module"><a href="#module" class="headerlink" title="module"></a><code>module</code></h3><p>用于处理项目中的 <strong>不同类型(.js、.css、.sass、.vue、.png …)</strong> 的模块规则</p><ul><li><p><code>noParse</code></p><p>在构建 <strong>依赖关系图</strong> 时，<strong>webpack</strong> 会读取 <strong>模块源文件</strong> 的内容，然后 <strong>将源文件内容解析成一颗 AST 树</strong>。 分析 <strong>AST 树</strong>，获取模块的 <strong>依赖</strong> 的 <strong>静态模块</strong>、<strong>懒加载模块</strong>、<strong>全局变量</strong>。如果 <strong>模块的 url(绝对路径)</strong> 匹配 <strong>noParse 配置项指定的表达式</strong>， 那么 <strong>模块对应的源文件的代码结构</strong> 不会被解析。 不解析大型的 library 可以 <strong>提高构建性能</strong></p></li><li><p><code>rules</code></p><pre class=" language-js"><code class="language-js">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"style-loader"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>            localIdentName<span class="token punctuation">:</span> <span class="token string">"[path][name]-[local]-[hash:5]"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a><code>plugins</code></h3><p>[]</p><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a><code>resolve</code></h3><p>设置 <strong>源文件</strong>、<strong>npm 包</strong> 如何被 <strong>解析</strong>。</p><blockquote><p>webpack 在 <strong>构建依赖关系图</strong> 时会通过 <strong>resolve</strong> 配置项 <strong>解析模块的 url</strong> 来获取 <strong>模块源文件的绝对地址</strong>。 通过 <strong>源文件的绝对地址</strong>，读取源文件的内容，然后使用 <strong>解析器(parser)</strong> <strong>解析源文件的代码结构</strong>,获取 <strong>依赖模块</strong>。</p><p>此外，<strong>webpack</strong> 使用 <strong>loader</strong> 处理 <strong>源文件</strong> 时，也会通过 <strong>resolve</strong> 配置项 <strong>解析 loader 包 的 入口文件 的绝对地址</strong>，然后使用 <strong>入口文件</strong> 提供的方法处理 <strong>源文件</strong> 内容。</p></blockquote><h3 id="resolveLoader"><a href="#resolveLoader" class="headerlink" title="resolveLoader"></a><code>resolveLoader</code></h3><p>用法和 resolve 配置项完全一致，区别在于 它仅用于解析 webpack 的 loader 包</p><h3 id="devServer"><a href="#devServer" class="headerlink" title="devServer"></a><code>devServer</code></h3><p><em>使用了 webpack-dev-server 之后就需要有的配置，在这里可以配置详细的开发环境</em></p><ul><li><code>contentBase</code> ：决定了 webpackDevServer 启动时服务器资源的根目录。只有在你想要提供<strong>非通过 webpack 打包的静态文件</strong>时才需要。<a href="https://webpack.docschina.org/configuration/dev-server/#devserver-publicpath-"><code>devServer.publicPath</code></a> 将用于确定应该从哪里提供 bundle，并且此选项优先。推荐使用一个绝对路径,例:<code>path.join(__dirname, &#39;public&#39;)</code>，默认 webpack dev server 是从项目的根目录提供服务，如果要从不同的目录提供服务，可以通过 contentBase 来配置。类似<code>output.path</code>一样的作用。假定服务器里生成的内存 index.html 所在位置，并且优先级是最高的</li><li><code>publicPath</code> ：此路径下的打包文件可在浏览器中访问。即在浏览器中访问的路径的前缀（包括 index.html 的访问路径），若是 devServer 里面的 publicPath 没有设置，则会认为是 output 里面设置的 publicPath 的值，只影响于 webpackDevServer，其他该怎么 build 就怎么 build</li><li><code>clientLogLevel</code> ：当使用*内联模式(inline mode)*时，会在开发工具(DevTools)的控制台(console)显示消息</li><li><code>historyApiFallback</code> ：启用后任意的 <code>404</code> 响应都可能需要被替代为 <code>index.html</code></li><li><code>hot</code> ：启用 webpack 的 <a href="https://webpack.docschina.org/concepts/hot-module-replacement/">模块热替换</a> 功能</li><li><code>compress</code> ：一切服务都启用 <a href="https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/">gzip 压缩</a></li><li><code>host</code> ：指定使用一个 host。默认是 <code>localhost</code>。如果希望服务器外部可访问指定为<code>0.0.0.0</code></li><li><code>port</code> ：自指定一个端口</li><li><code>open</code> ：自动打开浏览器</li><li><code>overlay</code> ：当出现编译器错误或警告时，在浏览器中显示全屏覆盖层，默认禁用</li><li><code>proxy</code> ：如果你有单独的后端开发服务器 API，并且希望在同域名下发送 API 请求 ，那么代理某些 URL 会很有用</li><li><code>quiet</code> ：启用后，除了初始启动信息之外的任何内容都不会被打印到控制台</li><li><code>watchOptions</code> ：与监视文件相关的控制选项</li><li>…</li></ul><h3 id="target"><a href="#target" class="headerlink" title="target"></a><code>target</code></h3><p>webpack 能够为 <strong>多种环境</strong> 编译构建， 可通过 <strong>target 配置项</strong> 指定一个 <strong>具体的环境</strong><br>字符串可选值</p><ul><li><code>web</code> ：应用于 web 环境(浏览器)。对于需要 懒加载的 chunk，会通过 动态添加 script 元素的方式加载，然后通过一个 全局方法(webpackJsonp) 来安装</li><li><code>webworker</code> ：应用于 web worker 环境。使用 chunk 时，通过 importScripts 方法加载。</li><li><code>node</code> ：应用于 node 环境。 非入口 chunk 的代码符合 CMD 规范。使用 chunk 时，通过 require 方法加载</li><li><code>async-node</code> ：应用于 node 环境。 非入口 chunk 的代码符合 CMD 规范。使用 chunk 时，通过 fs 模块异步加载</li><li><code>node-webkit</code> ：node-webkit 是一个基于 Chromium 和 Node.js 的 Web 运行环境，可让你直接在 DOM 中调用 Node.js 模块，并可使用任何现有的 Web 技术来编写本地应用</li><li><code>electron-main</code> ：应用于 electron 主进程</li><li><code>elctron-renderer</code> ：应用于 electron render 进程</li><li><code>electron-preload</code> ：应用于 electron render 进程</li></ul><h3 id="externals"><a href="#externals" class="headerlink" title="externals"></a><code>externals</code></h3><p>在某些情况下，我们是 <strong>不希望将依赖的类库</strong> 打包到最后输出的 <strong>bundle</strong> 中的。此时， 我们通过 <strong>externals 配置项指定不参与编译打包的类库</strong>。</p><h3 id="performance"><a href="#performance" class="headerlink" title="performance"></a><code>performance</code></h3><p>用于配置如何展示性能提示。例如，如果一个资源超过 250kb，webpack 会对此输出一个警告来通知你。</p><ul><li><code>hits</code> ：false， 关闭提示；’warning’,当输出文件的体积超过指定体积时，输出 警告信息， 依然完成编译打包工作, 适用于 开发模式；’error’，当输出文件的体积超过指定体积时，中断编译打包，并输出 错误信息， 适用于生产模式。</li><li><code>maxEntrypointSize</code> ：指定 入口文件 的 最大体积， 默认值为 250000 bytes，超出警告</li><li><code>maxAssetSize</code> ：指定 单个资源(包括入口文件) 的 最大体积，默认值为 250000 bytes，超出警告</li><li><code>assetFilter</code> ：自定义 哪些文件的 体积超过最大体积 时，输出 警告/错误 信息</li></ul><h3 id="node"><a href="#node" class="headerlink" title="node"></a><code>node</code></h3><p>这些选项可以配置是否 polyfill 或 mock 某些 <a href="https://nodejs.org/docs/latest/api/globals.html">Node.js 全局变量</a>和模块。这可以使最初为 Node.js 环境编写的代码，在其他环境（如浏览器）中运行</p><h3 id="stats"><a href="#stats" class="headerlink" title="stats"></a><code>stats</code></h3><p>统计信息</p><hr><h3 id="name"><a href="#name" class="headerlink" title="name"></a><code>name</code></h3><p>当前配置的名称，一般用于加载多个配置文件时</p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a><code>cache</code></h3><p>缓存生成的 webpack 模块和 chunk，来改善构建速度。缓存默认在观察模式(watch mode)启用</p><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a><code>loader</code></h3><p>在 loader 上下文中暴露自定义值</p><h3 id="profile"><a href="#profile" class="headerlink" title="profile"></a><code>profile</code></h3><p>捕获一个应用程序”配置文件”，包括统计和提示，然后可以使用 <a href="https://webpack.github.io/analyse/">Analyze</a> 分析工具进行详细分析</p><h3 id="parallelism"><a href="#parallelism" class="headerlink" title="parallelism"></a><code>parallelism</code></h3><p>限制并行处理模块的最大数量，可用于微调性能获得更优性能</p><h3 id="amd"><a href="#amd" class="headerlink" title="amd"></a><code>amd</code></h3><p>设置 <code>require.amd</code> 或 <code>define.amd</code> 的值，某些流行的模块是按照 AMD 规范编写的，为 false 时将禁用 webpack 对 AMD 的支持</p><h3 id="bail"><a href="#bail" class="headerlink" title="bail"></a><code>bail</code></h3><p>在第一个错误出现时抛出失败结果，而不是容忍它。将迫使 webpack 退出其打包过程</p><h3 id="recordsPath"><a href="#recordsPath" class="headerlink" title="recordsPath"></a><code>recordsPath</code></h3><p>开启这个选项可以生成一个 JSON 文件，其中含有 webpack 的 “records” 记录 - 即「用于存储跨多次构建(across multiple builds)的模块标识符」的数据片段。可以使用此文件来跟踪在每次构建之间的模块变化</p><h3 id="recordsInputPath"><a href="#recordsInputPath" class="headerlink" title="recordsInputPath"></a><code>recordsInputPath</code></h3><p>指定读取最后一条记录的文件的名称</p><h3 id="recordsOutputPath"><a href="#recordsOutputPath" class="headerlink" title="recordsOutputPath"></a><code>recordsOutputPath</code></h3><p>指定记录要写入的位置</p><h2 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h2><ol><li><p><code>webpack-dev-server</code>的常用命令参数 （推荐）</p><ul><li><code>--open</code> 自动打开浏览器</li><li><code>--port nnnn</code> 手动指定端口号</li><li><code>--contentBase src</code> 指定根目录是 src</li><li><code>--hot</code> 热更新，局部更新，不是刷新页面没有重新生成新的 bundle.js，而是加了两个<code>xxx.hot-update.js/json</code>文件</li></ul></li><li><p>通过配置文件内添加<code>devServer</code>字段来指定</p><pre class=" language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>        open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 自动打开浏览器</span>        port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置启动时候的监听端口，默认是 8080</span>        contentBase<span class="token punctuation">:</span> <span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定托管根目录</span>        inline<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// development模式 下，webpack-dev-server 会 监听源文件是否发生变化。 如果发生变化，会 自动刷新页面。</span>        hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 启动热更新 的第一步，同时满足以下条件：启用inline模式；显示声明module.hot.accept('url',callback)否则只能刷新页面</span>        hotOnly<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认情况为 false，当 HMR 失败以后，浏览器端通过 重新加载页面 来 响应服务端更新</span>        useLocalIp<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置为true，dev server 会以 本地IP 打开默认浏览器</span>        openPage<span class="token punctuation">:</span> <span class="token string">'默认打开的跳转页面'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定 dev-server 自动打开 默认浏览器 以后的 默认跳转页面</span>        host<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定要使用的 host， 默认是 localhost</span>        liveReload<span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认情况下，dev-server 将在 检测到参与编译打包的文件文件更改 时 重新加载/刷新页面。  即如果如果一个文件 未参与编译打包过程， 那么它发生变化时 不会触发重新加载/刷新页面。通过将 liveReload 设置为 false 来 禁用 它(修改什么文件也 不会触发重新加载/刷新页面)</span>        watchContentBase<span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 告诉服务器从哪里提供内容，默认值为 当前工作目录</span>        watchOptions<span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 告诉 dev-server 监视 devServer.contentBase选项 所服务的文件， 默认情况下 禁用 它</span>        writeToDisk<span class="token punctuation">:</span> <span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 默认为 false， 即 不将编译打包以后的内容写入磁盘</span>        lazy<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 如果设置为 true， dev-server会进入 懒惰模式， 仅在请求时编译该bundle。 这意味着 webpack不会监视任何文件更改。</span>        filename<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 此选项可让您减少 lazy模式 下的 编译。 默认情况下，在 lazy模式 下，每个请求都会产生 新的编译。 使用 filename，只能在请求某个文件时进行编译</span>        overlay<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 当存在 编译错误或者警告 时，将 错误或者警告 以 全屏覆盖 的形式在浏览器中展示</span>        proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'test'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                target<span class="token punctuation">:</span> <span class="token string">'https://localhost:3000'</span><span class="token punctuation">,</span>                changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                router<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在 前后端分离 的开发过程中，使用 proxy 可以有效的帮我们解决 跨域请求问题。通常，会在 proxy配置项 中指定每个 API请求 对应的 代理。</span>        progress<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在 控制台 输出 进度信息，仅适用于 CLI模式</span>        allowedHosts<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 将允许访问 dev server 的 服务列入白名单。</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 启动热更新的第二步</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="几个常用插件介绍"><a href="#几个常用插件介绍" class="headerlink" title="几个常用插件介绍"></a>几个常用插件介绍</h2><h3 id="html-webpack-plugin"><a href="#html-webpack-plugin" class="headerlink" title="html-webpack-plugin"></a><code>html-webpack-plugin</code></h3><p><a href="https://www.cnblogs.com/wonyun/p/6030090.html">详解文章</a></p><p>简化了 HTML 文件的创建，以便为你的 webpack 包提供服务。这对于在文件名中包含每次会随着编译而发生变化哈希的 webpack bundle 尤其有用。 你可以让插件为你生成一个 HTML 文件，使用<a href="https://lodash.com/docs#template">lodash 模板</a>提供你自己的模板，或使用你自己的<a href="https://webpack.docschina.org/loaders">loader</a>。</p><p>两个作用：</p><ol><li>根据指定页面自动在内存中生成对应页面。可以生成创建 html 入口文件，比如单页面可以生成一个 html 文件入口，配置<strong>N</strong>个<code>html-webpack-plugin</code>可以生成<strong>N</strong>个页面入口</li><li>自动创建合适的 script 标签，引入对应路径的 bundle.js。为 html 文件中引入的外部资源如<code>script</code>、<code>link</code>动态添加每次 compile 后的 hash，防止引用缓存的外部文件问题</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'./src/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定模版页面，根据指定页面路径生成内存中的页面</span>  filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 最终生成的内存页面的文件名，默认为index.html，不配置就是该文件名；此外，还可以为输出文件指定目录位置（例如'html/index.html'）</span>  hash<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// true|false，是否为所有注入的静态资源添加webpack每次编译产生的唯一hash值</span>  inject<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 向template或者templateContent中注入所有静态资源，不同的配置值注入的位置不尽相同。</span>  compile<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  favicon<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 添加特定favicon路径到输出的html文档中，同title配置项，需要在模板中动态获取其路径值</span>  minify<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  cache<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  showErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// true|false，默认true；是否将错误信息输出到html页面中</span>  chunks<span class="token punctuation">:</span> <span class="token string">'all'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 允许插入到模板中的一些chunk，不配置此项默认会将entry中所有的chunk注入到模板中。在配置多个页面时，每个页面注入的chunk应该是不相同的，需要通过该配置为不同页面注入不同的thunk</span>  excludeChunks<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 这个与chunks配置项正好相反，用来配置不允许注入的thunk</span>  title<span class="token punctuation">:</span> <span class="token string">'Webpack App'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 生成的html文档的标题，存在模版文件的情况下需要在html中放置&lt;title>&lt;%= htmlWebpackPlugin.options.title %>&lt;/title></span>  xhtml<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">// true|fasle, 默认false；是否渲染link为自闭合的标签，true则为自闭合标签</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></code></pre><h3 id="clean-webpack-plugin"><a href="#clean-webpack-plugin" class="headerlink" title="clean-webpack-plugin"></a><code>clean-webpack-plugin</code></h3><p>在每次构建前清理 <code>/dist</code> 文件夹，这样只会生成用到的文件</p><h3 id="copy-webpack-plugin"><a href="#copy-webpack-plugin" class="headerlink" title="copy-webpack-plugin"></a><code>copy-webpack-plugin</code></h3><p>将静态资源单个文件或整个目录复制到构建目录</p><h2 id="几个常用-loader"><a href="#几个常用-loader" class="headerlink" title="几个常用 loader"></a>几个常用 loader</h2><p>Webpack 默认只能打包处理 js 类型的文件，无法处理其他的非 js 类型文件，需要手动安装一些合适的第三方 loader 加载器</p><blockquote><p><strong>分析调用第三方 loader 的过程</strong></p><ol><li>发现要处理的文件不是 js 文件，就会去配置文件中，查找有没有对应的第三方 loader 规则</li><li>如果能找到对应的规则，就会调用对应的 loader 处理这种文件类型</li><li>在调用 loader 的时候，是从后往前依次调用的</li><li>当最后一个 loader 调用完毕，会把处理的结果直接交给 webpack 进行打包合并，最终输出到 bundle.js 中去</li></ol></blockquote><h3 id="url-loader"><a href="#url-loader" class="headerlink" title="url-loader"></a><code>url-loader</code></h3><p>不管是图片还是自体库，只要是 url 地址 都用这个处理，内部依赖了<code>file-loader</code></p><p><em>limit 参数是指 maxSizeToBeBase64 单位是 KB</em></p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|png|gif|bmp|jpeg)$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span> <span class="token string">'url-loader?limit=6000&amp;name=[hash:8]-[name].[ext]'</span><span class="token punctuation">}</span></code></pre><h3 id="sass-loader"><a href="#sass-loader" class="headerlink" title="sass-loader"></a><code>sass-loader</code></h3><h3 id="less-loader"><a href="#less-loader" class="headerlink" title="less-loader"></a><code>less-loader</code></h3><h3 id="babel-loader"><a href="#babel-loader" class="headerlink" title="babel-loader"></a><code>babel-loader</code></h3><p>在 webpack 中 运行如下两套命令，安装两套包，去安装 babel 相关的 loader 功能</p><p><code>npm i babel-core babel-loader babel-plugin-transform-runtime -D</code></p><p><code>npm i babel-preset-env babel-preset-stage-0 -D</code></p><p>在 webpack 配置中加入 rules</p><p>新建<code>.babelrc</code>文件，写 babel 配置，必须符合 JSON 语法规范</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>   test<span class="token punctuation">:</span> <span class="token regex">/\.js|jsx$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// test:处理什么类型的文件</span>   use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// use:用什么</span>   include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// include:处理这里的</span>   exclude<span class="token punctuation">:</span> <span class="token operator">/</span>node_modules<span class="token operator">/</span> <span class="token comment" spellcheck="true">// exclude:不处理这里的；</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p><em>如果不排除 node_modules 中的所有第三方 js 文件，都打包编译的话 最终 babel 把所有 node_modules 中的 js 转换完毕了耶无法正常运行项目</em></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 由于webpack是基于node进行构建的，所以 webpack配置文件中，任何合法的node代码都是支持的</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"html-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> CleanWebpackPlugin <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clean-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"copy-webpack-plugin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 对于命令行直接输入webpack的时候，如果没有指定入口和出口，就会默认在根目录查找webpack.config.js文件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//entry为入口,webpack从这里开始编译</span>    <span class="token string">"babel-polyfill"</span><span class="token punctuation">,</span>    path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src/index.js"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//output为输出 path代表路径 filename代表文件名称</span>    filename<span class="token punctuation">:</span> <span class="token string">"[name].bundle.js"</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./dist"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    chunkFilename<span class="token punctuation">:</span> <span class="token string">"[name].bundle.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 自动打开浏览器</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置启动时候的运行端口</span>    contentBase<span class="token punctuation">:</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定托管根目录</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 启动热更新 的第一步</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//module是配置所有模块要经过什么处理，用于配置所有第三方loader的规则，webpack 默认只能打包处理.js后缀名类型的文件;像.png.vue之类的无法主动处理，所以要配置第三方的loader</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js|jsx$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// test:处理什么类型的文件</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"babel-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// use:用什么</span>        include<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// include:处理这里的</span>        exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// exclude:不处理这里的；</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 打包处理css样式表的第三方loader，从右向左依次处理；可在css-loader之后通过?追加参数 其中固定参数叫modules表示为普通的css样式表启动模块化</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.less$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>          <span class="token string">"css-loader"</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">"less-loader"</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span> javascriptEnabled<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">"style-loader"</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">"css-loader"</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>                localIdentName<span class="token punctuation">:</span> <span class="token string">"[path][name]-[local]-[hash:5]"</span><span class="token punctuation">,</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token string">"sass-loader"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(jpg|png|gif|bmp|jpeg|ico|svg)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token string">"10240"</span><span class="token punctuation">,</span>              name<span class="token punctuation">:</span> <span class="token string">"assets/[name].[ext]"</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 按理说可以图片字体格式写在一起用url-loader，但是为了方便管理查看，分开写</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff|woff2|eot|ttf|ttc|otf)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token string">"url-loader"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// { test: /\.(woff|woff2|eot|ttf|ttc|otf)$/, use: 'file-loader' }</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">CleanWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//   title: '测试',</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token string">"static"</span><span class="token punctuation">,</span>        to<span class="token punctuation">:</span> <span class="token string">"static"</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 启动热更新的第二步</span>    <span class="token comment" spellcheck="true">// new webpack.NamedModulesPlugin() // NamedModulesPlugin，以便更容易查看要修补(patch)的依赖</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">,</span> <span class="token string">"json"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 表示这几个文件的后缀名，可以省略不写，程序会从左到右以此查找对应后缀名的文件是否存在并对应</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 别名</span>      <span class="token string">"@"</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./src"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><blockquote><p><a href="https://juejin.im/post/5d6350c5e51d4561b072dd24">🌟 用法详解-掘金</a></p><p><a href="https://github.com/fi3ework/blog/issues/39">比较：output.path、output.publicPath、devServer.publicPath 和 devServer.contentBase</a> copy-webpack-plugin 的原理会覆盖此改动</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NextJs</title>
      <link href="/2019/09/19/bi-ji-react-ssr-nextjs/"/>
      <url>/2019/09/19/bi-ji-react-ssr-nextjs/</url>
      
        <content type="html"><![CDATA[<h1 id="NextJs"><a href="#NextJs" class="headerlink" title="NextJs"></a>NextJs</h1><p>Next 是一个 React 框架，允许使用 React 构建 SSR 和静态 web 应用</p><ul><li>默认情况下，每个组件都是服务器渲染的</li><li>自动代码拆分，加快页面加载速度</li><li>不加载不必要的代码</li><li>简单的客户端路由（基于页面）</li><li>基于 Webpack 的开发环境，支持模块热更新（HMR）</li><li>获取数据非常简单</li><li>支持任何 Node HTTP 服务器实现，如 Express</li><li>支持 Babel 和 Webpack 自定义</li><li>能够部署在任何能运行 node 的平台</li><li>内置页面搜索引擎优化（SEO）处理</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-iview</title>
      <link href="/2019/09/19/bi-ji-vue-iview/"/>
      <url>/2019/09/19/bi-ji-vue-iview/</url>
      
        <content type="html"><![CDATA[<h1 id="iview"><a href="#iview" class="headerlink" title="iview"></a>iview</h1><h2 id="通用类别"><a href="#通用类别" class="headerlink" title="通用类别"></a>通用类别</h2><p><code>../iview/src/styles/custom.less</code> <a href="https://www.iviewui.com/docs/guide/theme">定制主题 颜色/字体</a></p><p><em>属性值都可绑定变量 :loading=”istrue”</em></p><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a><code>Button</code></h3><blockquote><p><code>Button</code> 的 属性 props</p><ol><li><p><code>[type=&quot;&quot;]</code></p><p><code>default</code> <code>primary</code> <code>dashed</code> <code>text</code> <code>info</code> <code>success</code> <code>warning</code> <code>error</code></p></li><li><p><code>[ghost]</code> <em>幽灵按钮将其他按钮的内容反色，背景变为透明，常用在有色背景上</em></p></li><li><p><code>[shape=&quot;&quot;]</code></p><p><code>circle</code> <code>circle-outline</code></p></li><li><p><code>[size=&quot;&quot;]</code></p><p><code>small</code> <code>default</code> <code>large</code></p></li><li><p><code>[long]</code></p></li><li><p><code>[disabled]</code></p></li><li><p><code>[icon=&quot;&quot;]</code> <em>使用<code>Button</code>的 icon 属性，图标位置将在最左边，如果需要自定义位置，需使用<code>Icon</code>组件</em></p></li><li><p><code>[loading]</code></p></li><li><p><code>[to=&quot;&quot;], [replace], [target=&quot;&quot;]</code> <em>实现点击按钮直接跳转 a</em></p></li></ol><p><code>ButtonGroup[vertical]&gt;Button</code></p></blockquote><h3 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a><code>Icon</code></h3><blockquote><p>属性 props</p><ol><li><code>[type=&quot;&quot;]</code> <em><a href="https://www.iviewui.com/components/icon">所有图标</a></em></li><li><code>[size=&quot;&quot;]</code> <em>Number | String 图标的大小，单位是 px</em></li><li><code>[color=&quot;&quot;]</code></li><li><code>[custom=&quot;&quot;]</code> 自定义图标。 Icon 支持使用第三方自定义图标，你可以引入任意的字体文件库来使用</li><li>todo</li></ol></blockquote><h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h3><h3 id="Layout"><a href="#Layout" class="headerlink" title="Layout"></a>Layout</h3><h3 id="Card"><a href="#Card" class="headerlink" title="Card"></a>Card</h3><h3 id="Collapse"><a href="#Collapse" class="headerlink" title="Collapse"></a>Collapse</h3><h3 id="Split"><a href="#Split" class="headerlink" title="Split"></a>Split</h3><h3 id="Divider"><a href="#Divider" class="headerlink" title="Divider"></a>Divider</h3><h3 id="Cell"><a href="#Cell" class="headerlink" title="Cell"></a>Cell</h3><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><h3 id="Menu"><a href="#Menu" class="headerlink" title="Menu"></a>Menu</h3><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><h3 id="Dropdown"><a href="#Dropdown" class="headerlink" title="Dropdown"></a>Dropdown</h3><h3 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h3><h3 id="BreadCrumb"><a href="#BreadCrumb" class="headerlink" title="BreadCrumb"></a>BreadCrumb</h3><h3 id="Badge"><a href="#Badge" class="headerlink" title="Badge"></a>Badge</h3><h3 id="Anchor"><a href="#Anchor" class="headerlink" title="Anchor"></a>Anchor</h3><h3 id="LoadingBar"><a href="#LoadingBar" class="headerlink" title="LoadingBar"></a>LoadingBar</h3><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><h3 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h3><h3 id="CheckBox"><a href="#CheckBox" class="headerlink" title="CheckBox"></a>CheckBox</h3><h3 id="Switch"><a href="#Switch" class="headerlink" title="Switch"></a>Switch</h3><h3 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h3><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><h3 id="AutoComplete"><a href="#AutoComplete" class="headerlink" title="AutoComplete"></a>AutoComplete</h3><h3 id="Slider"><a href="#Slider" class="headerlink" title="Slider"></a>Slider</h3><h3 id="DatePicker"><a href="#DatePicker" class="headerlink" title="DatePicker"></a>DatePicker</h3><h3 id="TimePicker"><a href="#TimePicker" class="headerlink" title="TimePicker"></a>TimePicker</h3><h3 id="Cascader-级联选择"><a href="#Cascader-级联选择" class="headerlink" title="Cascader 级联选择"></a>Cascader 级联选择</h3><h3 id="Transfer-穿梭框"><a href="#Transfer-穿梭框" class="headerlink" title="Transfer 穿梭框"></a>Transfer 穿梭框</h3><h3 id="InputNumber-数字输入框"><a href="#InputNumber-数字输入框" class="headerlink" title="InputNumber 数字输入框"></a>InputNumber 数字输入框</h3><h3 id="Rate"><a href="#Rate" class="headerlink" title="Rate"></a>Rate</h3><h3 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h3><h3 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h3><h3 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h3><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h3 id="Alert"><a href="#Alert" class="headerlink" title="Alert"></a>Alert</h3><h3 id="Message-全局提示"><a href="#Message-全局提示" class="headerlink" title="Message 全局提示"></a>Message 全局提示</h3><h3 id="Notice-通知提醒"><a href="#Notice-通知提醒" class="headerlink" title="Notice 通知提醒"></a>Notice 通知提醒</h3><h3 id="Modal"><a href="#Modal" class="headerlink" title="Modal"></a>Modal</h3><h3 id="Drawer-抽屉"><a href="#Drawer-抽屉" class="headerlink" title="Drawer 抽屉"></a>Drawer 抽屉</h3><h3 id="Tree-树形列表"><a href="#Tree-树形列表" class="headerlink" title="Tree 树形列表"></a>Tree 树形列表</h3><h3 id="ToolTip"><a href="#ToolTip" class="headerlink" title="ToolTip"></a>ToolTip</h3><h3 id="PopTip"><a href="#PopTip" class="headerlink" title="PopTip"></a>PopTip</h3><h3 id="Progress"><a href="#Progress" class="headerlink" title="Progress"></a>Progress</h3><h3 id="Avatar"><a href="#Avatar" class="headerlink" title="Avatar"></a>Avatar</h3><h3 id="Tag"><a href="#Tag" class="headerlink" title="Tag"></a>Tag</h3><h3 id="Carousel"><a href="#Carousel" class="headerlink" title="Carousel"></a>Carousel</h3><h3 id="TimeLine"><a href="#TimeLine" class="headerlink" title="TimeLine"></a>TimeLine</h3><h3 id="Time-相对时间"><a href="#Time-相对时间" class="headerlink" title="Time 相对时间"></a>Time 相对时间</h3><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Circle-进度环"><a href="#Circle-进度环" class="headerlink" title="Circle 进度环"></a>Circle 进度环</h3><h3 id="Affix-图钉"><a href="#Affix-图钉" class="headerlink" title="Affix 图钉"></a>Affix 图钉</h3><h3 id="BackTop"><a href="#BackTop" class="headerlink" title="BackTop"></a>BackTop</h3><h3 id="Spin"><a href="#Spin" class="headerlink" title="Spin"></a>Spin</h3><h3 id="Scroll"><a href="#Scroll" class="headerlink" title="Scroll"></a>Scroll</h3>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> UI库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MockJS</title>
      <link href="/2019/09/19/bi-ji-mockjs/"/>
      <url>/2019/09/19/bi-ji-mockjs/</url>
      
        <content type="html"><![CDATA[<h1 id="MockJS"><a href="#MockJS" class="headerlink" title="MockJS"></a>MockJS</h1><h2 id="数据模板定义规范"><a href="#数据模板定义规范" class="headerlink" title="数据模板定义规范"></a>数据模板定义规范</h2><pre class=" language-json"><code class="language-json">// 属性名   name// 生成规则 rule// 属性值   value'name|rule'<span class="token operator">:</span> value</code></pre><h2 id="生成规则-有-7-种格式"><a href="#生成规则-有-7-种格式" class="headerlink" title="生成规则 有 7 种格式"></a>生成规则 有 7 种格式</h2><p>生成规则是<em>可选的</em>；有 _7 种格式(String, Number, Boolean, Object, Array, Function, Regexp)_： 其含义<em>依赖</em> 属性值的类型 确定</p><ul><li><p><strong><code>&#39;name|min-max&#39;:val</code></strong></p><ol><li> <em>String</em>(生成重复次数在 min-max 的字符串);</li><li> <em>Number</em>(生成一个大于等于 min、小于等于 max 的整数，属性值 number 只是用来确定类型);</li><li> <em>Boolean</em>(随机生成一个布尔值，值为 value 的概率是 min/(min + max)，值为!value 的概率是 max/(min + max));</li><li> <em>Object</em>(从属性值 object 中随机选取 min 到 max 个属性)</li><li> <em>Array</em> (通过重复属性值 <code>array</code> 生成一个新数组，重复次数大于等于 min，小于等于 max)</li></ol></li><li><p><strong><code>&#39;name|count&#39;:val</code></strong></p><ol><li> <em>String</em>(重复 count 次生成字符串);</li><li> <em>Boolean</em>(count=1，随机生成一个布尔值，值为 true 的概率是 1/2，值为 false 的概率同样是 1/2);</li><li> <em>Object</em>(从属性值 val 中随机选取 count 个属性);</li><li><em>Array</em><ol><li>count!=1：(通过重复属性值 <code>array</code> 生成一个新数组，重复次数为 <code>count</code>)</li><li>count=1：(从属性值 <code>array</code> 中随机选取 1 个元素，作为最终值)</li></ol></li></ol></li><li><p><strong><code>&#39;name|+step&#39;:val</code></strong></p><ol><li> <em>Number</em>(属性值自动加 1，初始值为 step);</li><li> <em>Array</em>(从属性值 <code>array</code> 中间隔 step 个数顺序选取 1 个元素，作为最终值)</li></ol></li><li><p>浮点数</p><ul><li><strong><code>&#39;name|min-max.dmin-dmax&#39;:val</code></strong><ol><li> <em>Number</em>(生成一个浮点数，整数部分大于等于 min、小于等于 max，小数部分保留 dmin 到 dmax 位);</li></ol></li><li><strong><code>&#39;name|min-max.dcount&#39;:val</code></strong><ol><li> <em>Number</em>(生成一个浮点数,小数点前 min-max 数值范围随机整数，小数点后 dcount 位随机小数);</li></ol></li><li><strong><code>&#39;name|count.dmin-dmax&#39;:val</code></strong><ol><li> <em>Number</em>(生成一个浮点数,小数点前 count，小数点后 dmin-dmax 位随机);</li></ol></li><li><strong><code>&#39;name|count.dcount&#39;:val</code></strong><ol><li> <em>Number</em>(生成一个浮点数,小数点前 count，小数点后 dcount 位随机小数);</li></ol></li></ul></li><li><p><strong><code>&#39;name&#39;: function</code></strong></p><p>执行函数 <code>function</code>，取其返回值作为最终的属性值，函数的上下文 this 为该属性 <code>&#39;name&#39;</code> 所在的对象。</p></li><li><p><strong><code>&#39;name&#39;: regexp</code></strong></p><p>根据正则表达式 <code>regexp</code> 反向生成可以匹配它的字符串。用于生成自定义格式的字符串。</p></li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="Mock-mock"><a href="#Mock-mock" class="headerlink" title="Mock.mock()"></a><code>Mock.mock()</code></h3><p>4 种参数：都可选</p><ul><li><p><code>rurl</code> 表示需要拦截的 URL，可以是 URL 字符串或 URL 正则；例：//domain/list.json/<code>、</code>‘/domian/list.json’</p></li><li><p><code>rtype</code> 表示需要拦截的 Ajax 请求类型；例： <code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code> 等</p></li><li><p><code>template</code> 表示数据模板，可以是对象或字符串；例： <code>&#123; &#39;data|1-10&#39;:[&#123;&#125;] &#125;</code>、<code>&#39;@EMAIL&#39;</code></p></li><li><p><code>function(options)</code> 表示用于生成响应数据的函数；<code>options</code>指向本次请求的 Ajax 选项集，含有 <code>url</code>、<code>type</code> 和 <code>body</code> 三个属性。</p></li></ul><h3 id="Mock-setup-settings"><a href="#Mock-setup-settings" class="headerlink" title="Mock.setup(settings)"></a><code>Mock.setup(settings)</code></h3><p>配置拦截 Ajax 请求时的行为。参数 settings 支持的配置项目前只有一个：<code>timeout</code></p><pre class=" language-js"><code class="language-js">Mock<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  timeout<span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 400 毫秒 后才会返回响应内容</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Mock<span class="token punctuation">.</span><span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  timeout<span class="token punctuation">:</span> <span class="token string">"200-600"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 响应时间介于 200 和 600 毫秒之间</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认值是'10-100'</span></code></pre><h3 id="Mock-Random"><a href="#Mock-Random" class="headerlink" title="Mock.Random"></a><code>Mock.Random</code></h3><p>是一个工具类，用于生成各种随机数据。</p><p>Mock.Random 的方法在数据模板中称为『占位符』，书写格式为 @占位符(参数 [, 参数])</p><ul><li><p>方法</p><pre class=" language-js"><code class="language-js">Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">:</span> <span class="token string">"@email"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => { email: "v.lewis@hall.gov" }</span>Random<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => 1</span>Random<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => 101</span>Random<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => 1101</span></code></pre><table><thead><tr><th>Type 大类</th><th>Method（详见<a href="https://github.com/nuysoft/Mock/wiki/Basic">Mock 文档</a>）</th></tr></thead><tbody><tr><td>Basic</td><td>boolean, natural*(自然数,&gt;=0 的整数)<em>, integer</em>(整数)<em>, float, character</em>(字符)<em>, string</em>(字符串)<em>, range</em>(整型数组)*</td></tr><tr><td>Time</td><td>date*(日期字符串)<em>, time</em>(时间字符串)<em>, datetime</em>(日期和时间字符串)<em>, now</em>(当前的日期和时间字符串)*</td></tr><tr><td>Image</td><td>image*(图片地址)<em>, dataImage</em>(Base64 图片编码)*</td></tr><tr><td>Color</td><td>color*(格式为 ‘#RRGGBB’)<em>, hex</em>(格式为 ‘#RRGGBB’)<em>, rgb</em>(格式为 ‘rgb(r, g, b)’)<em>, rgba</em>(格式为 ‘rgba(r, g, b, a)’)<em>, hsl</em>(格式为 ‘hsl(h, s, l)’)*</td></tr><tr><td>Text</td><td>paragraph*(一段文本)<em>, cparagraph</em>(一段中文文本)<em>, sentence</em>(一个首字母大写的句子)<em>, csentence</em>(一个中文句子)<em>, word</em>(一个单词)<em>, cword</em>(一个汉字)<em>, title</em>(一句每个单词首字母大写的标题)<em>, ctitle</em>(一句中文标题)*</td></tr><tr><td>Name</td><td>first*(英文名)<em>, last</em>(英文姓)<em>, name</em>(英文姓名)<em>, cfirst</em>(中文姓)<em>, clast</em>(中文名)<em>, cname</em>(中文姓名)*</td></tr><tr><td>Web</td><td>url*(一个 URL)<em>, protocol</em>(一个 URL 协议:http/ftp/telnet/…)<em>, domain</em>(域名)<em>, tld</em>(顶级域名:net/com/…)<em>email</em>(邮件地址)*, ip,</td></tr><tr><td>Address</td><td>region*(中国大区:华北/…)<em>, province</em>(中国省)<em>, city</em>(中国市)<em>, county</em>(中国县)<em>, zip</em>(六位邮政编码)*</td></tr><tr><td>Helper</td><td>capitalize*(首字母转为大写)<em>, upper</em>(字符串转为大写)<em>, lower</em>(字符串转为小写)<em>, pick</em>(数组中随机选取一个元素返回)<em>, shuffle</em>(原数组乱序返回)*</td></tr><tr><td>Miscellaneous</td><td>guid*(随机生成一个 GUID)<em>, id</em>(18 位身份证)<em>, increment</em>(全局的自增整数)*</td></tr></tbody></table></li><li><p>扩展</p><pre class=" language-js"><code class="language-js">Random<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  constellation<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>date<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> constellations <span class="token operator">=</span> <span class="token punctuation">[</span>      <span class="token string">"白羊座"</span><span class="token punctuation">,</span>      <span class="token string">"金牛座"</span><span class="token punctuation">,</span>      <span class="token string">"双子座"</span><span class="token punctuation">,</span>      <span class="token string">"巨蟹座"</span><span class="token punctuation">,</span>      <span class="token string">"狮子座"</span><span class="token punctuation">,</span>      <span class="token string">"处女座"</span><span class="token punctuation">,</span>      <span class="token string">"天秤座"</span><span class="token punctuation">,</span>      <span class="token string">"天蝎座"</span><span class="token punctuation">,</span>      <span class="token string">"射手座"</span><span class="token punctuation">,</span>      <span class="token string">"摩羯座"</span><span class="token punctuation">,</span>      <span class="token string">"水瓶座"</span><span class="token punctuation">,</span>      <span class="token string">"双鱼座"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">pick</span><span class="token punctuation">(</span>constellations<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Random<span class="token punctuation">.</span><span class="token function">constellation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "水瓶座"</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token string">"@CONSTELLATION"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => "天蝎座"</span>Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  constellation<span class="token punctuation">:</span> <span class="token string">"@CONSTELLATION"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// => { constellation: "射手座" }</span></code></pre></li></ul><h3 id="Mock-valid-template-data"><a href="#Mock-valid-template-data" class="headerlink" title="Mock.valid(template, data)"></a><code>Mock.valid(template, data)</code></h3><p>校验真实数据 <code>data</code> 是否与数据模板 <code>template</code> 匹配。2 个参数，必选</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> tempObj <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"user|1-3"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"@cname"</span><span class="token punctuation">,</span> <span class="token string">"id|18-28"</span><span class="token punctuation">:</span> <span class="token number">88</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> realData <span class="token operator">=</span> <span class="token punctuation">{</span> user<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> id<span class="token punctuation">:</span> <span class="token number">90</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Mock<span class="token punctuation">.</span><span class="token function">valid</span><span class="token punctuation">(</span>tempObj<span class="token punctuation">,</span> realData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果都匹配，则会返回空数组[],否则返回不匹配的项组成的数组,元素是包含action, actual, expected, message, path, type 等属性</span></code></pre><h3 id="Mock-toJSONSchema"><a href="#Mock-toJSONSchema" class="headerlink" title="Mock.toJSONSchema()"></a><code>Mock.toJSONSchema()</code></h3><p>把 Mock.js 风格的数据模板 <code>template</code> 转换成 <a href="https://json-schema.org/">JSON Schema</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap v4</title>
      <link href="/2019/09/19/bi-ji-bootstrap-v4/"/>
      <url>/2019/09/19/bi-ji-bootstrap-v4/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><em>当前笔记为 v4.1 版本</em></p><p>主要 css 文件 <code>bootstrap.css</code>,自定义更改常量在 <strong>_variable.scss</strong>中</p><p>某些组件效果是基于/依次引用 <code>jQuery</code>和<code>popper.js</code>和<code>bootstrap.js</code> <em>(bootstrap.bundle.js 和 bootstrap.bundle.min.js 中打包了 popper.js，不包含 jQuery.js)</em></p><h3 id="HTML-模板实例"><a href="#HTML-模板实例" class="headerlink" title="HTML 模板实例"></a>HTML 模板实例</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Required meta tags --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span>      <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>      <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--响应式meta--></span>    <span class="token comment" spellcheck="true">&lt;!-- Bootstrap CSS --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span>      <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span>      <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css<span class="token punctuation">"</span></span>      <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm<span class="token punctuation">"</span></span>      <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Hello, world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello, world!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- Optional JavaScript --></span>    <span class="token comment" spellcheck="true">&lt;!-- jQuery first, then Popper.js, then Bootstrap JS --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.2.1/jquery.slim.min.js<span class="token punctuation">"</span></span>      <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN<span class="token punctuation">"</span></span>      <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js<span class="token punctuation">"</span></span>      <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q<span class="token punctuation">"</span></span>      <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>      <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js<span class="token punctuation">"</span></span>      <span class="token attr-name">integrity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl<span class="token punctuation">"</span></span>      <span class="token attr-name">crossorigin</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>anonymous<span class="token punctuation">"</span></span>    <span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h1 id="Layout-排版"><a href="#Layout-排版" class="headerlink" title="Layout 排版"></a>Layout 排版</h1><h2 id="排版的三个主要轴：container-container-fluid-media-queries-z-index"><a href="#排版的三个主要轴：container-container-fluid-media-queries-z-index" class="headerlink" title="排版的三个主要轴：container/container-fluid, media queries, z-index"></a>排版的三个主要轴：container/container-fluid, media queries, z-index</h2><blockquote><h3 id="容器-container-container-fluid"><a href="#容器-container-container-fluid" class="headerlink" title="容器 container/container-fluid"></a>容器 container/container-fluid</h3><p>容器是 Bootstrap 最基本的排版元素，且  <strong>当使用我们的网格系统时</strong>  是必须的。从响应式、固定宽度容器（表示其最大宽度限制在每一个中断点）或可变宽度（显示为 100% 宽）中选择</p><h3 id="响应式断点-media-queries"><a href="#响应式断点-media-queries" class="headerlink" title="响应式断点 media queries"></a>响应式断点 media queries</h3><p>由于 Bootstrap 是被开发来作行动优先，我们使用许多  <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">media queries</a>  建立灵敏的中断点用于我们的排版和介面。这些中断点大部分基于最小 viewport，并且允许我们随着 viewport 的变化放大组件。</p><blockquote><p>一般是以下几个尺寸</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 576px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token number">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span> // Small devices <span class="token punctuation">(</span>landscape phones, <span class="token number">576</span>px and up<span class="token punctuation">)</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token number">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span> // Medium devices <span class="token punctuation">(</span>tablets, <span class="token number">768</span>px and up<span class="token punctuation">)</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token number">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span> // Large devices <span class="token punctuation">(</span>desktops, <span class="token number">992</span>px and up<span class="token punctuation">)</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token number">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span> // Extra large devices <span class="token punctuation">(</span>large desktops, <span class="token number">1200</span>px and up<span class="token punctuation">)</span></code></pre><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 575.98px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token number">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span> // Extra small devices <span class="token punctuation">(</span>portrait phones, less than <span class="token number">576</span>px<span class="token punctuation">)</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 576px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 767.98px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token number">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span> // Small devices <span class="token punctuation">(</span>landscape phones, <span class="token number">576</span>px and up<span class="token punctuation">)</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 991.98px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token number">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span> // Medium devices <span class="token punctuation">(</span>tablets, <span class="token number">768</span>px and up<span class="token punctuation">)</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 1199.98px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token number">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span> // Large devices <span class="token punctuation">(</span>desktops, <span class="token number">992</span>px and up<span class="token punctuation">)</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 1200px<span class="token punctuation">)</span></span> <span class="token punctuation">{</span>  <span class="token number">...</span><span class="token punctuation">;</span><span class="token punctuation">}</span> // Extra large devices <span class="token punctuation">(</span>large desktops, <span class="token number">1200</span>px and up<span class="token punctuation">)</span></code></pre></blockquote><h3 id="Z-index"><a href="#Z-index" class="headerlink" title="Z-index"></a>Z-index</h3><p>一些 Bootstrap 元件使用  <code>z-index</code> 校正图层导引、工具提示和 popover、modals  ， 这些偏高的数值，具体的目的是为了避免冲突，需要再不同的分层组建区分层级，如 工具提示、导览列、下拉选单、互动视窗的行为正确，没有理由不使用  <code>100</code>+ 或  <code>500</code>+。</p><blockquote><p>如下</p><pre class=" language-css"><code class="language-css">$<span class="token property">zindex-dropdown</span><span class="token punctuation">:</span> <span class="token number">1000</span> !default<span class="token punctuation">;</span>$<span class="token property">zindex-sticky</span><span class="token punctuation">:</span> <span class="token number">1020</span> !default<span class="token punctuation">;</span>$<span class="token property">zindex-fixed</span><span class="token punctuation">:</span> <span class="token number">1030</span> !default<span class="token punctuation">;</span>$<span class="token property">zindex-modal-backdrop</span><span class="token punctuation">:</span> <span class="token number">1040</span> !default<span class="token punctuation">;</span>$<span class="token property">zindex-modal</span><span class="token punctuation">:</span> <span class="token number">1050</span> !default<span class="token punctuation">;</span>$<span class="token property">zindex-popover</span><span class="token punctuation">:</span> <span class="token number">1060</span> !default<span class="token punctuation">;</span>$<span class="token property">zindex-tooltip</span><span class="token punctuation">:</span> <span class="token number">1070</span> !default<span class="token punctuation">;</span></code></pre></blockquote></blockquote><h1 id="Content-内容"><a href="#Content-内容" class="headerlink" title="Content 内容"></a>Content 内容</h1><h2 id="重置-reboot-css"><a href="#重置-reboot-css" class="headerlink" title="重置 reboot.css"></a>重置 reboot.css</h2><p>重置的原因和规范：</p><ul><li>更新部分浏览器的预设值，在可变动的文字间距上使用 <code>rem</code>s 替代 <code>em</code>s。</li><li>避免 <code>margin-top</code>。垂直边缘可能会发生重叠，产生无法预料的错误。更重要的是 <code>margin</code> 应该是单向、简单的思维。</li><li>为了在设备之间之间轻松缩放，方块元素应当在 <code>margin</code> 上采用 <code>rem</code>。</li><li>尽可能使用 <code>inherit</code> 将字体的属性宣告保持在最小化。</li></ul><h3 id="1-页面预设"><a href="#1-页面预设" class="headerlink" title="1.页面预设"></a>1.页面预设</h3><blockquote><ul><li>在每个元素上设定全域性的  <code>box-sizing</code>，包括  <code>*::before</code>  和  <code>*::after</code>  以及  <code>border-box</code>。</li><li><code>&lt;body&gt;</code> 同时设定一个全域的 <code>font-family</code> 和 <code>line-height</code> 及 <code>text-align</code>，随后某些元素形式会继承这个设定以防止字体不一致。</li><li>安全起见在 <code>&lt;body&gt;</code> 宣告 <code>background-color</code> 预设值为 <code>#fff</code>。</li></ul></blockquote><h3 id="2-原生字体堆叠"><a href="#2-原生字体堆叠" class="headerlink" title="2.原生字体堆叠"></a>2.原生字体堆叠</h3><blockquote><p>放弃了预设网页字体（Helvetica Neue, Helvetica, 和 Arial）并用 “native font stack” 取代了预设字体以在每个设备和作业系统上获得最佳的阅读呈现</p></blockquote><h3 id="3-标题和段落"><a href="#3-标题和段落" class="headerlink" title="3.标题和段落"></a>3.标题和段落</h3><blockquote><p>所有标题元素像是  <code>&lt;h1&gt;</code>  及  <code>&lt;p&gt;</code>  已经删除它们的  <code>margin-top</code>。标题元素具有  <code>margin-bottom: .5rem</code>，段落元素则是  <code>margin-bottom: 1rem</code>  使其具有更单纯的间隔。</p></blockquote><h3 id="4-列表"><a href="#4-列表" class="headerlink" title="4.列表"></a>4.列表</h3><blockquote><ul><li>删除全部列表  <code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>  和  <code>&lt;dl&gt;</code>  中的  <code>margin-top</code>，并设定为  <code>margin-bottom: 1rem</code>。巢状列表没有  <code>margin-bottom</code>。</li><li>为了更简单的样式、明确和更好的间隔，说明清单具有更新后的  <code>margin</code>、<code>&lt;dd&gt;</code>  重设  <code>margin-left</code>  为  <code>0</code>  并增加  <code>margin-bottom: .5rem</code>。<code>&lt;dt&gt;</code>  为  <strong>粗体</strong>。</li></ul></blockquote><h3 id="5-代码块"><a href="#5-代码块" class="headerlink" title="5.代码块"></a>5.代码块</h3><blockquote><p><code>&lt;pre&gt;</code>  元素被重设以删除其  <code>margin-top</code>  并在  <code>margin-bottom</code>  上使用  <code>rem</code>。</p></blockquote><h3 id="6-表格"><a href="#6-表格" class="headerlink" title="6.表格"></a>6.表格</h3><blockquote><p>表格经过轻微调整以将并  <code>&lt;caption&gt;</code>  风格化、合并边框并确保整体的  <code>text-align</code>。在<a href="https://bootstrap.hexschool.com/docs/4.1/content/tables/">the <code>.table</code> class</a>  中有针对 borders、padding 和更多的额外变化 。</p></blockquote><h3 id="7-表单"><a href="#7-表单" class="headerlink" title="7.表单"></a>7.表单</h3><blockquote><ul><li><code>&lt;fieldset&gt;</code> 没有 borders、padding 或 margin 以便包覆独立 input 和成组 inputs。</li><li><code>&lt;legend&gt;</code> 和 fieldsets 一样，<code>&lt;legend&gt;</code> 已经被重新定义样式以便显示为类型的标题。</li><li><code>&lt;label&gt;</code> 被设定为<code>display: inline-block</code> 以便让 <code>margin</code> 应用。</li><li>透过 Normalize 于 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>、 和 <code>&lt;button&gt;</code>，重置删除了他们的 <code>margin</code> 并同样设定 <code>line-height: inherit</code>。</li><li>将 <code>&lt;textarea&gt;</code> 修改为仅可调整垂直尺寸，因为调整水平宽度通常 “破坏” 了页面配置。</li></ul></blockquote><h3 id="8-其他"><a href="#8-其他" class="headerlink" title="8.其他"></a>8.其他</h3><blockquote><h4 id="8-1-地址"><a href="#8-1-地址" class="headerlink" title="8.1 地址"></a>8.1 地址</h4><blockquote><p>更新了  <code>&lt;address&gt;</code>  元素以便将浏览器的预设  <code>font-style</code>  由<code>italic</code>  重置为  <code>normal</code>。同时现在继承了  <code>line-height</code>  并添加了  <code>margin-bottom: 1rem</code>。<code>&lt;address&gt;</code>  用于提供联系资讯。透过  <code>&lt;br&gt;</code>  来换一行。</p></blockquote><h4 id="8-2-长引用-blockquote"><a href="#8-2-长引用-blockquote" class="headerlink" title="8.2 长引用 blockquote"></a>8.2 长引用 blockquote</h4><blockquote><p>Blockquotes 的预设  <code>margin</code>  为  <code>1em 40px</code>，因此我们将其重新设定为  <code>0 0 1rem</code>  以便更符合其他元素的设定。</p></blockquote><h4 id="8-3-行内元素"><a href="#8-3-行内元素" class="headerlink" title="8.3 行内元素"></a>8.3 行内元素</h4><blockquote><p><code>&lt;abbr&gt;</code>  元素接受基本样式以便在段落文字之间突出显示。</p></blockquote><h4 id="8-4-摘要"><a href="#8-4-摘要" class="headerlink" title="8.4 摘要"></a>8.4 摘要</h4><blockquote><p>预设游标在摘要上鼠标样式是  <code>text</code>，所以我们将其重置为  <code>pointer</code>，在界面上了解元素可以点击产生互动。</p></blockquote><h4 id="8-5hidden-属性"><a href="#8-5hidden-属性" class="headerlink" title="8.5hidden 属性"></a>8.5hidden 属性</h4><blockquote><p>HTML 添加了  [一个名为  <code>[hidden]</code>  的新全域属性]，这是属性的预设格式是  <code>display: none</code>。借鉴了  <a href="https://purecss.io/">PureCSS</a>  的一个想法，强制加入  <code>[hidden] &#123; display: none !important; &#125;</code>  改善了预设设定，以防止该属性的  <code>display</code>  被意外覆盖。兼容 IE10 支援原生  <code>[hidden]</code>。</p></blockquote></blockquote><h1 id="Components-组件-元件"><a href="#Components-组件-元件" class="headerlink" title="Components 组件/元件"></a>Components 组件/元件</h1><h2 id="滚动监控-data-spy-”scroll”"><a href="#滚动监控-data-spy-”scroll”" class="headerlink" title="滚动监控 [data-spy=”scroll”]"></a>滚动监控 [data-spy=”scroll”]</h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>.navbar#id</code><ul><li><code>.navbar-brand</code></li><li><code>.nav&gt;</code><ul><li><code>.nav-item a[href=&quot;#id0&quot;]</code></li><li><code>*</code><ul><li><code>a[href=&quot;#id0-0&quot;]</code> <em>嵌套 父层 a 也会是.active</em></li><li><code>a[href=&quot;#id0-1&quot;]</code></li></ul></li><li><code>.nav-item a[href=&quot;#id1&quot;]</code></li></ul></li></ul></li><li><code>div[data-spy=&quot;scroll&quot;][data-target=&quot;#id&quot;][data-offset=&quot;默认10(偏移值)&quot;]</code><ul><li><code>*#id0</code><ul><li><code>*#id0-0</code></li><li><code>*#id0-1</code></li></ul></li><li><code>*#id1</code></li></ul></li></ul></blockquote></li><li><p>自定义选项：</p><ul><li>将 <code>data-spy=&quot;scroll&quot;</code> 加到要侦听的元素，或<code>$().scrollspy(&#123; target: &#39;#id&#39; &#125;)</code></li></ul></li><li><p>方法：</p><ul><li><code>$().scrollspy(&#39;refresh&#39;)</code> 当从 DOM 加入或删除元素使用滚动监控时，需要调用刷新方式</li><li><code>$().scrollspy(&#39;dispose&#39;)</code> 销毁 JS</li></ul></li><li><p>事件：</p><ul><li><code>$(&#39;[data-spy=&quot;scroll&quot;]&#39;).on(&#39;activate.bs.scrollspy&#39;, function()&#123;每当一个项目被启用时，这个事件会在滚动元素上触发&#125;)</code></li></ul></li></ul><h2 id="导航栏-nav"><a href="#导航栏-nav" class="headerlink" title="导航栏.nav"></a>导航栏.nav</h2><ul><li><p>基本结构：</p><blockquote><p><em>flex 布局</em></p><ul><li><code>.nav</code> &amp; <code>.justify-content-&#123;start/center/end&#125;(水平对齐方式) || .flex-column/.felx-column-reverse(垂直布局)</code> &amp; <code>.nav-fill&gt;.nav-item(flex:1 1 auto;自动填充满按比例) || .nav-justified&gt;.nav-item(flex-basis:0;flex-grow:1;自动填满且相同宽度)</code> &amp; <code>.nav-tabs&gt;.nav-item&gt;[data-target=&quot;#xx&quot;] || .nav-pills&gt;[data-target=&quot;#xx&quot;](tab组件)</code><ul><li><code>.nav-item</code> <code>.nav-link</code><ul><li><code>.nav-link</code></li></ul></li></ul></li><li><code>.tab-content&gt;.tab-pane</code></li></ul></blockquote></li><li><p>自定义选项：</p><ul><li><code>.nav</code>内包含<code>.nav-item.dropdown&gt;.dropdown-toggle+.dropdown-menu</code></li><li><code>.nav&gt;.nav-item/nav-link[data-toggle=&quot;tab&quot;/&quot;pill&quot;][href/data-target=&quot;#xxx&quot;]</code> &amp; <code>.tab-content&gt;.tab-pane#xxx</code> <strong>同.list-group-item[data-toggle=”list”]</strong></li></ul></li><li><p>方法：</p><ul><li><code>$(&#39;.nav-item a/.nav-link&#39;).tab(&quot;show&quot;)</code></li><li><code>$(&#39;.tab-pane&#39;).tab(&quot;dispose&quot;)</code> 销毁 tab-panel</li></ul></li><li><p>事件：</p><ul><li><code>$().on(&#39;show.bs.tab&#39;, function (e) &#123;在分页标签显示之前。 event.target要显示的分页 和 event.relatedTarget上一个启用分页标签（如果可用）&#125;)</code></li><li><code>$().on(&#39;shown.bs.tab&#39;, function (e) &#123;在一个分页标签显示之后。 event.target要显示的分页 和 event.relatedTarget上一个启用分页标签（如果可用）&#125;)</code></li><li><code>$().on(&#39;hide.bs.tab&#39;, function (e) &#123;显示新分页标签之后。 event.target上一个启用分页标签 和 event.relatedTarget要显示的分页（如果有）&#125;)</code></li><li><code>$(&#39;.tab-pane&#39;).on(&#39;hidden.bs.tab&#39;, function (e) &#123;在显示新分页标签之后。 event.target上一个启用分页标签 和 event.relatedTarget要显示的分页（如果有）&#125;)</code></li></ul></li></ul><h2 id="导航栏条-navbar"><a href="#导航栏条-navbar" class="headerlink" title="导航栏条 .navbar"></a>导航栏条 .navbar</h2><ul><li><p>基本结构：</p><blockquote><p>display:flex;justify-content: space-between</p><ul><li><code>.navbar</code> &amp; <code>navbar-expand&#123;-sm//md/lg/xl&#125;(响应式宽度,即自定义多宽开始是flex-direction:row;)</code> &amp; <code>.navbar-light/.navbar-dark .bg-&#123;primary/success/..&#125;颜色</code> &amp; <code>.fixed-top/sticky-top/fixed-bottom定位</code><ul><li>[.container/.container-fluid]<ul><li><code>.navbar-brand</code> <em>display:inline-block;margin-right:1rem;font-size:1.25rem</em></li><li><code>button.navbar-toggler[data-toggle=&quot;collapse&quot;][data-target=&quot;#xx&quot;]&gt;span.navbar-toggler-icon</code> <em>折叠菜单按钮</em></li><li><code>.collapse.navbar-collapse#xx</code> 折叠菜单 (<em>navbar-collapse{flex-basis:100%;flex-grow:1;} min-width: ?px:{display: flex !important;} .collapse:not(.show){display:none;} .show{display:block}</em>)<ul><li><code>ul.navbar-nav</code> (<em>flex-direction:column; min-width:?px:{flex-direction:row}</em>)<ul><li><code>li.navbar-item</code> &amp; <code>.dropdown</code><ul><li><code>.dropdown-toggle</code></li><li><code>.dropdown-menu&gt;.dropdown-item+.dropdown-divider</code></li></ul></li></ul></li><li><code>form.form-inline</code></li><li><code>.navbar-text</code> <em>inline-block</em></li></ul></li></ul></li></ul></li></ul></blockquote></li></ul><h2 id="面包屑-breadcrumb-gt-breadcrumb-item-active"><a href="#面包屑-breadcrumb-gt-breadcrumb-item-active" class="headerlink" title="面包屑 .breadcrumb &gt; .breadcrumb-item.active"></a>面包屑 .breadcrumb &gt; .breadcrumb-item.active</h2><p>在导航结构中透过 CSS 自动添加分隔符号指示当前页面的位置<a href="https://jsfiddle.net/hojondo/aq9Laaew/275859/"><em>面包屑 jsfiddle 示例</em></a></p><ul><li>基本结构：<ul><li><code>ol.breadcrumb</code><ul><li><code>li.breadcrumb-item</code></li></ul></li></ul></li><li>自定义选项：<ul><li>改变分隔符在<code>_variable_scss</code>中：例<code>$breadcrumb-divider: quote(&quot;&gt;&quot;);</code> 或 <code>$breadcrumb-divider: url(data:image/svg+xml;base64,某base64url);</code> 或不要分隔符<code>$breadcrumb-divider: none;</code></li></ul></li></ul><h2 id="分页-pagination"><a href="#分页-pagination" class="headerlink" title="分页 .pagination"></a>分页 .pagination</h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>.pagination</code> &amp; <code>.pagination-sm/lg 大小</code> &amp; <code>.justify-content-&#123;center/start/end/between/around&#125; 对齐</code> <em>display:flex;list-style:none;</em><ul><li><code>.page-item</code> <code>.page-link</code> &amp; <code>[disabled/active]</code><ul><li><code>.page-link</code><ul><li><code>&lt;span&gt;左箭头&amp;laquo;/右箭头&amp;raquo;&lt;/span&gt;</code></li></ul></li></ul></li></ul></li></ul></blockquote></li></ul><h2 id="—"><a href="#—" class="headerlink" title="—"></a>—</h2><h2 id="轮播-carousel"><a href="#轮播-carousel" class="headerlink" title="轮播 .carousel"></a>轮播 .carousel</h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>.carousel.slide#crsl</code><ul><li><code>ol.carousel-indicators</code><ul><li><code>li.active[data-target=&#39;#crsl&#39; data-slide-to=&#39;0&#39;]</code></li><li><code>li[data-target=&#39;#crsl&#39; data-slide-to=&#39;1&#39;]</code></li><li><code>li[data-target=&#39;#crsl&#39; data-slide-to=&#39;2&#39;]</code></li></ul></li><li><code>.carousel-inner</code><ul><li><code>.carousel-item.active &gt; img+.carousel-caption</code></li><li><code>.carousel-item &gt; img+.carousel-caption</code></li><li><code>.carousel-item &gt; img+.carousel-caption</code></li></ul></li><li><code>a.carousel-control-prev[href=&#39;#crsl&#39; data-slide=&#39;prev&#39;] &gt; span.carousel-control-prev-icon</code></li><li><code>a.carousel-control-next[href=&#39;#crsl&#39; data-slide=&#39;next&#39;] &gt; span.carousel-control-next-icon</code></li></ul></li></ul></blockquote></li><li><p>交叉淡入淡出 切换效果：<code>.carousel.carousel-fade</code></p></li><li><p>自定义选项：</p><ul><li><code>data-interval=5000!default</code> ：number | 自动回圈之间延迟的时间 ;如果是 false 不会自动重播</li><li><code>data-keyboard=true!default</code> ：boolean | 是否对键盘事件有反应</li><li><code>data-pause=&#39;hover!default&#39;</code> ： string / boolean | 鼠标 Mouseover 时暂停滚动；false 不会暂停</li><li><code>data-ride=false!default</code> ： string | 默认用户手动播放第一次后自动播放；=’carousel’自动播放</li><li><code>data-wrap=true!default</code> ： boolean | 轮播是否连续循环或停止</li></ul></li><li><p>方法：</p><ul><li><code>$().carousel(&#123;键值对&#125;)</code> ： 透过 boject 设定并开始执行轮播</li><li><code>$().carousel(&#39;cycle&#39;)</code> ： 从左到右循环播放</li><li><code>$().carousel(&#39;pause&#39;)</code>： 将物件的循环从轮播中停止</li><li><code>$().carousel(&#39;number&#39;)</code>：将轮播指向到特定的影格（基于 0，类似于阵列）。 <strong>在目标项目被显示之前回传给调用者</strong>（在发生 <code>slid.bs.carousel</code> 事件之前）</li><li><code>$().carousel(&#39;prev&#39;)</code>：将轮播指向前一个物件。<strong>在前一个物件显示前回传给调用者</strong> （在发生 <code>slid.bs.carousel</code> 事件之前）</li><li><code>$().carousel(&#39;next&#39;)</code>：将轮播指向下一个物件。<strong>在前一个物件显示前回传给调用者</strong> （在发生 <code>slid.bs.carousel</code> 事件之前）</li><li><code>$().carousel(&#39;dispose&#39;)</code>：销毁一个元素的轮播实例 carousel object instance</li></ul></li><li><p>事件：</p><ul><li><p><code>$().on(&#39;slide.bs.carousel&#39;, function () &#123;当调用 slide方法时&#125;)</code></p></li><li><p><code>$().on(&#39;slid.bs.carousel&#39;, function () &#123;轮播完成切换后&#125;)</code></p><p>两个事件都具有此 4 个附加属性：</p><ul><li><code>direction</code>：轮播滑动的方向（<code>&quot;left&quot;</code> 或 <code>&quot;right&quot;</code>）。</li><li><code>relatedTarget</code>：被作为启用的物件滑动到指定 DOM 元素。</li><li><code>from</code>：当前物件的索引</li><li><code>to</code>：下一个物件的索引</li></ul></li></ul></li><li><p>sass 改变速率等：<code>$carousel-transition:transform .6s ease !default;</code></p></li></ul><h2 id="超大屏幕-jumbotron"><a href="#超大屏幕-jumbotron" class="headerlink" title="超大屏幕 .jumbotron"></a>超大屏幕 .jumbotron</h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>div.jumbotron</code> <em>圆角 padding:4rem 2rem;margin-bottom:2rem;</em><ul><li><code>*</code></li></ul></li></ul></blockquote><blockquote><ul><li><code>div.jumbotron.jumbotron-fluid</code> <em>没有圆角 没有左右 padding</em><ul><li><code>div.container/.container-fluid</code><ul><li><code>*</code></li></ul></li></ul></li></ul></blockquote></li></ul><h2 id="卡片-card"><a href="#卡片-card" class="headerlink" title="卡片 .card"></a>卡片 .card</h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>.card-group</code>卡片组-无间距 / <code>.card-deck</code>卡片叠-有间距 / <code>.card-colums</code>卡片栏-竖直(左上到右下)排列<em>column-count: 3</em><ul><li><code>.card</code><ul><li><code>.card-img</code> : <code>.card-img-top</code>顶图-上圆角 / <code>.card-img-bottom</code>底图-下圆角 <code>div:not(.card-img).card-img-overlay</code>图片覆盖为背景</li><li><code>.card-header</code> : <code>card-header&gt;.card-header-tabs</code> <code>card-header&gt;.card-header-pills</code></li><li><code>*</code></li><li><code>.card-body</code><ul><li><code>.card-title</code></li><li><code>.card-subtitle</code></li><li><code>.card-text</code></li><li><code>.card-link</code></li><li><code>*</code></li></ul></li><li><code>.card-footer</code></li></ul></li></ul></li></ul></blockquote></li></ul><h2 id="媒体物件-media-gt-media-body"><a href="#媒体物件-media-gt-media-body" class="headerlink" title="媒体物件 .media &gt; * + .media-body"></a>媒体物件 .media &gt; * + .media-body</h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>.media</code><ul><li><code>*</code></li><li><code>.media-body</code></li></ul></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.media</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> -ms-flexbox<span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>  <span class="token property">-ms-flex-align</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span>  <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.media-body</span> </span><span class="token punctuation">{</span>  <span class="token property">-ms-flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote></li><li><p>自定义选项：</p><ul><li><code>.media&gt;*+.media-body&gt;*+.media&gt;*+.media-body</code> ：巢状嵌套</li><li><code>.align-self-end</code> <code>.justify-content-center</code> ：对齐</li><li><code>.media&gt;*.order-&#123;breakpoint&#125;-&#123;n&#125;</code> ：自定义排序</li><li><code>ul.list-unstyled&gt;li.media</code> ：对于 ul&gt;li 结构 增加  ul.list-unstyled，以移除任何浏览器预设清单样式</li></ul></li></ul><h2 id="—-1"><a href="#—-1" class="headerlink" title="—"></a>—</h2><h2 id="折叠-data-toggle-”collapse”"><a href="#折叠-data-toggle-”collapse”" class="headerlink" title="折叠 [data-toggle=”collapse”]"></a>折叠 [data-toggle=”collapse”]</h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>*[data-toggle=&quot;collapse&quot; data-target=&quot;#ID/.multi-Class&quot;]</code> / <code>a[data-toggle=&quot;collapse&quot; href=&quot;#ID/.multi-Class&quot;]</code> <em>会有.collapsed 第一次收起时被 js 调用添加 class_mark</em></li><li><code>*#ID.collapse(/collapsing/collapse+show) &gt; *</code> <em>默认给个 collapse 初始收起状态</em></li></ul></blockquote></li><li><p>兼容 Screenreaders： <code>[aira-expanded=&quot;false/true&quot;]</code></p></li><li><p>自定义选项：</p><ul><li><code>data-parent=false!default</code> css 选择器/DOM 元素 | 如果提供了父层，则当显示此可折叠物件时，指定父项下的所有可折叠元素将被关闭。在 collapseContent 设置。</li><li><code>data-toggle=true!default</code> boolean | 切换可折叠元素</li></ul></li><li><p>方法：</p><ul><li><code>$().collapse(&#123;键值对&#125;)</code></li><li><code>$().collapse(&#39;toggle&#39;)</code> ：将可折叠元素切换为显示或隐藏。 <strong>在可折叠元素实际显示或隐藏之前</strong>（即发生 <code>shown.bs.collapse</code> 或 <code>hidden.bs.collapse</code> 事件之前）返回到调用者。</li><li><code>$().collapse(&#39;show&#39;)</code>：显示可折叠的元素。 <strong>在可折叠元素实际显示之前</strong>（即在 <code>shown.bs.collapse</code> 事件发生之前）返回到调用者。</li><li><code>$().collapse(&#39;hide&#39;)</code>：隐藏可折叠的元素。 <strong>在可折叠元素实际上被隐藏之前返回给调用者</strong>（即在 <code>hidden.bs.collapse</code> 事件发生之前）。</li><li><code>$().collapse(&#39;dispose&#39;)</code>：销毁一个元素的折叠。</li></ul></li><li><p>事件：</p><ul><li><code>$().on(&#39;show.bs.collapse&#39;,function()&#123;当调用 show 方法时&#125;</code></li><li><code>$().on(&#39;shown.bs.collapse&#39;,function()&#123;当使用者可见折叠元素时,等待CSS转换完成后&#125;</code></li><li><code>$().on(&#39;hide.bs.collapse&#39;,function()&#123;当调用 hide 方式时&#125;</code></li><li><code>$().on(&#39;hidden.bs.collapse&#39;,function()&#123;对使用者隐藏了一个折叠元素时,等待CSS 转换完成后&#125;</code></li></ul></li></ul><h2 id="下拉选单-dropdown-gt-dropdown-toggle-data-toggle-’dropdown’-dropdown-meau-gt-dropdown-item"><a href="#下拉选单-dropdown-gt-dropdown-toggle-data-toggle-’dropdown’-dropdown-meau-gt-dropdown-item" class="headerlink" title="下拉选单 .dropdown&gt;.dropdown-toggle[data-toggle=’dropdown’] + .dropdown-meau&gt;.dropdown-item"></a>下拉选单 .dropdown&gt;.dropdown-toggle[data-toggle=’dropdown’] + .dropdown-meau&gt;.dropdown-item</h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>.dropdown/.dropup/.dropleft/.dropright</code> //方向非固定，不是此 class 的默认 dropdown，重点是 position：relative;<ul><li><code>.dropdown-toggle[data-toggle=&#39;dropdown&#39;]</code> 或 <code>* + .dropdown-toggle.dropdown-toggle-split[data-toggle=&quot;dropdown&quot;]</code></li><li><code>div.dropdown-meau</code> <em>默认下拉选单自动位于其父级的上方的 100% 及贴齐左边缘</em> 增加<code>.dropdown-mean-right</code>可居右对齐<ul><li><code>a.dropdown-item</code> , 增加<code>.active</code>使样式启用，增加<code>.disabled</code>使样式不可点击 ，</li><li><code>button.dropdown-item</code></li><li><code>*.dropdown-item-text</code> 非交互式</li></ul></li></ul></li></ul></blockquote></li><li><p>特殊选单内容 <code>.dropdown-meau &gt;</code></p><p><a href="https://jsfiddle.net/hojondo/aq9Laaew/275895/"><em>特殊下拉选单内容 jsfiddle 示例</em></a></p></li><li><p>自定义选项(在.dropdown-toggle 上)： // todo</p><ul><li><code>data-offset=0!default</code> ：dropdown-meau 相对于其目标的偏移 例：data-offset=’10,20’</li><li><code>data-flip:true!default</code> ： 允许下拉选单重叠到其相关的元素上</li><li><code>data-boundary=&#39;scrollParent&#39;!default</code></li><li><code>data-reference=&#39;toggle&#39;!default</code> 在.dropdown-toggle 上</li><li><code>data-display=&#39;dynamic!default&#39;</code></li></ul></li><li><p>方法：</p><ul><li><code>$().dropdown(&#39;toggle&#39;)</code> ： 给予导览列或分页导览使用切换下拉选单功能。</li><li><code>$().dropdown(&#39;update&#39;)</code> ： 更新下拉选单元素的定位。</li><li><code>$().dropdown(&#39;dispose&#39;)</code>：销毁一个元素的下拉选单 js 实例。</li></ul></li><li><p>事件：</p><ul><li><code>$().on(&#39;show.bs.dropdown&#39;,function()&#123;调用显示时立即触发&#125;)</code></li><li><code>$().on(&#39;shown.bs.dropdown&#39;,function()&#123;这个物件可被看见时会触发此事件(当完成 CSS 转换后)&#125;)</code></li><li><code>$().on(&#39;hide.bs.dropdown&#39;,function()&#123;调用隐藏时被立即触发&#125;)</code></li><li><code>$().on(&#39;hidden.bs.dropdown&#39;,function()&#123;这个物件隐藏后会触发此事件(当完成 CSS 转换后)&#125;)</code></li></ul></li></ul><h2 id="按钮-btn"><a href="#按钮-btn" class="headerlink" title="按钮 .btn"></a>按钮 .btn</h2><ul><li>基本结构：<ul><li>9 个样式 class<code>.btn</code>：<code>.btn-primary</code> <code>.btn-secondary</code> <code>.btn-success</code> <code>.btn-danger</code> <code>.btn-waring</code> <code>.btn-info</code> <code>.btn-light</code> <code>.btn-dark</code> <code>.btn-link</code></li><li>8 个外框 hover 按钮： <code>.btn-outline-primary</code> <code>.btn-outline-secondary</code> <code>.btn-outline-success</code> <code>.btn-outline-danger</code> <code>.btn-outline-waring</code> <code>.btn-outline-info</code> <code>.btn-outline-light</code> <code>.btn-outline-dark</code></li><li>大小：<code>.btn-sm</code> <code>.btn</code> <code>.btn-lg</code> <code>.btn-group-sm&gt;.btn</code> <code>.btn-group&gt;.btn</code> <code>.btn-group-lg&gt;.btn</code></li><li>块级：<code>.btn-blcok</code></li><li>启用/停用效果： <code>.active</code> <code>[disabled]</code>/<code>a.disabled</code></li><li>其他<code>input</code>效果： <code>div.btn-group.btn-group-toggle[data-toggle=&#39;buttons&#39;] &gt; label.btn &gt; input</code> <a href="https://jsfiddle.net/hojondo/aq9Laaew/275872/"><em>input radio 示例</em></a></li></ul></li><li>自定义选项 data-api：<ul><li>js - toggle 切换：<code>[data-toggle=&#39;button&#39;]</code></li></ul></li><li>js 方法：<ul><li><code>$().button(&#39;toggle&#39;)</code> ：切换.active 状态</li><li><code>$().button(&#39;toggle&#39;)</code> ： 销毁 button instance 示例</li></ul></li></ul><h2 id="按钮组-btn-toolbar-gt-btn-group-gt-btn"><a href="#按钮组-btn-toolbar-gt-btn-group-gt-btn" class="headerlink" title="按钮组 .btn-toolbar &gt; .btn-group &gt; .btn"></a>按钮组 .btn-toolbar &gt; .btn-group &gt; .btn</h2><ul><li>按钮工具列<code>.btn-toolbar &gt;.btn-group</code></li><li>大小：<code>.btn-group-sm</code> <code>.btn-group</code> <code>.btn-group-lg</code></li><li>巢状嵌套：<code>.btn-group &gt; .btn + .btn-group &gt; .btn</code></li><li>竖直排列：<code>.btn-group-vertical</code> <a href="https://jsfiddle.net/hojondo/aq9Laaew/275874/"><em>按钮组 示例</em></a></li></ul><h2 id="输入群组-input-group"><a href="#输入群组-input-group" class="headerlink" title="输入群组 .input-group"></a>输入群组 .input-group</h2><ul><li><p>基本结构：</p><blockquote><ul><li><p><code>div.input-group-&#123;sm/lg&#125;</code> <em>flex</em></p><ul><li><code>div.input-group-prepend</code> <em>flex</em><ul><li><code>.input-group-text</code> &gt; <code>input[type=&#39;checkbox&#39;]</code>/<code>input[type=&#39;radio&#39;]</code> <em>灰底文字+单选多选</em></li><li><code>button.btn</code> <em>按钮</em></li><li><code>.dropdown-toggle/dropdown-toggle-split</code> &amp; <code>.dropdown-menu&gt;.dropdown-item</code> <em>下拉菜单</em></li></ul></li><li><code>input.form-control / .custom-select&gt;option / .custom-file&gt;input.custom-file-input</code> <em>relative</em></li><li><code>div.input-group-append</code> <em>flex</em><ul><li><code>.input-group-text</code> &gt; <code>input[type=&#39;checkbox&#39;]</code>/<code>input[type=&#39;radio&#39;]</code></li><li><code>button.btn</code></li><li><code>.dropdown-toggle/dropdown-toggle-split</code> &amp; <code>.dropdown-menu&gt;.dropdown-item</code></li></ul></li></ul><p>都可多个一起出现</p></li></ul></blockquote></li></ul><h2 id="列表群组-list-group-gt-list-group-item-amp-data-toggle-”tab”"><a href="#列表群组-list-group-gt-list-group-item-amp-data-toggle-”tab”" class="headerlink" title="列表群组 .list-group&gt;.list-group-item &amp; [data-toggle=”tab”]"></a>列表群组 .list-group&gt;.list-group-item &amp; [data-toggle=”tab”]</h2><ul><li><p>基本结构：</p><blockquote><p><em>flex 布局 column 排列</em></p><ul><li><code>.list-group</code> &amp; <code>.list-group-flush</code>(移除边界边框和圆角)<ul><li><code>.list-group-item</code> &amp; <code>.active</code> &amp; <code>.disabled/button[disabled]</code> &amp; <code>.list-group-item-action</code>(有 hover,active,focus 效果) &amp; <code>list-group-item-&#123;primary/secondary/success/danger/warning/info/light/dark&#125;</code><ul><li><code>span.badge</code>(带角标)</li></ul></li></ul></li></ul></blockquote></li><li><p>自定义选项：</p><ul><li><code>.list-group-item[data-toggle=&quot;list&quot;][href/data-target=&quot;#xxx&quot;]</code>+<code>.tab-pane#xxx</code> tab 分页标签</li></ul></li><li><p>方法：</p><blockquote><p><code>$().tab(&#39;show&#39;)</code>：选择给定的列表项目显示其关联的分页，在 <code>shown.bs.tab</code> 事件发生之前隐藏所有其他的 panel</p><p><a href="https://jsfiddle.net/hojondo/aq9Laaew/275829/"><em>tab 示例</em></a></p></blockquote></li><li><p>事件：事件触发顺序 如 列表顺序</p><ul><li><code>$().on(&#39;hide.bs.tab&#39;,function()&#123;隐藏target[上一个元素]&#125;)</code></li><li><code>$().on(&#39;show.bs.tab&#39;,function()&#123;显示target[当前元素]&#125;)</code></li><li><code>$().on(&#39;hidden.bs.tab&#39;,function()&#123;隐藏target[上一个元素]完成。使用 event.target 和 event.relatedTarget 分别定位上一个启用选项和新启用的选项&#125;)</code></li><li><code>$().on(&#39;shown.bs.tab&#39;,function()&#123;显示target[当前元素]完成。使用 event.target 和 event.relatedTarget 来分别定位启用中和上一个启用的选项&#125;)</code></li></ul></li></ul><h2 id="表单-form-form-inline-gt-div-form-group-form-row"><a href="#表单-form-form-inline-gt-div-form-group-form-row" class="headerlink" title="表单 form.form-inline &gt; div.form-group/.form-row"></a>表单 form.form-inline &gt; div.form-group/.form-row</h2><ul><li><p>基本结构：</p><blockquote><ul><li><p><code>form&gt;</code> <em>行内表单<code>&amp;.form-inline</code></em></p><ul><li><p>表单群组：<code>div.form-group</code></p><ul><li>块级文字：<code>*.form-text</code></li><li>文本形式控制元件使用 <code>.form-control</code> 进行样式化：<code>input[type=&#39;text/email..&#39;].form-control</code> （如 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code>）</li><li>档案类型的 input，改用 <code>.form-control-file</code> 取代 <code>.form-control</code>：<code>input[type=&#39;file&#39;].form-control-file</code></li><li>设置水平可滚动的<code>input[range]</code>： <code>input[type=&#39;range&#39;].form-control-range</code></li><li>只读元素：<code>input[readonly].form-control-plaintext</code> <em>将<code>input[readonly]</code>设置灰色背景；<code>.form-control-plaintext</code>设置为纯文本的样式去边框和背景</em></li><li>单选多选元素：<code>div.form-check</code> <em>.form-check 有个 padding-left，为 checkbox 和 radio 服务</em> <code>&amp;.form-check-inline</code> 将内部元素放到同一水平行上水平样式 <em>.form-check-inline 是 inline-flex；.form-check-inline .form-check-input 是 static</em><ul><li><code>&amp;&gt;label[for=&#39;&#39;].form-check-label</code></li><li><code>&amp;&gt;input[type=&#39;checkbox/radio&#39; value=&#39;&#39;].form-check-input</code> <em>.form-check-input 是 absolute 有负值 margin-left</em></li><li><code>&amp;&gt;input[type=&#39;checkbox/radio&#39; value=&#39;&#39;].form-check-input.position-static</code> 将 <code>.form-check</code> 没有任何文字内容 label 的 input 加上 <code>.position-static</code></li></ul></li></ul></li><li><p>表单行：<code>div.row/.form-row&gt;.col</code> <em>有表单格线，可与.form-group 同级 或 子集</em></p><ul><li><code>label/legend.col-form-label</code> <em>.col-form-label-{sm/lg} 可以垂直居中行内 label</em></li><li><code>.col&gt;input.form-control</code></li></ul></li></ul></li></ul></blockquote></li><li><p>其他 class：</p><ul><li><p>设置高度<code>.form-control-lg</code> 和 <code>form-control-sm</code></p></li><li><p>验证<code>form[novalidate].was-validated *[required]:invalid/:valid + div.valid-feedback</code>：</p><blockquote><p><a href="https://jsfiddle.net/hojondo/aq9Laaew/275841/"><em>表单验证 jsfiddle 示例</em></a></p><p>需要将<code>[novalidate]</code>属性(禁用浏览器预设的回馈提示，但仍提供 JavaScript 中表单验证 API 有效)添加到 form</p><p>会验证后 在 form 添加 <code>.was-validated</code> 对子元素的<code>:invalid</code> <code>:valid</code>样式。它适用于 <code>&lt;input&gt;</code>、<code>&lt;select&gt;</code> 和 <code>&lt;textarea&gt;</code> 元素</p><p>在<code>input</code>后面 <code>div.invalid-feedback</code> 或 <code>div.invalid-tooltip</code></p><p>在 script 内 需要 `form.classList.add(‘was-validated’);``</p></blockquote></li><li><p>自定义表单</p><p><em><code>.custom-control</code> 有个<code>padding-left:1.5rem</code></em></p><p><a href="https://jsfiddle.net/hojondo/aq9Laaew/275855/">自定义选择框 jsfiddle 示例</a></p><ul><li><p>自定义单选复选框<code>div.custom-checkbox/custom-radio &gt; input[].custom-control-input + label.custom-control-label</code></p><blockquote><p><em>隐藏<code>input</code>利用<code>:checked</code>伪类对应<code>.custom-control-label::before/::after</code>显示假框,after 是个白色对号 before 是点选与否的背景</em></p><p>行内：<code>div.custom-control.custom-control-inline&#123;display: inline-flex;margin-right: 1rem;&#125;</code></p><p>禁用：给 input 加<code>[disabled]</code>。lable 会 muted 文字，input 会 color 灰色 background 透明</p></blockquote></li><li><p>自定义 select <code>select.custom-select</code></p><blockquote><p>大小：<code>custom-select-lg/sm</code></p></blockquote></li><li><p>自定义 input[range] <code>input[type=&#39;range&#39;].custom-range</code></p></li><li><p>自定义 input[file] <code>div.custom-file&gt;input[type=&#39;file&#39;].custom-file-input + label.cunstom-file-label</code></p></li></ul></li></ul></li></ul><h2 id="—-2"><a href="#—-2" class="headerlink" title="—"></a>—</h2><h2 id="小标签-badge"><a href="#小标签-badge" class="headerlink" title="小标签 .badge"></a>小标签 .badge</h2><ul><li>基本结构：<ul><li>8 个颜色样式<code>.badge</code>：<code>&amp;.badge-primary</code> <code>&amp;.badge-secondary</code> <code>&amp;.badge-success</code> <code>&amp;.badge-danger</code> <code>&amp;.badge-waring</code> <code>&amp;.badge-info</code> <code>&amp;.badge-light</code> <code>&amp;.badge-dark</code></li><li>添加胶囊样式 ：<code>&amp;.badge-pill</code> <em>padding:0 .6em;border-radius:10rem</em></li><li>字体大小 ：<code>font-size:75%</code> 和 <code>padding:.25em .4em</code> 单位使标签继承相对父元素的尺寸</li><li>预设空内容 ：<code>.badge:empty&#123;display:none&#125;</code></li><li><code>span.sr-only&#123;unread message nums&#125;</code> ：考虑支持 screenreaders</li></ul></li></ul><h2 id="进度条-progress-gt-progress-bar"><a href="#进度条-progress-gt-progress-bar" class="headerlink" title="进度条 .progress&gt;.progress-bar"></a>进度条 .progress&gt;.progress-bar</h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>.progress</code> <em>控制 height</em> <em>可以包含 n 个.progress-bar 并列</em><ul><li><code>.progress-bar</code> &amp; <code>.w-75</code> &amp; <code>bg-&#123;success/info/warning/...&#125; 背景</code>&amp;<code>.progress-bar-striped .progress-bar-animated 条纹/动态条纹</code>&amp;<code>style:width:20%</code><ul><li><code>textElement</code></li></ul></li></ul></li></ul></blockquote></li></ul><h2 id="警告-alert"><a href="#警告-alert" class="headerlink" title="警告 .alert"></a>警告 .alert</h2><ul><li>基本结构：<ul><li>8 个颜色样式<code>.alert</code>：<code>&amp;.alert-primary</code> <code>&amp;.alert-secondary</code> <code>&amp;.alert-success</code> <code>.&amp;alert-danger</code> <code>.&amp;alert-waring</code> <code>&amp;.alert-info</code> <code>&amp;.alert-light</code> <code>&amp;.alert-dark</code></li><li>8 个样式下的 <code>.alert .alert-link/.alert-heading</code> 有各自相对应的颜色</li><li>关闭按钮 ：<code>div.alert.alert-dismissible &gt; .close[data-dismiss=&#39;alert&#39;]&gt;span&#123;X&#125;</code></li></ul></li><li>触发方式：<ul><li><code>$(&#39;.alert&#39;).alert()</code> ：<em>好像压根没用</em></li><li><code>$().alert(&#39;close&#39;)</code> ：从 DOM 删除</li><li><code>$().alert(&#39;dispose&#39;)</code> ：取消一个元素的警报 （销毁 jQuery 的 alert 示例）</li></ul></li><li>事件：<ul><li><code>$().on(&#39;close.bs.alert&#39;,function()&#123;&#125;)</code>：调用 close 时会触发</li><li><code>$().on(&#39;closed.bs.alert&#39;,function()&#123;&#125;)</code> ：警报关闭后（css 转换完成时）</li></ul></li></ul><h2 id="工具提示-tooltip"><a href="#工具提示-tooltip" class="headerlink" title="工具提示 $().tooltip()"></a>工具提示 <code>$().tooltip()</code></h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>*[data-toggle=&quot;tooltip&quot;]</code>&amp;<code>[data-placement=&quot;top/right/..&quot;]</code>&amp;<code>[data-html=&quot;true&quot;]</code> <em>这里的 data-toggle 不是 data-api，单纯的人为记号</em></li><li>页面上初始化所有工具提示框 js: <code>$(&#39;[data-toggle=&quot;tooltip&quot;]&#39;).tooltip()</code></li></ul></blockquote></li><li><p>自定义选项：</p><blockquote><table><thead><tr><th>名称</th><th>类型</th><th>预设值</th><th>描述</th></tr></thead><tbody><tr><td>animation</td><td>boolean</td><td>true</td><td>将 CSS 渐变套用到工具提示框</td></tr><tr><td>container</td><td>string | element | false</td><td>false</td><td>将工具提示框加到特定元素。例如：<code>container: &#39;body&#39;</code>。 该选项特别有用，因为它允许您将触摸屏定位在触发元素附近的文字内容 - 这将防止在画面调整大小期间弹出的提示远离触发元素。</td></tr><tr><td>delay</td><td>number | object</td><td>0</td><td>显示和隐藏弹出提示框的延迟（ms） - 不适用于手动触发类型如果提供了一个数字，则将延迟应用于隐藏/显示物件结构是：<code>delay: &#123; &quot;show&quot;: 500, &quot;hide&quot;: 100 &#125;</code></td></tr><tr><td>html</td><td>boolean</td><td>false</td><td>在工具提示框中允许 HTML 如果为 true，工具提示框的 <code>title</code> 中的 HTML 标签将在工具提示框中呈现。 如果为 false，则将使用 jQuery 的 <code>text</code>方法将内容插入到 DOM 中。如果您担心 XSS 攻击，请使用文字。</td></tr><tr><td>placement</td><td>string | function</td><td>‘top’</td><td>如何定位工具提示框 - auto | top | bottom | left | right。 指定 <code>auto</code> 时，将动态重新定位工具提示框。当函数用于确定位置时，将使用工具提示框 DOM 节点作为其第一个参数并将触发元素 DOM 节点作为其第二个参数来调用。 <code>this</code> 将被设为弹出提示框实例。</td></tr><tr><td>selector</td><td>string | false</td><td>false</td><td>如果提供了选择器，工具提示框将被委派给指定的目标。实际上，这用于动态 HTML 来扩增工具提示物件。 请参阅<a href="https://github.com/twbs/bootstrap/issues/4215">此 </a>和 <a href="https://jsbin.com/zopod/1/edit">一个讯息范例</a>。</td></tr><tr><td>template</td><td>string</td><td><code>&#39;&lt;div class=&quot;tooltip&quot; role=&quot;tooltip&quot;&gt;&lt;div class=&quot;arrow&quot;&gt;&lt;/div&gt;&lt;div class=&quot;tooltip-inner&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#39;</code></td><td>创建工具提示框时使用的基本 HTML 工具提示框的 <code>title</code> 将被注入到 <code>.tooltip-inner</code> 中。<code>.arrow</code> 将成为工具提示框的箭头。最外层的包装元素应该有 <code>.tooltip</code> 及 <code>role=&quot;tooltip&quot;</code>。</td></tr><tr><td>title</td><td>string | element | function</td><td>‘’</td><td>如果 <code>title</code> 属性不存在，则为预设标题值。如果给出一个函数，它将被调用，其 <code>this</code> 引用设置为工具提示框附加到的元素。</td></tr><tr><td>trigger</td><td>string</td><td>‘hover focus’</td><td>如何触发工具提示框 - click | hover | focus | manual。 您可以传递多个触发器；将它们与空格分开。<code>manual</code> 不能与任何其他触发器组合。<code>&#39;manual&#39;</code> 表示工具提示框将透过 <code>.tooltip(&#39;show&#39;)</code>、<code>.tooltip(&#39;hide&#39;)</code> 及 <code>.tooltip(&#39;toggle&#39;)</code> 的方法触发，这个值不能与其它的触发器做组合。<code>&#39;hover&#39;</code> 将导致键盘无法触发工具提示框，只能做为使用键盘用户传递讯息的替代方法。 </td> </tr></td></tr><tr><td>offset</td><td>number | string</td><td>0</td><td>工具提示框相对于其目标的偏移。更多信息，请参阅 Popper.js 的 <a href="https://popper.js.org/popper-documentation.html#modifiers..offset.offset">偏移文档</a>。</td></tr><tr><td>fallbackPlacement</td><td>string | array</td><td>‘flip’</td><td>指定工具提示框将在调回时使用哪个位置。 有关更多信息，请参阅 Popper.js 的 <a href="https://popper.js.org/popper-documentation.html#modifiers..flip.behavior">行为文档</a></td></tr><tr><td>boundary</td><td>string | element</td><td>‘scrollParent’</td><td>Overflow constraint boundary of the tooltip. Accepts the values of <code>&#39;viewport&#39;</code>, <code>&#39;window&#39;</code>, <code>&#39;scrollParent&#39;</code>, or an HTMLElement reference (JavaScript only). For more information refer to Popper.js’s <a href="https://popper.js.org/popper-documentation.html#modifiers..preventOverflow.boundariesElement">preventOverflow docs</a>.</td></tr></tbody></table></blockquote></li><li><p>方法：</p><ul><li><code>$().tooltip(&#123;&#125;)</code> ：自定义创建 tooltip</li><li><code>$().tooltip(&#39;show&#39;)</code> ： “手动” 显示工具提示框。在 <code>shown.bs.tooltip</code> 事件发生之前</li><li><code>$().tooltip(&#39;hide&#39;)</code> ： “手动” 隐藏工具提示框。在 <code>hidden.bs.tooltip</code> 事件发生之前</li><li><code>$().tooltip(&#39;toggle&#39;)</code> ：”手动”切换工具提示框。在 <code>shown.bs.tooltip</code> 或 <code>hidden.bs.tooltip</code> 事件发生之前</li><li><code>$().tooltip(&#39;dispose&#39;)</code> ：隐藏和破坏元素的工具提示框。 使用 自定义创建[data-toggle=”tooltip”]的工具提示框 不能在后代触发元素上单独销毁</li><li><code>$().tooltip(&#39;enable&#39;)</code> ：给一个元素的工具提示框显示的功能，<em>Tooltips are enabled by default</em></li><li><code>$().tooltip(&#39;disable&#39;)</code> ：删除元素的工具提示框的显示功能。只有在重新启用后，才能显示工具提示框</li><li><code>$().tooltip(&#39;toggleEnabled&#39;)</code> ：切换可以显示或隐藏元素的功能</li><li><code>$().tooltip(&#39;update&#39;)</code> ：更新提示框的位置</li></ul></li><li><p>事件：</p><ul><li><code>$().on(&#39;show.bs.tooltip&#39;, function () &#123;当调用 show 实例方法时，此事件会立即触发&#125;)</code></li><li><code>$().on(&#39;shown.bs.tooltip&#39;, function () &#123;当工具提示框显示后，会触发此事件（待CSS转换完成）&#125;)</code></li><li><code>$().on(&#39;hide.bs.tooltip&#39;, function () &#123;当调用 hide 实例方法时，会立即触发此事件&#125;)</code></li><li><code>$().on(&#39;hidden.bs.tooltip&#39;, function () &#123;当工具提示框对隐藏后，会触发此事件（待CSS转换完成）&#125;)</code></li><li><code>$().on(&#39;inserted.bs.tooltip&#39;, function () &#123;将工具提示框范本加到 DOM 后，会在 show.bs.tooltip事件后 shown.bs.tooltip事件前 触发此事件&#125;)</code></li></ul></li></ul><h2 id="弹出框-popover"><a href="#弹出框-popover" class="headerlink" title="弹出框 $().popover()"></a>弹出框 <code>$().popover()</code></h2><ul><li><p>基本结构：</p><blockquote><ul><li><code>[data-toggle=&quot;popover&quot;]</code>&amp;<code>[data-content=&quot;&quot;]</code>&amp;<code>[data-trigger=&quot;&quot;]</code></li><li><code>$(&#39;[data-toggle=&quot;popover&quot;]&#39;).popover()</code></li></ul></blockquote></li><li><p>自定义选项：相比于 <code>tooltip</code>多的<code>content</code>和有差别的<code>template</code> <code>trigger</code></p><blockquote><table><thead><tr><th>名称</th><th>类型</th><th>预设</th><th>描述</th></tr></thead><tbody><tr><td>content</td><td>string | element | function</td><td>‘’</td><td>如果 <code>data-content</code> 属性不存在，则为预设内容值。如果给出一个函数，它将被调用，其<code>this</code> 引用设置为弹出提示框附加到的元素。</td></tr><tr><td>template</td><td>string</td><td><code>&#39;&lt;div class=&quot;popover&quot; role=&quot;tooltip&quot;&gt;&lt;div class=&quot;arrow&quot;&gt;&lt;/div&gt;&lt;h3 class=&quot;popover-header&quot;&gt;&lt;/h3&gt;&lt;div class=&quot;popover-body&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#39;</code></td><td>创建动态提示框时使用的基本 HTML 动态提示框的 <code>title</code> 将被注入到 <code>.popover-header</code> 中。动态提示框的 <code>content</code> 将被注入到 <code>.popover-body</code> 中。<code>.arrow</code> 将成为动态提示框的箭头。最外层的包装元素应该有 <code>.popover</code>。</td></tr><tr><td>trigger</td><td>string</td><td>‘click’</td><td>如何触发动态提示框 - click | hover | focus | manual。 您可以传递多个触发器；将它们与空格分开。<code>manual</code> 不能与任何其他触发器组合。</td></tr></tbody></table></blockquote></li><li><p>方法：同 [tooltip](#工具提示 <code>$().tooltip()</code>)</p></li><li><p>事件：同 [tooltip](#工具提示 <code>$().tooltip()</code>)</p></li></ul><h2 id="模态框-modal"><a href="#模态框-modal" class="headerlink" title="模态框 .modal"></a>模态框 .modal</h2><ul><li>基本结构：</li></ul><blockquote><ul><li><code>*[data-toggle=&quot;modal&quot;][href/data-target=&quot;#xxx&quot;]</code></li><li><code>div#xxx.modal[tabindex=&quot;-1&quot;]</code> &amp; <code>.fade</code>(加淡入淡出动画)<ul><li><code>div.modal-dialog</code> &amp; <code>.modal-dialog-centered</code>(垂直居中) &amp; <code>.modal-lg/sm</code>(大小框)<ul><li><code>div.modal-content</code><ul><li><code>div.modal-header</code><ul><li><code>.modal-title</code></li><li><code>.close[data-dismiss=&quot;modal&quot;]&gt;span&#123;&amp;times;&#125;</code> <em>关闭按钮 data-dismiss=”modal”</em></li></ul></li><li><code>div.modal-body</code></li><li><code>div.modal-footer</code></li></ul></li></ul></li></ul></li></ul></blockquote><blockquote><p>显示 Modal 时，给 body 加<code>modal-open&#123;overflow:hidden&#125;</code>禁止滚动，同时<code>body.append(&#39;div.modal-backdrop&#39;)</code> <em>阴影背景的 z-index 是 1040,modal 的 z-index 是 1050</em></p><p><code>[data-toggle=&quot;popover&quot; ]</code> <code>[data-toggle=tooltip]</code>也可以放在<code>.modal</code>里面，modal 关闭状态时也会自动把前者关闭；</p><p>通过事件<code>show.bs.modal</code>和<code>event.relatedTarget</code>可以拿到动态显示<code>modal</code>内容；</p><p><em>tabindex 负一使键盘 tab 操作无效</em></p></blockquote><ul><li><p>方法：</p><ul><li><code>$(&#39;.modal&#39;).modal(&#123;&#125;)</code><ul><li><code>backdrop : 默认true</code> <em>包括动态视窗背景元素。或者指定 <code>static[string]</code> 在点击背景时不关闭动态视窗</em></li><li><code>keyboard : 默认true</code> <em>按下 ESC 时关闭动态视窗</em></li><li><code>focus : 默认true</code> <em>初始化时 focus 动态视窗</em></li><li><code>show : 默认true</code> <em>初始化时就显示 modal</em></li></ul></li><li><code>$().modal(&quot;show&quot;)</code></li><li><code>$().modal(&quot;hide&quot;)</code></li><li><code>$().modal(&quot;toggle&quot;)</code> ： 切换 modal 显示隐藏</li><li><code>$().modal(&quot;handleUpdate&quot;)</code> ： 如果动态视窗在打开状态（比如在出现滚动条的情况下）时重新改变高度，则重新调整动态视窗的左右位置<em>因为滚动条出现与否会影响文档的居中判定使其自动根据滚动条重新居中，此方法可以让 modal 回到一打开时的左右位置</em>。</li><li><code>$().modal(&quot;dispose&quot;)</code> ： 销毁一个元素的 modal <em>对所有的 dispose 来说，都只对 DOM 中当前存在的元素进行操作，即：modal.display=block 时可以销毁，none 时不识别</em></li></ul></li><li><p>事件：</p><ul><li><code>$().on(&#39;show.bs.modal&#39;, function (e) &#123;当调用 show 实例方法时，此事件会立即触发。如果是因点击，点击的元素作为事件的 relatedTarget 属性可用&#125;)</code></li><li><code>$().on(&#39;shown.bs.modal&#39;, function (e) &#123;当动态视窗显示时会触发此事件（等待 CSS 转换完成）。如果是因点击导致，点击的元素作为事件的 relatedTarget 属性可用&#125;)</code></li><li><code>$().on(&#39;hide.bs.modal&#39;, function (e) &#123;当调用 hide 实例方法时，会立即触发此事件&#125;)</code></li><li><code>$(&#39;.modal&#39;).on(&#39;hidden.bs.modal&#39;, function (e) &#123;当动态视窗隐藏后会触发此事件（等 CSS 转换完成）&#125;)</code></li></ul></li></ul><h1 id="Utilities-通用类别"><a href="#Utilities-通用类别" class="headerlink" title="Utilities 通用类别"></a>Utilities 通用类别</h1><h2 id="网格-container-gt-row-gt-col-breakpoint-1-12"><a href="#网格-container-gt-row-gt-col-breakpoint-1-12" class="headerlink" title="网格 .container &gt; .row &gt; .col-{breakpoint}-{1~12}"></a>网格 .container &gt; .row &gt; .col-{breakpoint}-{1~12}</h2><p>用 flexbox 网格来建立符合各种尺寸的网页排版，包含<em>十二栏</em>系统、预设的<em>五个响应式断点</em>、<em>Sass 变量</em>和 _mixins_、以及很多预定义的 <em>class</em></p><ul><li>十二栏系统：col-12 , col-6 , col-4…</li><li>五个断点：col-（&lt;576px）, col-sm-（≥576px）, col-md-（≥768px） , col-lg-（≥992px） , col-xl-（≥1200px） <strong>基于最小高度 col 向上 col-xl 适用</strong></li><li>预定义的 class：<ul><li><code>col-&#123;breakpoint&#125;</code> ：从  <code>xs</code>  到  <code>xl</code> 对于无单位的 class 如 col-md，每一栏将具有相同的宽度</li><li><code>col-&#123;breakpoint&#125;-5</code> ：设置一栏宽度，其它栏都将重新调整大小平分剩余（的 12-5=7）</li><li><code>col-&#123;breakpoint&#125;-auto</code> ：基于栏内容的<strong>自然宽度</strong> _比如文字长度_，可使用   自动调整栏的大小</li><li><code>.col.offset-&#123;breakpoint&#125;-&#123;n&#125;</code> ：向右移动列，通过{n}增加左边距</li><li><code>.col.ml/mr-&#123;breakpoint&#125;-auto</code> || <code>.col.ml/mr-&#123;breakpoint&#125;-&#123;0~5&#125;</code> ：向左右添加 margin<em>0, 0.25rem, 0.5rem, 1rem, 1.5rem, 3rem</em></li><li><code>.row&gt;.col+.row</code> ：可以嵌套并且每个 row 内都是 12 单位</li><li><code>.row&gt;*+div.w-100+*</code> ：可在 row 内中间加入，强制一 row 占多行，同时可以设置 <code>d-&#123;breakpoint&#125;-&#123;value&#125;</code>控制显示隐藏 <a href="https://jsfiddle.net/hojondo/aq9Laaew/275786/"><em>jsfiddle 示例</em></a></li><li>垂直对齐： row：以最上对齐<code>align-items-start</code> 以 垂直居中<code>align-items-center</code> 以最下对齐<code>align-items-end</code>；col：<code>align-self-start</code> <code>align-self-center</code> <code>align-self-end</code></li><li>水平对齐： row：以最左对齐<code>justify-content-start</code> 以水平居中<code>justify-content-center</code> 以最右对齐<code>justify-content-end</code> 项目之间的间隔都相等<code>justify-content-center</code> 项目两侧的间隔都相等<code>justify-content-end</code>；<a href="https://jsfiddle.net/hojondo/aq9Laaew/275780/"><em>jsfiddle 示例</em></a></li><li><code>.row.no-gutters</code>移除 row 的负 margin，移除 col 之间的 padding</li><li>排序 <code>.col.order-&#123;breakpoint&#125;-&#123;n&#125;</code> ：数字越大 越靠后，未设置的默认<code>0</code> ，<code>order-&#123;breakpoint&#125;-first</code>等价于<code>-1</code>最前 <code>order-&#123;breakpoint&#125;-last</code>等价于<code>13</code>最后。</li></ul></li><li>重定义 sass 变量：略</li><li>重定义 mixins 函数：略</li></ul><h2 id="表格-table"><a href="#表格-table" class="headerlink" title="表格.table"></a>表格.table</h2><ul><li>table 选项 ：统一样式 <code>table.table</code><ul><li><code>table.table-bordered</code> 给 table 四周添加边框</li><li><code>table.table-borderless</code> table 无边框</li><li><code>table.table-hover</code> 给 tbody 下的 row 添加 hover 效果</li><li><code>table.table-sm</code> 将 padding 缩小</li><li>语义化颜色区别 <em>在 table，tr 或 td/th 都可</em> <a href="https://jsfiddle.net/hojondo/aq9Laaew/275809/"><em>table 颜色 jsfiddle 示例</em></a><ul><li><code>table-active</code></li><li><code>table-primary</code></li><li><code>table-secondary</code></li><li><code>table-success</code></li><li><code>table-danger</code></li><li><code>table-warning</code></li><li><code>table-info</code></li><li><code>table-light</code></li><li><code>table-dark</code></li></ul></li><li>在父级响应式： <code>div.table-responsive&gt;table</code> <code>div.table-responsive-sm/md/lg/xl&gt;table</code></li></ul></li><li>thead 选项：<code>thead.thead-dark</code> 或 <code>thead.thead-light</code></li><li>tbody 选项：<code>table.table-striped</code> 给 tbody 斑马纹</li><li>caption 样式：<code>css&#123;caption-side: bottom;&#125;</code></li></ul><h2 id="—-3"><a href="#—-3" class="headerlink" title="—"></a>—</h2><h2 id="定位-position-static-relative-absolute-fixed-sticky-fixed-top-bottom-sticky-top"><a href="#定位-position-static-relative-absolute-fixed-sticky-fixed-top-bottom-sticky-top" class="headerlink" title="定位 .position-static/relative/absolute/fixed/sticky, .fixed-top/bottom, .sticky-top"></a>定位 .position-static/relative/absolute/fixed/sticky, .fixed-top/bottom, .sticky-top</h2><p><code>.position-static</code> <code>.position-relative</code> <code>.position-absolute</code> <code>.position-fixed</code> <code>.position-sticky</code></p><p><code>.fixed-top</code> <code>.fixed-bottom</code></p><p><code>.sticky-top</code> <a href="https://jsfiddle.net/hojondo/aq9Laaew/275806/"><em>粘性布局 jsfiddle 示例</em></a></p><h2 id="浮动-float-breakpoint-left-right-none"><a href="#浮动-float-breakpoint-left-right-none" class="headerlink" title="浮动 .float-{breakpoint}-left/right/none"></a>浮动 .float-{breakpoint}-left/right/none</h2><p><code>.float-&#123;breakpoint&#125;-left</code> <code>.float-&#123;breakpoint&#125;-right</code> <code>.float-&#123;breakpoint&#125;-none</code></p><h2 id="清除浮动-clearfix"><a href="#清除浮动-clearfix" class="headerlink" title="清除浮动 .clearfix"></a>清除浮动 .clearfix</h2><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="垂直对齐方式-align"><a href="#垂直对齐方式-align" class="headerlink" title="垂直对齐方式 .align-"></a>垂直对齐方式 .align-</h2><blockquote><p>垂直对齐仅影响 inline、inline-block、inline-table、和 table 元素</p><p><a href="https://jsfiddle.net/hojondo/aq9Laaew/275815/"><em>table 对齐示例</em></a></p><p><code>默认.align-baseline</code> <code>.align-top</code> <code>.align-middle</code> <code>.align-bottom</code> <code>.align-text-bottom</code> <code>.align-text-top</code></p></blockquote><h2 id="—-4"><a href="#—-4" class="headerlink" title="—"></a>—</h2><h2 id="可见性-visible-invisible"><a href="#可见性-visible-invisible" class="headerlink" title="可见性 .visible, .invisible"></a>可见性 .visible, .invisible</h2><p><code>.visible</code> = <code>visibility: visible</code>;</p><p><code>.invisible</code> = <code>visibility: hidden</code></p><h2 id="display-d-breakpoint-value"><a href="#display-d-breakpoint-value" class="headerlink" title="display .d-{breakpoint}-{value}"></a>display .d-{breakpoint}-{value}</h2><ul><li>breakpoint 取值：xs sm md lg xl 都可，<code>.d-&#123;value&#125;</code> 代表 xs</li><li>value 取值：<code>none</code> <code>inline</code> <code>inline-block</code> <code>block</code> <code>table</code> <code>table-cell</code> <code>table-row</code> <code>flex</code> <code>inline-flex</code></li><li><em>补充</em> print 打印设置：<code>.d-print-none</code> <code>.d-print-inline</code> <code>.d-print-inline-block</code> <code>.d-print-block</code> <code>.d-print-table</code> <code>.d-print-table-row</code> <code>.d-print-table-cell</code> <code>.d-print-flex</code> <code>.d-print-inline-flex</code></li></ul><h2 id="尺寸-w-h"><a href="#尺寸-w-h" class="headerlink" title="尺寸 .w-{} .h-{}"></a>尺寸 .w-{} .h-{}</h2><p><code>.w-25</code> <code>.w-50</code> <code>.w-75</code> <code>.w-100</code> <code>.w-auto</code> <code>.mw-100</code>/max-width:100%;</p><p><code>.h-25</code> <code>.h-50</code> <code>.h-75</code> <code>.h-100</code> <code>.h-auto</code> <code>.mh-100</code>/max-height:100%;</p><h2 id="间隔-m-p"><a href="#间隔-m-p" class="headerlink" title="间隔 .m-{} .p-{}"></a>间隔 .m-{} .p-{}</h2><ul><li>margin ：<code>.m / mx/my / mt/mb/ml/mr-&#123;breakpoint&#125;-&#123;0-5/auto&#125;</code></li><li>padding：<code>.p / px/py / pt/pb/pl/pr-&#123;breakpoint&#125;-&#123;0-5/auto&#125;</code></li></ul><h2 id="边框-border"><a href="#边框-border" class="headerlink" title="边框 .border"></a>边框 .border</h2><ul><li>加边：<code>.border</code> <code>.border-top</code> <code>.border-right</code> <code>.border-bottom</code> <code>.border-left</code></li><li>去边：<code>.border-0</code> <code>.border-top-0</code> <code>.border-right-0</code> <code>.border-bottom-0</code> <code>.border-left-0</code></li><li>颜色：<code>.border-primary</code> <code>.border-secondary</code> <code>.border-success</code> <code>.border-danger</code> <code>.border-warning</code> <code>.border-info</code> <code>.border-light</code> <code>.border-dark</code> <code>.border-white</code></li><li>圆角：<code>.rounded</code> <code>.rounded-top</code> <code>.rounded-right</code> <code>.rounded-bottom</code> <code>.rounded-left</code> <code>.rounded-circle</code> <code>.rounded-0</code></li></ul><h2 id="弹性布局-Flex-d-value-flex-d-value-inline-flex-属于-display-分类"><a href="#弹性布局-Flex-d-value-flex-d-value-inline-flex-属于-display-分类" class="headerlink" title="弹性布局 Flex .d-{value}-flex, .d-{value}-inline-flex (属于 display 分类)"></a>弹性布局 Flex .d-{value}-flex, .d-{value}-inline-flex (属于 display 分类)</h2><p>内容较多 见 <a href="https://bootstrap.hexschool.com/docs/4.1/utilities/flex/">flex - 通用类别 - 六角学院</a></p><ul><li>方向性：<ul><li>水平 - 默认左到右<code>.flex-&#123;breakpoint&#125;-row</code> 或者 右到左<code>.flex-&#123;breakpoint&#125;-row-reverse</code></li><li>竖直 - 上到下<code>.flex-&#123;breakpoint&#125;-colum</code> 或者 下到上<code>flex-&#123;breakpoint&#125;-colum-reverse</code></li></ul></li><li>对齐方式：<ul><li>主轴上<code>.justify-content</code> - (row 是横 x)：<code>.justify-content-&#123;breakpoint&#125;-start</code> <code>.justify-content-&#123;breakpoint&#125;-end</code> <code>.justify-content-&#123;breakpoint&#125;-center</code> <code>.justify-content-&#123;breakpoint&#125;-between</code> <code>.justify-content-&#123;breakpoint&#125;-around</code></li><li>侧轴上<code>.align-items</code> - (row 是竖 y)：<code>.align-items-&#123;breakpoint&#125;-start</code> <code>.align-items-&#123;breakpoint&#125;-end</code> <code>.align-items-&#123;breakpoint&#125;-center</code> <code>.align-items-&#123;breakpoint&#125;-baseline</code> <code>.align-items-&#123;breakpoint&#125;-stretch</code></li></ul></li><li>wrap：<code>.flex-&#123;breakpoint&#125;-nowrap</code>、<code>.flex-&#123;breakpoint&#125;-wrap</code>、<code>.flex-&#123;breakpoint&#125;-wrap-reverse</code></li><li>多行对齐：<code>.align-content-start</code> <code>.align-content-end</code> <code>.align-content-center</code> <code>.align-content-around</code> <code>.align-content-stretch</code></li><li>自身对齐 _在.flex-item 上 覆盖.felx 的 align-items 属性_：<code>.align-self-&#123;breakpoint&#125;-start</code> <code>.align-self-&#123;breakpoint&#125;-end</code> <code>.align-self-&#123;breakpoint&#125;-center</code> <code>.align-self-&#123;breakpoint&#125;-baseline</code> <code>.align-self-&#123;breakpoint&#125;-stretch</code> <em>对.flex-item</em></li><li>填满：<code>.flex-fill</code> <code>.flex-sm-fill</code> <code>.flex-md-fill</code> <code>.flex-lg-fill</code> <code>.flex-xl-fill</code> <em>对.flex-item 强制 flex: 1 1 auto</em></li><li>伸缩值：<code>.flex-&#123;breakpoint&#125;-&#123;grow|shrink&#125;-0</code> <code>.flex-&#123;breakpoint&#125;-&#123;grow|shrink&#125;-1</code> <em>对.flex-item</em></li><li>margins：也支持 margin 类别的 <code>ml/mr/mx/my-&#123;breakpoint&#125;-auto</code> <code>ml/mr/mx/my-&#123;breakpoint&#125;-&#123;0~5&#125;</code> <em>对.flex-item</em></li><li>排序 ：<code>.order-&#123;breakpoint&#125;-&#123;0~12&#125;</code> <code>order-&#123;breakpoint&#125;-first</code>等价于<code>-1</code>， <code>order-&#123;breakpoint&#125;-last</code>等价于<code>13</code> <em>对.flex-item</em></li></ul><h2 id="—-5"><a href="#—-5" class="headerlink" title="—"></a>—</h2><h2 id="代码块-code-pre-kbd"><a href="#代码块-code-pre-kbd" class="headerlink" title="代码块 code, pre, kbd"></a>代码块 code, pre, kbd</h2><ul><li><code>code</code> <em>word-break:break-word</em></li><li><code>pre</code> <em>font-size:87.5%;color:#212529</em></li><li><code>kbd</code> <em>font-size:87.5%;background-color:#212529;border-radius:0.2rem</em></li></ul><h2 id="文字-text"><a href="#文字-text" class="headerlink" title="文字 .text-"></a>文字 .text-</h2><ul><li>对齐 ：<code>.text-&#123;breakpoint&#125;-left</code> <code>.text-&#123;breakpoint&#125;-center</code> <code>.text-&#123;breakpoint&#125;-right</code> <code>.text-justify</code></li><li>换行：<code>.text-nowrap</code></li><li>省略：<code>.d-[inline-]block.text-truncate</code> <em>源码：overflow:hidden;text-overflow:ellipsis;white-space:nowrap</em></li><li>大小写：<code>.text-uppercase</code> <code>.text-lowercase</code> <code>.text-capitalize</code>(仅改变 每个词首字母)</li><li>字体粗细斜体：<code>.font-weight-light</code> <code>.font-weight-normal</code> <code>.font-weight-bold</code> <code>.font-italic</code></li><li>等宽字体：<code>.text-monospace</code> <em>font-family: SFMono-Regular, Menlo, Monaco, Consolas, “Liberation Mono”, “Courier New”, monospace;</em></li><li>文字排版<ul><li><code>h1-h6</code> 和 <code>.h1-.h6</code> ：reset 重定义样式</li><li><code>h&#123;1-6&#125;&gt;small.text-mute</code> ：二级小标题</li><li><code>.display-&#123;1-4&#125;</code> ：突出一个标题，在<code>font-size,font-weight,line-height</code>3 个属性上不同程度放大</li><li><code>.lead</code> ：字体放大<code>font-size:1.5rem,font-weight:300</code></li><li><code>.initialism</code> ：字体缩小 <code>font-size:90%;text-transform:uppercase</code></li><li><code>media-query&#123; html &#123;font-size:xx&#125;&#125;</code> ：响应式对全局文字大小设置</li><li><code>.blockquote</code> <code>cite</code>引用块</li><li><code>ul.list-unstyle</code> 对 ul 和 ul&gt;li 继承<code>list-style: none</code></li><li><code>ul.list-inline&gt;li.list-inline-item</code> 横排导航栏</li><li><code>dl&gt;dt+dd</code> 的并列对齐 可以用<code>.row&gt;col</code>实现</li></ul></li></ul><h2 id="图片-img"><a href="#图片-img" class="headerlink" title="图片.img-"></a>图片.img-</h2><ul><li>响应式图片 <code>.img-fluid</code> : <code>max-width:100%;height:auto;</code></li><li>缩略图 <code>.img-thumbnail</code> : 有<code>padding border border-radius background-color</code>设置</li><li>对齐图片 <code>.float-left/right</code> 居中：<code>.text-center&gt;img , .mx-auto</code></li></ul><h2 id="图片区-figure"><a href="#图片区-figure" class="headerlink" title="图片区 .figure"></a>图片区 .figure</h2><p>使用内建的 <code>figure.figure</code>、 <code>figure&gt;img.figure-img</code> 和 <code>figure&gt;caption.figure-caption</code> 类别，应用内建样式。其中.figure{display:inline-block;}</p><h2 id="—-6"><a href="#—-6" class="headerlink" title="—"></a>—</h2><h2 id="颜色-text-bg-bg-gradient"><a href="#颜色-text-bg-bg-gradient" class="headerlink" title="颜色 .text-{}, .bg-{}, .bg-gradient-{}"></a>颜色 .text-{}, .bg-{}, .bg-gradient-{}</h2><ul><li>13 个<code>.text-</code>：<code>.text-primary</code> <code>.text-secondary</code> <code>.text-success</code> <code>.text-danger</code> <code>.text-waring</code> <code>.text-info</code> <code>.text-light</code> <code>.text-dark</code> <code>.text-white</code> <code>.text-body</code> <code>.text-muted</code> <code>.text-black-50</code> <code>.text-white-50</code></li><li>10 个<code>.bg-</code>： <code>.bg-primary</code> <code>.bg-secondary</code> <code>.bg-success</code> <code>.bg-danger</code> <code>.bg-waring</code> <code>.bg-info</code> <code>.bg-light</code> <code>.bg-dark</code> <code>.bg-white</code> <code>.bg-transparent</code></li><li>8 个<code>.bg-gradient-</code>： <code>.bg-gradient-primary</code> <code>.bg-gradient-secondary</code> <code>.bg-gradient-success</code> <code>.bg-gradient-danger</code> <code>.bg-gradient-waring</code> <code>.bg-gradient-info</code> <code>.bg-gradient-light</code> <code>.bg-gradient-dark</code> ……<em>渐变背景注意 bootstrap：默认不启用,需要在自己的 scss import bootstrap 之前<code>$enable-gradients: true;</code></em></li></ul><h2 id="阴影-shadow"><a href="#阴影-shadow" class="headerlink" title="阴影 .shadow"></a>阴影 .shadow</h2><p><em>对组件 component 来说 默认不启用预设阴影 ,需要在 import bootstrap 之前 $enable-shadows:true;</em></p><p><code>.shadow-none</code> .<code>shadow-sm</code> <code>.shadow</code> <code>.shadow-lg</code> 阴影逐步变大变明显</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.shadow-none</span> </span><span class="token punctuation">{</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> none <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.shadow-sm</span> </span><span class="token punctuation">{</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0.125</span>rem <span class="token number">0.25</span>rem <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.075</span><span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.shadow</span> </span><span class="token punctuation">{</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0.5</span>rem <span class="token number">1</span>rem <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.15</span><span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.shadow-lg</span> </span><span class="token punctuation">{</span>  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">1</span>rem <span class="token number">3</span>rem <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0.175</span><span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="关闭图标-close-gt-span-times"><a href="#关闭图标-close-gt-span-times" class="headerlink" title="关闭图标 .close&gt;span{&times;}"></a>关闭图标 .close&gt;span{&times;}</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span> <span class="token attr-name">aria-label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">aria-hidden</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&times;">&amp;times;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span></code></pre><h2 id="响应式嵌入内容-div-embed-responsive-value-gt-embed-responsive-item"><a href="#响应式嵌入内容-div-embed-responsive-value-gt-embed-responsive-item" class="headerlink" title="响应式嵌入内容 div.embed-responsive-{value} &gt; .embed-responsive-item"></a>响应式嵌入内容 div.embed-responsive-{value} &gt; .embed-responsive-item</h2><p>用于 <iframe>, <embed>, <video>, 和 <object></p><p>长宽比 4 种选项 <code>.embed-responsive.embed-responsive-21by9/16by9/4by3/1by1</code></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 21:9 aspect ratio --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>embed-responsive embed-responsive-21by9<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>embed-responsive-item<span class="token punctuation">"</span></span>    <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.youtube.com/embed/zpOULjyy-n8?rel<span class="token punctuation">=</span>0<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="屏幕阅读器-screenreaders-sr-only-sr-only-focusable"><a href="#屏幕阅读器-screenreaders-sr-only-sr-only-focusable" class="headerlink" title="屏幕阅读器 screenreaders .sr-only, .sr-only-focusable"></a>屏幕阅读器 screenreaders .sr-only, .sr-only-focusable</h2><blockquote><p>是指 对阅读障碍者友好的 设备适配 （一种可将文字、图形以及电脑接口的其他部分转换成语音及/或点字的软件）</p></blockquote><p><code>.sr-only</code> 正常隐藏 只在荧幕阅读器上显示</p><p><code>.sr-only-focusable</code> 正常隐藏 只在萤幕屏幕上显示 或者 被 focus/active 的时候显示</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UI库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue</title>
      <link href="/2019/09/19/bi-ji-vue/"/>
      <url>/2019/09/19/bi-ji-vue/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="什么是-Vue-js"><a href="#什么是-Vue-js" class="headerlink" title="什么是 Vue.js"></a>什么是 Vue.js</h3><ul><li><p>Vue.js 是目前最火的一个前端框架，React 是最流行的一个前端框架（React 除了开发网站，还可以开发手机 App， Vue 语法也是可以用于进行手机 App 开发的，需要借助于 Weex）</p></li><li><p>Vue.js 是前端的<strong>主流框架之一</strong>，和 Angular.js、React.js 一起，并成为前端三大主流框架！</p></li><li><p>Vue.js 是一套构建用户界面的框架，<strong>只关注视图层</strong>，它不仅易于上手，还便于与第三方库或既有项目整合。（Vue 有配套的第三方类库，可以整合起来做大型项目的开发）</p></li><li><p>前端的主要工作？主要负责 MVC 中的 V 这一层；主要工作就是和界面打交道，来制作前端页面效果；</p></li></ul><h3 id="为什么要学习流行框架-提高开发的效率"><a href="#为什么要学习流行框架-提高开发的效率" class="headerlink" title="为什么要学习流行框架 - 提高开发的效率"></a>为什么要学习流行框架 - 提高开发的效率</h3><ul><li>提高开发效率的发展历程：原生 JS -&gt; Jquery 之类的类库 -&gt; 前端模板引擎 -&gt; Angular.js / Vue.js（能够帮助我们减少不必要的 DOM 操作；提高渲染效率；双向数据绑定的概念【通过框架提供的指令，我们前端程序员只需要关心数据的业务逻辑，不再关心 DOM 是如何渲染的了】）</li><li>在 Vue 中，一个核心的概念，就是让用户不再操作 DOM 元素，解放了用户的双手，让程序员可以更多的时间去关注业务逻辑；</li></ul><h3 id="框架和库的区别"><a href="#框架和库的区别" class="headerlink" title="框架和库的区别"></a>框架和库的区别</h3><ul><li>框架：<ul><li>是一套完整的解决方案；对项目的侵入性较大，项目如果需要更换框架，则需要重新架构整个项目。在框架这个环境里运行代码</li><li>node 中的 express；</li></ul></li><li>库（插件）：提供某一个小功能，对项目的侵入性较小，如果某个库无法完成某些需求，可以很容易切换到其它库实现需求。引用库作为工具。<ul><li>DOM 操作：从 Jquery 切换到 Zepto</li><li>模块化：从 EJS 切换到 art-template</li></ul></li></ul><h3 id="Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别"><a href="#Node（后端）中的-MVC-与-前端中的-MVVM-之间的区别" class="headerlink" title="Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别"></a>Node（后端）中的 MVC 与 前端中的 MVVM 之间的区别</h3><ul><li>MVC 是后端的分层开发概念；</li><li>MVVM 是前端视图层的概念，主要关注于 视图层分离，也就是说：<a href="https://www.cnblogs.com/onepixel/p/6034307.html">MVVM</a>把前端的视图层，分为了 三部分 Model, View , VM(ViewModel)</li><li>为什么有了 MVC 还要有 MVVM</li><li>Vue.js 基本代码 和 MVVM 之间的对应关系</li></ul><h3 id="基本的代码结构"><a href="#基本的代码结构" class="headerlink" title="基本的代码结构"></a>基本的代码结构</h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./lib/vue-2.4.0.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1. 导入Vue的包 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 1.容器 将来 new 的Vue实例，会控制这个 元素中的所有内容 Vue 实例所控制的这个元素区域，就是我们的 V --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{ msg }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token comment" spellcheck="true">// 2. 创建一个Vue的实例 new Vue()；并配置options选项对象</span>      <span class="token comment" spellcheck="true">// 当我们导入包之后，在浏览器的内存中，就多了一个 Vue 构造函数</span>      <span class="token comment" spellcheck="true">//  注意：我们 new 出来的这个 vm 对象，就是我们 MVVM中的 VM调度者</span>      <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 表示，当前我们 new 的这个 Vue 实例，要控制页面上的哪个区域;两种写法：'jq选择器' 或 element元素对象</span>        template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">``</span></span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 这里的 data 就是 MVVM中的 Model，专门用来保存 每个页面的数据的data。属性中，存放的是 el 中要用到的数据</span>          msg<span class="token punctuation">:</span> <span class="token string">"欢迎学习Vue"</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>          func1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//this指当前new Vue实例</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><a href="https://nferzhuang.com/vue%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E5%87%86%E5%A4%87-runtime-only%E5%92%8Cruntime-compiler/">Runtime Only 和 render 详解</a></p><h2 id="指令-Directives"><a href="#指令-Directives" class="headerlink" title="指令 Directives"></a>指令 Directives</h2><p>值都是必须””，</p><blockquote><h3 id="属性值选项："><a href="#属性值选项：" class="headerlink" title="属性值选项："></a>属性值选项：</h3><p>“number + 1”</p><p>“ok ? ‘YES’ : ‘NO’”</p><p>“ message.split(‘’).reverse().join(‘’) “</p><h3 id="在-Vue-中使用样式"><a href="#在-Vue-中使用样式" class="headerlink" title="在 Vue 中使用样式"></a>在 Vue 中使用样式</h3><ul><li>使用 class 样式<ol><li>数组 <code>&lt;h1 :class=&quot;[&#39;red&#39;, &#39;thin&#39;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</code></li><li>数组中使用三元表达式<code>&lt;h1 :class=&quot;[&#39;red&#39;, &#39;thin&#39;, isactive?&#39;active&#39;:&#39;&#39;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</code></li><li>数组中嵌套对象<code>&lt;h1 :class=&quot;[&#39;red&#39;, &#39;thin&#39;, &#123;&#39;active&#39;: isactive&#125;]&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</code></li><li>直接使用对象<code>&lt;h1 :class=&quot;&#123;red:true, italic:true, active:true, thin:true&#125;&quot;&gt;这是一个邪恶的H1&lt;/h1&gt;</code></li></ol></li><li>使用内联样式<ol><li>直接在元素上通过 <code>:style</code> 的形式，书写样式对象<code>&lt;h1 :style=&quot;&#123;color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;&#125;&quot;&gt;这是一个善良的H1&lt;/h1&gt;</code></li><li>将样式对象，定义到 <code>data</code> 中，并直接引用到 <code>:style</code> 中<ul><li>在 data 上定义样式：<code>data: &#123; h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;&#125;</code></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<code>&lt;h1 :style=&quot;h1StyleObj&quot;&gt;这是一个善良的H1&lt;/h1&gt;</code></li></ul></li><li>在<code>:style</code>中通过数组，引用多个 <code>data</code> 上的样式对象<ul><li>在 data 上定义样式：<code>data: &#123;h1StyleObj: &#123; color: &#39;red&#39;, &#39;font-size&#39;: &#39;40px&#39;, &#39;font-weight&#39;: &#39;200&#39; &#125;,h1StyleObj2: &#123; fontStyle: &#39;italic&#39; &#125;&#125;</code></li><li>在元素中，通过属性绑定的形式，将样式对象应用到元素中：<code>&lt;h1 :style=&quot;[h1StyleObj, h1StyleObj2]&quot;&gt;这是一个善良的H1&lt;/h1&gt;</code></li></ul></li></ol></li></ul></blockquote><h3 id="v-text-v-html"><a href="#v-text-v-html" class="headerlink" title="v-text/v-html"></a><code>v-text</code>/<code>v-html</code></h3><blockquote><p><strong>插值</strong> 和的区别是：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{msg}}哈哈哈是的<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>//可以更新元素的部分 textContent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>无效文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>//更新元素的全部 textContent //text和html的区别 同inner-text和inner-html的区别</code></pre></blockquote><h3 id="v-bind-attr-quot-quot-attr"><a href="#v-bind-attr-quot-quot-attr" class="headerlink" title="v-bind:attr=&quot;&quot; :attr"></a><code>v-bind:attr=&quot;&quot;</code> <code>:attr</code></h3><blockquote><p><strong>单向数据传递属性值。缩写<code>:</code> 绑定 atrr style class 等 属性，三种用法：</strong></p><ul><li>直接使用指令<code>v-bind</code></li><li>使用简化指令<code>:</code></li><li>在绑定的时候，拼接绑定内容：<code>:title=&quot;btnTitle + &#39;, 这是追加的内容&#39;&quot;</code></li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>argument</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>expression<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>//绑定属性格式<span class="token comment" spellcheck="true">&lt;!-- 绑定一个属性 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>imageSrc<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 内联字符串拼接 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>/path/to/images/<span class="token punctuation">'</span> + fileName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- ID 绑定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>list-<span class="token punctuation">'</span> + id<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- class 绑定 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ red: isRed }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--绑定的对象 自动toString() --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[classA, classB]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[classA, { classB: isB, classC: isC }]<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>xx <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> 2?<span class="token punctuation">'</span>cla1<span class="token punctuation">'</span>:<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- style 绑定 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span> <span class="token property">fontSize</span><span class="token punctuation">:</span> size + <span class="token string">'px'</span> <span class="token punctuation">}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">[styleObjectA, styleObjectB]</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 绑定一个有属性的对象 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ id: someProp, <span class="token punctuation">'</span>other-attr<span class="token punctuation">'</span>: otherProp }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 通过 prop 修饰符绑定 DOM 属性 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>text-content.prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>my-component</span> <span class="token attr-name">:prop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>someThing<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>my-component</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>child-component</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$props<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>child-component</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- XLink --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">:xlink:special</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>foo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></blockquote><h3 id="v-model-quot-quot"><a href="#v-model-quot-quot" class="headerlink" title="v-model=&quot;&quot;"></a><code>v-model=&quot;&quot;</code></h3><blockquote><p>双向数据绑定 value 属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{msg0}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></blockquote><h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><code>v-show</code></h3><blockquote><p>条件渲染</p><p>和 <code>v-if</code>区别 是： <code>v-if</code>的实现原理是 html 的<code>&lt;!----&gt;</code>；而<code>if-show</code>的实现原理是 css 的<code>opacity:0</code> 。 前者的频繁性切换性能消耗较多 后者的初始性能消耗较多</p></blockquote><h3 id="v-if-v-else-if-v-else"><a href="#v-if-v-else-if-v-else" class="headerlink" title="v-if v-else-if v-else"></a><code>v-if</code> <code>v-else-if</code> <code>v-else</code></h3><blockquote><p>条件渲染</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>height <span class="token punctuation">></span> 180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{height}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{height}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>{{height}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--三个必须相邻兄弟元素--></span></code></pre><ul><li><p><code>v-if</code></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>show<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>显示<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hide<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>隐藏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>height <span class="token punctuation">></span> 180<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{height}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>let vm = new Vue({ el : '.container', data : { show:true, hide:false,height:150, number:0, } )</code></pre></li><li><p><code>v-else-if</code> : <em>前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code></em></p></li><li><p><code>v-else</code> : <em>前一兄弟元素必须有 <code>v-if</code> 或 <code>v-else-if</code></em></p></li></ul></blockquote><h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a><code>v-for</code></h3><blockquote><p>列表渲染：遍历 数据 可接受数据类型 Array | Object | number | string</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value[, index]) in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value[, key]) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>str in stringX<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value[, key, index]) in object<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">".container"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      scores<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      dog<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"ss"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">12</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      str1<span class="token punctuation">:</span> <span class="token string">"sddd大师傅但是"</span><span class="token punctuation">,</span>      num1<span class="token punctuation">:</span> <span class="token number">222156465</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>年龄<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">></span></span>性别<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in students<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{item.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{item.age}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>{{item.gentle}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">let</span> vue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">".container"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      students<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"n1"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> gentle<span class="token punctuation">:</span> <span class="token string">"m"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"n2"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> gentle<span class="token punctuation">:</span> <span class="token string">"f"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"n3"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">,</span> gentle<span class="token punctuation">:</span> <span class="token string">"m"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"n4"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span> gentle<span class="token punctuation">:</span> <span class="token string">"m"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></blockquote><h3 id="v-on-event-event"><a href="#v-on-event-event" class="headerlink" title="v-on:event @event"></a><code>v-on:event</code> <code>@event</code></h3><blockquote><p>事件处理器,绑定 事件</p><p>event.修饰符</p><ul><li><code>.stop</code> - 调用 <code>event.stopPropagation()</code>。阻止冒泡</li><li><code>.prevent</code> - 调用 <code>event.preventDefault()</code>。阻止默认事件</li><li><code>.capture</code> - 添加事件侦听器时使用 capture 模式（事件捕获模式）。</li><li><code>.self</code> - 只当事件是从侦听器绑定的元素本身触发时（比如不是子元素）才触发回调。</li><li><code>.&#123;keyCode | keyAlias&#125;</code> - 只当事件是从特定键触发时才触发回调。</li><li><code>.native</code> - 监听组件根元素的原生事件。</li><li><code>.once</code> - 只触发一次回调。</li><li><code>.left</code> - (2.2.0) 只当点击鼠标左键时触发。</li><li><code>.right</code> - (2.2.0) 只当点击鼠标右键时触发。</li><li><code>.middle</code> - (2.2.0) 只当点击鼠标中键时触发。</li><li><code>.passive</code> - (2.3.0) 以 <code>&#123; passive: true &#125;</code> 模式添加侦听器</li></ul><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 方法处理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 内联语句 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThat(<span class="token punctuation">'</span>hello<span class="token punctuation">'</span>, $event)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 缩写 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 停止冒泡 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 阻止默认行为 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 阻止默认行为，没有表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--  串联修饰符 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click.stop.prevent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键别名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.enter</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 键修饰符，键代码 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">@keyup.13</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>onEnter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!-- 点击回调只会触发一次 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click.once</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>doThis<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 对象语法 (2.4.0+) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ mousedown: doThis, mouseup: doThat }<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">".container"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      students<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"n1"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span> gentle<span class="token punctuation">:</span> <span class="token string">"m"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"n2"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span> gentle<span class="token punctuation">:</span> <span class="token string">"f"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"n3"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">33</span><span class="token punctuation">,</span> gentle<span class="token punctuation">:</span> <span class="token string">"m"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"n4"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">44</span><span class="token punctuation">,</span> gentle<span class="token punctuation">:</span> <span class="token string">"m"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">doThat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//console.log('sss');</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></blockquote><h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a><code>v-once</code></h3><blockquote><p>只能响应 双向绑定修改数据一次</p></blockquote><h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a><code>v-pre</code></h3><h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a><code>v-cloak</code></h3><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="组件定义和使用"><a href="#组件定义和使用" class="headerlink" title="组件定义和使用"></a>组件定义和使用</h3><p>什么是组件： 组件的出现，就是为了拆分 Vue 实例的代码量的，能够让我们以不同的组件，来划分不同的功能模块，将来我们需要什么样的功能，就可以去调用对应的组件即可；<br>组件化和模块化的不同：</p><ul><li>模块化： 是从代码逻辑的角度进行划分的；方便代码分层开发，保证每个功能模块的职能单一；</li><li>组件化： 是从 UI 界面的角度进行划分的；前端的组件化，方便 UI 组件的重用；</li></ul><h4 id="全局组件-Vue-component-39-tabName-39"><a href="#全局组件-Vue-component-39-tabName-39" class="headerlink" title="全局组件 Vue.component(&#39;tabName&#39;, {});"></a>全局组件 <code>Vue.component(&#39;tabName&#39;, &#123;&#125;);</code></h4><blockquote><p><em>注意： 组件中的 DOM 结构，有且只能有唯一的根元素（Root Element）来进行包裹！</em></p><ol><li>使用 <code>Vue.extend</code>定义 和 <code>Vue.component</code>声明：</li></ol><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> login <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>登录&lt;/h1>"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"login"</span><span class="token punctuation">,</span> login<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或 直接在声明时定义</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"register"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>注册&lt;/h1>"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//语法糖</span><span class="token keyword">let</span> Component1 <span class="token operator">=</span> <span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`aaaa`</span></span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//或 jq选择器'#id' 或 DOM element 对象</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//在组件中，`data`需要被定义为一个方法</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"大家好！"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"component1"</span><span class="token punctuation">,</span> Component1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="2"><li>将模板字符串，定义到 script 标签种：</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tmpl<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x-template<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>登录<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">|</span> <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"#"</span><span class="token operator">></span>注册<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"account"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"#tmpl"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//需要使用 Vue.component 来定义组件：</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--在子组件中，如果将模板字符串，定义到了script标签中，那么，要访问子组件身上的`data`属性中的值，需要使用`this`来访问--></span></code></pre></blockquote><h4 id="局部组件-components-tabName"><a href="#局部组件-components-tabName" class="headerlink" title="局部组件 components:{tabName:{}}"></a>局部组件 <code>components:&#123;tabName:&#123;&#125;&#125;</code></h4><blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--引用组件：--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>account</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>account</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--定义组件：使用 components 属性定义--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 定义子组件</span>      account<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// account 组件</span>        template<span class="token punctuation">:</span>          <span class="token string">"&lt;div>&lt;h1>这是Account组件{{name}}&lt;/h1>&lt;login>&lt;/login>&lt;/div>"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 在这里使用定义的子组件</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 定义子组件的子组件</span>          login<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// login 组件</span>            template<span class="token punctuation">:</span> <span class="token string">"&lt;h3>这是登录组件&lt;/h3>"</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></blockquote><h3 id="父子组件间通信-数据传递"><a href="#父子组件间通信-数据传递" class="headerlink" title="父子组件间通信 数据传递"></a>父子组件间通信 数据传递</h3><h4 id="父组件向子组件传值"><a href="#父组件向子组件传值" class="headerlink" title="父组件向子组件传值"></a>父组件向子组件传值</h4><blockquote><p>通过父组件中调用的<code>子标签的属性</code> 和 子组件<code>props</code>属性 传递</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span> <span class="token attr-name">:finfo</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!--v-bind:或简化指令--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">:</span> <span class="token string">"这是父组件中的消息"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      son<span class="token punctuation">:</span> <span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>这是子组件 --- {{finfo}}&lt;/h1>"</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"finfo"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></blockquote><h4 id="子组件向父组件传值-lt-son-customName-quot-methodsFunc-quot-gt-lt-son-gt"><a href="#子组件向父组件传值-lt-son-customName-quot-methodsFunc-quot-gt-lt-son-gt" class="headerlink" title="子组件向父组件传值 &lt;son @customName=&quot;methodsFunc&quot;&gt;&lt;/son&gt;"></a>子组件向父组件传值 <code>&lt;son @customName=&quot;methodsFunc&quot;&gt;&lt;/son&gt;</code></h4><blockquote><p>原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 引用父组件 父组件将方法的引用传递给子组件 --></span>  <span class="token comment" spellcheck="true">&lt;!--其中，`getMsg`是父组件中`methods`中定义的方法名称，`func`是子组件调用传递过来方法时候的方法名称--></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>son</span> <span class="token attr-name">@func</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getMsg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>son</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x-template<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>son<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token operator">&lt;</span>div<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"button"</span> value<span class="token operator">=</span><span class="token string">"向父组件传值"</span> @click<span class="token operator">=</span><span class="token string">"sendMsg"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 子组件的定义方式</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"son"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"#son"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 组件模板Id</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">sendMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 按钮的点击事件</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"func"</span><span class="token punctuation">,</span> <span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父组件传递过来的方法，同时把数据传递出去 子组件内部通过`this.$emit('方法名', 要传递的数据)`方式，来调用父组件中的方法，同时把数据传递给父组件使用</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">getMsg</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义</span>        <span class="token function">alert</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></blockquote><h2 id="slot-插槽"><a href="#slot-插槽" class="headerlink" title="slot 插槽"></a>slot 插槽</h2><p>其实是 父组件 传递的 DOM 结构，留给子组件内部自定义</p><h3 id="具名插槽"><a href="#具名插槽" class="headerlink" title="具名插槽"></a>具名插槽</h3><blockquote><p><code>template#temID&gt;slot[name]</code>和<code>temID&gt;*[slot]</code>对应</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--存在于一个组件中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mySlot</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- slot="xx"和 name="xx"一一对应 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot1<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>士大夫<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mySlot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySlot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>模板的头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>预留的一个插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>预留的一个插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>预留的一个插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>模板尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></blockquote><h3 id="匿名插槽"><a href="#匿名插槽" class="headerlink" title="匿名插槽"></a>匿名插槽</h3><blockquote><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--存在于一个组件中--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mySlot</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--里面放任何数量的任何标签代替 template内的slot标签--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mySlot</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySlot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>模板的头部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>slot</span><span class="token punctuation">></span></span>预留的一个插槽<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>slot</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span>模板尾部<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre></blockquote><h2 id="过滤器-filters-Vue-filter-39-var-39-filterFun"><a href="#过滤器-filters-Vue-filter-39-var-39-filterFun" class="headerlink" title="过滤器 filters:{} Vue.filter(&#39;var&#39;,filterFun)"></a>过滤器 <code>filters:&#123;&#125;</code> <code>Vue.filter(&#39;var&#39;,filterFun)</code></h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Vue.js 允许你自定义过滤器，<strong>可被用作一些常见的文本格式化</strong>。过滤器可以用在两个地方：<strong>mustache 插值和 v-bind 表达式</strong>。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符指示；</p><ol><li>使用在 HTML</li><li>定义过滤器 <em>注意：当有局部和全局两个名称相同的过滤器时候，会以就近原则进行调用，即：局部过滤器优先于全局过滤器被调用！</em></li></ol><h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用在HTML：`&lt;td>{{item.ctime | dataFormat('yyyy-mm-dd')}}&lt;/td>` *dataFormat()参数是arguments[ , ..args]*</span><span class="token comment" spellcheck="true">// 定义一个全局过滤器</span>Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token string">"dataFormat"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>input<span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//第一个参数arguments[0]是html种|左侧的数据</span>  <span class="token keyword">var</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取年月日</span>  <span class="token keyword">var</span> y <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> d <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span>  <span class="token comment" spellcheck="true">// 否则，就返回  年-月-日 时：分：秒</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"yyyy-mm-dd"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取时分秒</span>    <span class="token keyword">var</span> hh <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> mm <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> ss <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hh<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mm<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ss<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h3 id="私有过滤器"><a href="#私有过滤器" class="headerlink" title="私有过滤器"></a>私有过滤器</h3><blockquote><p>在<code>filters</code>中赋值：</p><pre class=" language-js"><code class="language-js">filters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 私有局部过滤器，只能在 当前 VM 对象所控制的 View 区域进行使用</span>    <span class="token function">dataFormat</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> pattern <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 在参数列表中 通过 pattern="" 来指定形参默认值，防止报错</span>      <span class="token keyword">var</span> dt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 获取年月日</span>      <span class="token keyword">var</span> y <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>dt<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">var</span> d <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 如果 传递进来的字符串类型，转为小写之后，等于 yyyy-mm-dd，那么就返回 年-月-日</span>      <span class="token comment" spellcheck="true">// 否则，就返回  年-月-日 时：分：秒</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>pattern<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'yyyy-mm-dd'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取时分秒</span>        <span class="token keyword">var</span> hh <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> mm <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> ss <span class="token operator">=</span> dt<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>y<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>m<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>d<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>hh<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>mm<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>ss<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//使用ES6中的字符串新方法 String.prototype.padStart(maxLength, fillString='') 或 String.prototype.padEnd(maxLength, fillString='')来填充字符串；</span></code></pre></blockquote><h2 id="监视-watch-computed"><a href="#监视-watch-computed" class="headerlink" title="监视 watch computed"></a>监视 <code>watch</code> <code>computed</code></h2><h3 id="watch属性的使用，监视单个-data-或-路由的变化"><a href="#watch属性的使用，监视单个-data-或-路由的变化" class="headerlink" title="watch属性的使用，监视单个 data 或 路由的变化"></a><code>watch</code>属性的使用，监视单个 data 或 路由的变化</h3><p>考虑一个问题：想要实现 <code>名</code> 和 <code>姓</code> 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）</p><ol><li><p>监听<code>data</code>中属性的改变，反馈函数：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> +  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> =  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      firstName<span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>      lastName<span class="token punctuation">:</span> <span class="token string">"chen"</span><span class="token punctuation">,</span>      fullName<span class="token punctuation">:</span> <span class="token string">"jack - chen"</span><span class="token punctuation">,</span>      obj<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"sss"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//不可监视，因为监视的是对象的地址，地址没改；需要深度监视</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//key是data属性的属性名</span>      firstName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第一个参数是新数据，第二个参数是旧数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> newVal <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      lastName<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> newVal<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      obj<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//深度监视 object || array</span>        deep<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        handler<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newV<span class="token punctuation">,</span> oldV<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"监视成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>监听路由对象的改变：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token keyword">var</span> login <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>登录组件&lt;/h1>"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> register <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>注册组件&lt;/h1>"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> login <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/register"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> register <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    router<span class="token punctuation">:</span> router<span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>      $route<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">.</span>path <span class="token operator">===</span> <span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"这是登录组件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="computed计算属性的使用，同时监听多个-data-的改变"><a href="#computed计算属性的使用，同时监听多个-data-的改变" class="headerlink" title="computed计算属性的使用，同时监听多个 data 的改变"></a><code>computed</code>计算属性的使用，同时监听多个 data 的改变</h3><ol><li><p>默认只有<code>getter</code>的计算属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> +  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> =  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      firstName<span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>      lastName<span class="token punctuation">:</span> <span class="token string">"chen"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 计算属性； 特点：当计算属性中索引来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值</span>      <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//或 命名成 fullName:funciont(){return }</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li><p>定义有<code>getter</code>和<code>setter</code>的计算属性：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 点击按钮重新为 计算属性 fullName 赋值 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>修改fullName<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>changeName<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      firstName<span class="token punctuation">:</span> <span class="token string">"jack"</span><span class="token punctuation">,</span>      lastName<span class="token punctuation">:</span> <span class="token string">"chen"</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token function">changeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> <span class="token string">"TOM - chen2"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>      fullName<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> parts <span class="token operator">=</span> newVal<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" - "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="watch、computed和methods之间的对比"><a href="#watch、computed和methods之间的对比" class="headerlink" title="watch、computed和methods之间的对比"></a><code>watch</code>、<code>computed</code>和<code>methods</code>之间的对比</h3><ol><li><code>computed</code>属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；</li><li><code>methods</code>方法表示一个具体的操作，主要书写业务逻辑；</li><li><code>watch</code>一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是<code>computed</code>和<code>methods</code>的结合体；</li></ol><h2 id="生命周期事件函数（钩子-）"><a href="#生命周期事件函数（钩子-）" class="headerlink" title="生命周期事件函数（钩子 ）"></a>生命周期事件函数（钩子 ）</h2><p>从 Vue 实例创建、运行、到销毁期间，总是伴随着各种各样的事件，这些事件，统称为<a href="https://cn.vuejs.org/v2/api/#%E9%80%89%E9%A1%B9-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E9%92%A9%E5%AD%90">生命周期</a>！<a href="https://cn.vuejs.org/images/lifecycle.png">声明周期图示</a></p><table><thead><tr><th>钩子</th><th align="left">解释</th></tr></thead><tbody><tr><td><a href="https://cn.vuejs.org/v2/api/#beforeCreate">beforeCreate</a></td><td align="left"><strong>实例刚刚在内存中被创建</strong>，组件属性计算之前 | 数据观测 (data observer) 和 event/watcher 事件配置之前被调用。还没有初始化好 data 和 methods 属性</td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#created">created</a></td><td align="left"><strong>实例已经在内存中创建完成</strong>。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。此时 data 和 methods 已经创建完成，然而挂载阶段还没开始，没开始编译模板，DOM 还没生成。<code>$el</code> 属性还不存在</td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#beforeMount">beforeMount</a></td><td align="left"><strong>模板编译/挂载之前</strong>：相关的 <code>render</code> 函数首次被调用 。此时已经完成了模板的编译，但是还没有挂载到页面中</td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#mounted">mounted</a></td><td align="left"><strong>模板编译/挂载之后</strong>：<code>el</code> 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用该钩子。<br/>如果 root 实例挂载了一个文档内元素，当 <code>mounted</code> 被调用时 <code>vm.$el</code> 也在文档内 .已经将编译好的模板，挂载到了页面指定的容器中显示</td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#beforeUpdate">beforeUpdate</a></td><td align="left"><strong>组件更新前</strong>：数据更新时，发生在虚拟 DOM 打补丁之前。此时 data 中的状态值是最新的，但是界面上显示的 数据还是旧的，因为此时还没有开始重新渲染 DOM 节点。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器</td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#updated">updated</a></td><td align="left"><strong>组件更新之后</strong>：由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。此时 data 中的状态值 和 界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了</td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#activated">activated</a></td><td align="left">keep-alive <strong>组件激活时调用</strong>。<em>keep-alive 是 vue 内部组件只与 v-if 搭配使用，v-if 的原理不是 display 的控制，是 DOM 的 remove 和 append</em></td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#deactivated">deactivated</a></td><td align="left">keep-alive <strong>组件移除时调用</strong></td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#beforeDestroy">beforeDestroy</a></td><td align="left"><strong>Vue 实例销毁之前</strong>。在这一步，实例仍然完全可用。</td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#destroyed">destroyed</a></td><td align="left"><strong>Vue 实例销毁后</strong>。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</td></tr><tr><td><a href="https://cn.vuejs.org/v2/api/#errorCaptured">errorCaptured</a></td><td align="left">当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 <code>false</code> 以阻止该错误继续向上传播。</td></tr></tbody></table><p>简略总结：</p><blockquote><p><code>beforecreated</code>：el 和 data 并未初始化 <em>举个栗子：可以在这加个 loading 事件</em></p><p><code>created</code>:完成了 data 数据的初始化，el 没有 <em>在这结束 loading，还做一些初始化，实现函数自执行</em></p><p><code>beforeMount</code>：完成了 el 和 data 初始化</p><p><code>mounted</code> ：完成挂载 <em>在这发起后端请求，拿回数据，配合路由钩子做一些事情</em></p><p><code>beforeDestroy</code>： <em>你确认删除 XX 吗？ destroyed ：当前组件已被删除，清空相关内容</em></p><p><strong>示例</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>    &lt;keep-alive>&lt;span v-if="isExit">出现&lt;/span>&lt;/keep-alive>    &lt;button type="button" @click="isExit = !isExit">点击&lt;/button>&lt;/div>`</span></span><span class="token punctuation">,</span>  data<span class="token punctuation">:</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">"xuxiao is boy"</span><span class="token punctuation">,</span>    isExit<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//创建期间 4个</span>  beforeCreate<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"beforeCreate 创建前状态===============》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  created<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"created 创建完毕状态===============》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  beforeMount<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"beforeMount 挂载前状态===============》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"mounted 挂载结束状态===============》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//已被初始化</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//运行期间 2个</span>  beforeUpdate<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"beforeUpdate 更新前状态===============》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  updated<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"updated 更新完成状态===============》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//销毁期间 2个 对应父组件v-if = false时的销毁当前组件</span>  beforeDestroy<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"beforeDestroy 销毁前状态===============》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  destroyed<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">"destroyed 销毁完成状态===============》"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"el     : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$el<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"data   : "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$data<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"%c%s"</span><span class="token punctuation">,</span> <span class="token string">"color:red"</span><span class="token punctuation">,</span> <span class="token string">"message: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//keep-alive包裹的组件，在v-if时有缓存</span>  activated<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//激活时</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  deactivated<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//未激活时</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h2 id="DOM-操作"><a href="#DOM-操作" class="headerlink" title="DOM 操作"></a>DOM 操作</h2><ul><li>$属性：$refs 获取组件内的元素，根据元素的 ref 属性 <code>this.$refs.ele1.focus()</code></li><li>$parent：获取当前组件对象的父组件</li><li>$children：获取子组件</li><li>$root：获取 new Vue 的实例对象 vm</li><li>$el：组件对象的 DOM 元素</li></ul><h1 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><h3 id="路由概述"><a href="#路由概述" class="headerlink" title="路由概述"></a><a href="https://router.vuejs.org/zh/api/">路由概述</a></h3><ol><li><p>对于普通的网站，所有的超链接都是 URL 地址，所有的 URL 地址都对应服务器上对应的资源；</p></li><li><p>对于单页面应用程序来说，主要通过 URL 中的<code>location.hash</code>(#号)来实现不同页面之间的切换，同时，hash 有一个特点：HTTP 请求中不会包含 hash 相关的内容；所以，单页面程序中的页面跳转主要用 hash 实现；</p></li><li><p>在单页面应用程序中，这种通过 hash 改变来切换页面的方式，称作前端路由（区别于后端路由）；</p></li></ol><h3 id="使用-vue-router"><a href="#使用-vue-router" class="headerlink" title="使用 vue-router"></a>使用 vue-router</h3><ol><li><p>导入 vue-router 组件类库：<code>&lt;script src=&quot;./lib/vue-router-2.7.0.js&quot;&gt;&lt;/script&gt;&lt;!--如果是模块化调用，需要Vue.use(VueRouter)--&gt;</code></p></li><li><p>使用 router-link 组件来导航</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/login<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/register<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span></code></pre></li><li><p>使用 router-view 组件来显示匹配到的组件</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span></code></pre></li><li><p>创建使用<code>Vue.extend</code>创建组件</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建登录组件</span><span class="token keyword">var</span> login <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>登录组件&lt;/h1>"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建注册组件</span><span class="token keyword">var</span> register <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>注册组件&lt;/h1>"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> login <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/register"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> register <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> register <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  template<span class="token punctuation">:</span> <span class="token string">"&lt;h1>注册组件 --- {{this.$route.params.id}}&lt;/h1>"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//通过 `this.$route.params`来获取路由中的参数</span></code></pre></li><li><p>创建 Vue 实例，得到 ViewModel，使用 router 属性来使用路由规则</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>  router<span class="token punctuation">:</span> router<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 使用 router 属性来使用路由规则</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><h3 id="路由嵌套使用-children-属性实现"><a href="#路由嵌套使用-children-属性实现" class="headerlink" title="路由嵌套使用 children 属性实现"></a>路由嵌套<em>使用 <code>children</code> 属性实现</em></h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/account<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Account<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  <span class="token comment" spellcheck="true">// 父路由中的组件</span>  <span class="token keyword">const</span> account <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;div>        这是account组件        &lt;router-link to="/account/login">login&lt;/router-link> |         &lt;router-link to="/account/register">register&lt;/router-link>        &lt;router-view>&lt;/router-view>      &lt;/div>`</span></span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 子路由中的 login 组件</span>  <span class="token keyword">const</span> login <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;div>登录组件&lt;/div>"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 子路由中的 register 组件</span>  <span class="token keyword">const</span> register <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token string">"&lt;div>注册组件&lt;/div>"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 路由实例</span>  <span class="token keyword">var</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//默认是hash模式</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> redirect<span class="token punctuation">:</span> <span class="token string">"/account/login"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 使用 redirect 实现路由重定向</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">"/account"</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> account<span class="token punctuation">,</span>        children<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">// 通过 children 数组属性，来实现路由的嵌套</span>          <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> login <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 注意，子路由的开头位置，不要加 / 路径符，单个路由嵌套用 component不加s</span>          <span class="token punctuation">{</span> path<span class="token punctuation">:</span> <span class="token string">"register"</span><span class="token punctuation">,</span> component<span class="token punctuation">:</span> register <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建 Vue 实例，得到 ViewModel</span>  <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    components<span class="token punctuation">:</span> <span class="token punctuation">{</span>      account<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    router<span class="token punctuation">:</span> router<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="使用-history-模式"><a href="#使用-history-模式" class="headerlink" title="使用 history 模式"></a>使用 history 模式</h2><p>实现 SPA(single-page application)</p><p>vue-router 默认使用 hash 模式，即#xxx</p><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><h2 id="Vuex-状态管理"><a href="#Vuex-状态管理" class="headerlink" title="Vuex 状态管理"></a>Vuex 状态管理</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li>引入 Vuex</li><li>安装插件`vue</li><li>创建 store</li><li>配置 store 中的数据对象</li><li>将 sotre 对象关联 vue 实例</li></ul><h3 id="API"><a href="#API" class="headerlink" title="API"></a>API</h3><ul><li><p>构造器选项</p><ol><li><p><code>state</code><em>Object | Function</em></p><blockquote><p>如果你传入返回一个对象的函数，其返回的对象会被用作根 state。这在你想要重用 state 对象，尤其是对于重用 module 来说非常有用</p></blockquote></li><li><p><code>getters</code><em>{ [type: string]: Function(state,[getter]) }</em></p><blockquote><ul><li><p>getter 接受 state 作为其第一个参数</p><p>getter 也可以接受其他 getter 作为第二个参数</p></li><li><p>在 store 上注册 getter，getter 方法接受以下参数：</p><pre class=" language-text"><code class="language-text">state,     // 如果在模块中定义则为模块的局部状态getters,   // 等同于 store.getters</code></pre><p>当定义在一个模块 module 里时会特别一些：</p><pre class=" language-text"><code class="language-text">state,       // 如果在模块中定义则为模块的局部状态getters,     // 等同于 store.gettersrootState    // 等同于 store.staterootGetters  // 所有 getters</code></pre><p>注册的 getter 暴露为 <code>store.getters</code>。</p></li></ul></blockquote></li><li><p><code>mutations</code><em>{ [type: string]: Function(state,[payLoad]) }</em></p><blockquote><p>处理函数总是接受 <code>state</code> 作为第一个参数（如果定义在模块中，则为模块的局部状态），<code>payload</code> 作为第二个参数（可选）。</p></blockquote></li><li><p><code>actions</code><em>{ [type: string]: Function(context,[payLoad]) }</em></p><blockquote><p>处理函数总是接受 <code>context</code> 作为第一个参数，<code>payload</code> 作为第二个参数（可选）。</p><p><code>context</code> 对象包含以下属性:</p><pre class=" language-js"><code class="language-js"><span class="token punctuation">{</span>  state<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 等同于 `store.state`，若在模块中则为局部状态</span>    rootState<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 等同于 `store.state`，只存在于模块中</span>    commit<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 等同于 `store.commit`</span>    dispatch<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 等同于 `store.dispatch`</span>    getters<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 等同于 `store.getters`</span>    rootGetters<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 等同于 `store.getters`，只存在于模块中</span><span class="token punctuation">}</span></code></pre></blockquote></li><li><p><code>modules</code><em>Object</em></p><blockquote><p>每个模块拥有自己的 <code>state</code>、<code>mutations</code>、<code>actions</code>、<code>getters</code>，甚至是嵌套子模块——从上至下进行同样方式的分割</p><ul><li><p>局部</p><ul><li>对于模块内部的 mutation 和 getter，接收的第一个参数是模块的<strong>局部状态对象 state</strong>。</li><li>对于模块内部的 action，局部状态通过 <code>context.state</code> 暴露出来</li></ul></li><li><p>在带有命名空间<code>namespaced:true</code>的模块下 访问全局时</p><ul><li>对于模块内部的 action，根节点状态为 <code>context.rootState</code></li><li>对于模块内部的 getter，<code>rootState</code> 和 <code>rootGetter</code> 会作为第三和第四参数传入</li></ul><p>若需要在全局命名空间内分发 action 或提交 mutation，将 <code>&#123; root: true &#125;</code> 作为第三参数传给 <code>dispatch</code> 或 <code>commit</code> 即可。</p><p>若需要在带命名空间的模块注册全局 action，你可在此 action 属性中添加 <code>root: true</code>，并将这个 action 的定义放在函数 <code>handler</code> 属性中</p></li></ul></blockquote></li><li><p><code>plugins</code> <em>Array |Function</em></p><blockquote><p>一个数组，包含应用在 store 上的插件方法。这些插件就是一个函数，接收 store 作为唯一参数，可以监听 mutation（用于外部地数据持久化、记录或调试）或者提交 mutation （用于内部数据，例如 websocket 或 某些观察者）</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> myPlugin <span class="token operator">=</span> <span class="token punctuation">(</span>store<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当 store 初始化后调用</span>  store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mutation<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 监听 mutation，每次 mutation 之后调用</span>    <span class="token comment" spellcheck="true">// mutation 的格式为 { type, payload }</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> createWebSocketPlugin <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>store<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"receiveData"</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span>mutation<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mutation<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"UPDATE_DATA"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">,</span> mutation<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//同步 websocket 数据源到 store</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>myPlugin<span class="token punctuation">,</span> <span class="token function">createWebSocketPlugin</span><span class="token punctuation">(</span>socket<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote></li><li><p><code>strict</code><em>Boolean</em></p><blockquote><p>默认 false，使 Vuex store 进入严格模式，在严格模式下，任何 mutation 处理函数以外修改 Vuex state 都会抛出错误</p></blockquote></li><li><p><code>devtools</code><em>Boolean</em></p><blockquote><p>为某个特定的 Vuex 实例打开或关闭 devtools。对于传入 <code>false</code> 的实例来说 Vuex store 不会订阅到 devtools 插件。可用于一个页面中有多个 store 的情况。</p></blockquote></li></ol></li><li><p>实例</p><ul><li>实例属性(只读)<ul><li>state</li><li>getters</li></ul></li><li>实例方法<ul><li><code>commit</code> 提交 mutation <code>commit(type: string|mutation name, payload?: any, options?: Object)</code></li><li><code>dispatch</code> 分发 action <code>dispatch(type: string|action name, payload?: any, options?: Object)</code></li><li><code>replaceState</code> 替换 store 的根状态 <code>replaceState(state: Object)</code></li><li><code>watch</code> 响应式地侦听 <code>fn</code> 的返回值改变时调用回调函数 <code>watch(fn: Function, callback: Function, options?: Object): Function</code> <a href="https://codepen.io/CodinCat/pen/PpNvYr?editors=1111">例子</a></li><li><code>subscribe</code> 订阅 store 的 mutation <code>subscribe(handler: Function): Function</code></li><li><code>subscribeAction</code> 订阅 store 的 action <code>subscribeAction(handler: Function): Function</code></li><li><code>registerModule</code> 注册一个动态模块 <code>registerModule(path: string | Array&lt;string&gt;, module: Module, options?: Object)</code></li><li><code>unregisterModule</code> 卸载一个动态模块 <code>unregisterModule(path: string | Array&lt;string&gt;)</code></li><li><code>hotUpdate</code> 热替换新的 actions ，mutations 和 modules <code>hotUpdate(newOptions: Object)</code></li></ul></li></ul></li><li><p>组件绑定的辅助函数</p></li></ul><h1 id="Axios-拦截器-基于-promise-的-HTTP-库"><a href="#Axios-拦截器-基于-promise-的-HTTP-库" class="headerlink" title="Axios 拦截器 - 基于 promise 的 HTTP 库"></a>Axios 拦截器 - 基于 promise 的 HTTP 库</h1><ul><li>单请求配置 options:<code>axios.post(url,data,options)</code></li><li>全局配置 defaults:<code>this.$axios.defaults</code></li><li>config:请求拦截器中的参数</li><li>response.config 响应拦截器中的参数</li><li>options<ul><li>baseURL 基础 URL 路径</li><li>params 查询字符串（对象）</li><li>transformRequest:function(post 请求传递的数据){ 转换请求体数据}</li><li>transformResponse:function(res){自己转换响应回来的数据} 转换响应体数据</li><li>headers 请求头信息</li><li>data 请求体数据</li><li>timeout 请求超时，请求多久以后没有相应算超时（毫秒）<br>基本用法</li></ul></li></ul><blockquote><pre class=" language-js"><code class="language-js">axios  <span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"https://baidu.com"</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><p>合并请求</p><ul><li>取消请求 <code>CancelToken.source</code></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="vue-resource-实现-get-post-jsonp-请求"><a href="#vue-resource-实现-get-post-jsonp-请求" class="headerlink" title="vue-resource 实现 get, post, jsonp 请求"></a><a href="https://github.com/pagekit/vue-resource">vue-resource 实现 get, post, jsonp 请求</a></h2><p>除了 vue-resource 之外，还可以使用 <code>axios</code> 的第三方包实现实现数据的请求</p><ol><li>之前的学习中，如何发起数据请求？</li><li>常见的数据请求类型？ get post jsonp</li><li>测试的 URL 请求资源地址：</li></ol><ul><li>get 请求地址： <a href="http://vue.studyit.io/api/getlunbo">http://vue.studyit.io/api/getlunbo</a></li><li>post 请求地址：<a href="http://vue.studyit.io/api/post">http://vue.studyit.io/api/post</a></li><li>jsonp 请求地址：<a href="http://vue.studyit.io/api/jsonp">http://vue.studyit.io/api/jsonp</a></li></ul><ol start="4"><li>JSONP 的实现原理</li></ol><ul><li>由于浏览器的安全性限制，不允许 AJAX 访问 协议不同、域名不同、端口号不同的 数据接口，浏览器认为这种访问不安全；</li><li>可以通过动态创建 script 标签的形式，把 script 标签的 src 属性，指向数据接口的地址，因为 script 标签不存在跨域限制，这种数据获取方式，称作 JSONP（注意：根据 JSONP 的实现原理，知晓，JSONP 只支持 Get 请求）；</li><li>具体实现过程：</li></ul><ul><li>先在客户端定义一个回调方法，预定义对数据的操作；</li><li>再把这个回调方法的名称，通过 URL 传参的形式，提交到服务器的数据接口；</li><li>服务器数据接口组织好要发送给客户端的数据，再拿着客户端传递过来的回调方法名称，拼接出一个调用这个方法的字符串，发送给客户端去解析执行；</li><li>客户端拿到服务器返回的字符串之后，当作 Script 脚本去解析执行，这样就能够拿到 JSONP 的数据了；</li></ul><ul><li>带大家通过 Node.js ，来手动实现一个 JSONP 的请求例子；</li></ul><pre><code>   const http = require(&#39;http&#39;);   // 导入解析 URL 地址的核心模块   const urlModule = require(&#39;url&#39;);   const server = http.createServer();   // 监听 服务器的 request 请求事件，处理每个请求   server.on(&#39;request&#39;, (req, res) =&gt; &#123;     const url = req.url;     // 解析客户端请求的URL地址     var info = urlModule.parse(url, true);     // 如果请求的 URL 地址是 /getjsonp ，则表示要获取JSONP类型的数据     if (info.pathname === &#39;/getjsonp&#39;) &#123;       // 获取客户端指定的回调函数的名称       var cbName = info.query.callback;       // 手动拼接要返回给客户端的数据对象       var data = &#123;         name: &#39;zs&#39;,         age: 22,         gender: &#39;男&#39;,         hobby: [&#39;吃饭&#39;, &#39;睡觉&#39;, &#39;运动&#39;]       &#125;       // 拼接出一个方法的调用，在调用这个方法的时候，把要发送给客户端的数据，序列化为字符串，作为参数传递给这个调用的方法：       var result = `$&#123;cbName&#125;($&#123;JSON.stringify(data)&#125;)`;       // 将拼接好的方法的调用，返回给客户端去解析执行       res.end(result);     &#125; else &#123;       res.end(&#39;404&#39;);     &#125;   &#125;);   server.listen(3000, () =&gt; &#123;     console.log(&#39;server running at http://127.0.0.1:3000&#39;);   &#125;);</code></pre><ol start="5"><li>vue-resource 的配置步骤：</li></ol><ul><li>直接在页面中，通过<code>script</code>标签，引入 <code>vue-resource</code> 的脚本文件；</li><li>注意：引用的先后顺序是：先引用 <code>Vue</code> 的脚本文件，再引用 <code>vue-resource</code> 的脚本文件；</li></ul><ol start="6"><li>发送 get 请求：</li></ol><pre><code>getInfo() &#123; // get 方式获取数据  this.$http.get(&#39;http://127.0.0.1:8899/api/getlunbo&#39;).then(res =&gt; &#123;    console.log(res.body);  &#125;)&#125;</code></pre><ol start="7"><li>发送 post 请求：</li></ol><pre><code>postInfo() &#123;  var url = &#39;http://127.0.0.1:8899/api/post&#39;;  // post 方法接收三个参数：  // 参数1： 要请求的URL地址  // 参数2： 要发送的数据对象  // 参数3： 指定post提交的编码类型为 application/x-www-form-urlencoded  this.$http.post(url, &#123; name: &#39;zs&#39; &#125;, &#123; emulateJSON: true &#125;).then(res =&gt; &#123;    console.log(res.body);  &#125;);&#125;</code></pre><ol start="8"><li>发送 JSONP 请求获取数据：</li></ol><pre><code>jsonpInfo() &#123; // JSONP形式从服务器获取数据  var url = &#39;http://127.0.0.1:8899/api/jsonp&#39;;  this.$http.jsonp(url).then(res =&gt; &#123;    console.log(res.body);  &#125;);&#125;</code></pre><h2 id="配置本地数据库和数据接口-API"><a href="#配置本地数据库和数据接口-API" class="headerlink" title="配置本地数据库和数据接口 API"></a>配置本地数据库和数据接口 API</h2><ol><li>先解压安装 <code>PHPStudy</code>;</li><li>解压安装 <code>Navicat</code> 这个数据库可视化工具，并激活；</li><li>打开 <code>Navicat</code> 工具，新建空白数据库，名为 <code>dtcmsdb4</code>;</li><li>双击新建的数据库，连接上这个空白数据库，在新建的数据库上<code>右键</code> -&gt; <code>运行SQL文件</code>，选择并执行 <code>dtcmsdb4.sql</code> 这个数据库脚本文件；如果执行不报错，则数据库导入完成；</li><li>进入文件夹 <code>vuecms3_nodejsapi</code> 内部，执行 <code>npm i</code> 安装所有的依赖项；</li><li>先确保本机安装了 <code>nodemon</code>, 没有安装，则运行 <code>npm i nodemon -g</code> 进行全局安装，安装完毕后，进入到 <code>vuecms3_nodejsapi</code>目录 -&gt; <code>src</code>目录 -&gt; 双击运行 <code>start.bat</code></li><li>如果 API 启动失败，请检查 PHPStudy 是否正常开启，同时，检查 <code>app.js</code> 中第 <code>14行</code> 中数据库连接配置字符串是否正确；PHPStudy 中默认的 用户名是 root，默认的密码也是 root</li></ol><h2 id="Vue-中的动画"><a href="#Vue-中的动画" class="headerlink" title="Vue 中的动画"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html">Vue 中的动画</a></h2><p>为什么要有动画：动画能够提高用户的体验，帮助用户更好的理解页面中的功能；</p><h3 id="使用过渡类名"><a href="#使用过渡类名" class="headerlink" title="使用过渡类名"></a>使用过渡类名</h3><ol><li>HTML 结构：</li></ol><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;动起来&quot; @click=&quot;myAnimate&quot;&gt;    &lt;!-- 使用 transition 将需要过渡的元素包裹起来 --&gt;    &lt;transition name=&quot;fade&quot;&gt;      &lt;div v-show=&quot;isshow&quot;&gt;动画哦&lt;/div&gt;    &lt;/transition&gt;  &lt;/div&gt;</code></pre><ol start="2"><li>VM 实例：</li></ol><pre><code>// 创建 Vue 实例，得到 ViewModelvar vm = new Vue(&#123;  el: &#39;#app&#39;,  data: &#123;    isshow: false  &#125;,  methods: &#123;    myAnimate() &#123;      this.isshow = !this.isshow;    &#125;  &#125;&#125;);</code></pre><ol start="3"><li>定义两组类样式：</li></ol><pre><code>/* 定义进入和离开时候的过渡状态 */    .fade-enter-active,    .fade-leave-active &#123;      transition: all 0.2s ease;      position: absolute;    &#125;    /* 定义进入过渡的开始状态 和 离开过渡的结束状态 */    .fade-enter,    .fade-leave-to &#123;      opacity: 0;      transform: translateX(100px);    &#125;</code></pre><h3 id="使用第三方-CSS-动画库"><a href="#使用第三方-CSS-动画库" class="headerlink" title="使用第三方 CSS 动画库"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%B1%BB%E5%90%8D">使用第三方 CSS 动画库</a></h3><ol><li>导入动画类库：</li></ol><pre><code>&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;./lib/animate.css&quot;&gt;</code></pre><ol start="2"><li>定义 transition 及属性：</li></ol><pre><code>&lt;transition    enter-active-class=&quot;fadeInRight&quot;    leave-active-class=&quot;fadeOutRight&quot;    :duration=&quot;&#123; enter: 500, leave: 800 &#125;&quot;&gt;      &lt;div class=&quot;animated&quot; v-show=&quot;isshow&quot;&gt;动画哦&lt;/div&gt;&lt;/transition&gt;</code></pre><h3 id="使用动画钩子函数"><a href="#使用动画钩子函数" class="headerlink" title="使用动画钩子函数"></a>使用动画钩子函数</h3><ol><li>定义 transition 组件以及三个钩子函数：</li></ol><pre><code>&lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;button&quot; value=&quot;切换动画&quot; @click=&quot;isshow = !isshow&quot;&gt;    &lt;transition    @before-enter=&quot;beforeEnter&quot;    @enter=&quot;enter&quot;    @after-enter=&quot;afterEnter&quot;&gt;      &lt;div v-if=&quot;isshow&quot; class=&quot;show&quot;&gt;OK&lt;/div&gt;    &lt;/transition&gt;  &lt;/div&gt;</code></pre><ol start="2"><li>定义三个 methods 钩子方法：</li></ol><pre><code>methods: &#123;        beforeEnter(el) &#123; // 动画进入之前的回调          el.style.transform = &#39;translateX(500px)&#39;;        &#125;,        enter(el, done) &#123; // 动画进入完成时候的回调          el.offsetWidth;          el.style.transform = &#39;translateX(0px)&#39;;          done();        &#125;,        afterEnter(el) &#123; // 动画进入完成之后的回调          this.isshow = !this.isshow;        &#125;      &#125;</code></pre><ol start="3"><li>定义动画过渡时长和样式：</li></ol><pre><code>.show&#123;      transition: all 0.4s ease;    &#125;</code></pre><h3 id="v-for-的列表过渡"><a href="#v-for-的列表过渡" class="headerlink" title="v-for 的列表过渡"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E8%BF%87%E6%B8%A1">v-for 的列表过渡</a></h3><ol><li>定义过渡样式：</li></ol><pre><code>&lt;style&gt;    .list-enter,    .list-leave-to &#123;      opacity: 0;      transform: translateY(10px);    &#125;    .list-enter-active,    .list-leave-active &#123;      transition: all 0.3s ease;    &#125;&lt;/style&gt;</code></pre><ol start="2"><li>定义 DOM 结构，其中，需要使用 transition-group 组件把 v-for 循环的列表包裹起来：</li></ol><pre><code>  &lt;div id=&quot;app&quot;&gt;    &lt;input type=&quot;text&quot; v-model=&quot;txt&quot; @keyup.enter=&quot;add&quot;&gt;    &lt;transition-group tag=&quot;ul&quot; name=&quot;list&quot;&gt;      &lt;li v-for=&quot;(item, i) in list&quot; :key=&quot;i&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/li&gt;    &lt;/transition-group&gt;  &lt;/div&gt;</code></pre><ol start="3"><li>定义 VM 中的结构：</li></ol><pre><code>    // 创建 Vue 实例，得到 ViewModel    var vm = new Vue(&#123;      el: &#39;#app&#39;,      data: &#123;        txt: &#39;&#39;,        list: [1, 2, 3, 4]      &#125;,      methods: &#123;        add() &#123;          this.list.push(this.txt);          this.txt = &#39;&#39;;        &#125;      &#125;    &#125;);</code></pre><h3 id="列表的排序过渡"><a href="#列表的排序过渡" class="headerlink" title="列表的排序过渡"></a>列表的排序过渡</h3><p><code>&lt;transition-group&gt;</code> 组件还有一个特殊之处。不仅可以进入和离开动画，<strong>还可以改变定位</strong>。要使用这个新功能只需了解新增的 <code>v-move</code> 特性，<strong>它会在元素的改变定位的过程中应用</strong>。</p><ul><li><code>v-move</code> 和 <code>v-leave-active</code> 结合使用，能够让列表的过渡更加平缓柔和：</li></ul><pre><code>.v-move&#123;  transition: all 0.8s ease;&#125;.v-leave-active&#123;  position: absolute;&#125;</code></pre><h2 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h2><ol><li><a href="https://v1-cn.vuejs.org/">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/">vue.js 2.x 文档</a></li><li><a href="https://www.css88.com/archives/7715">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="https://www.cnblogs.com/wuhua1/p/6686237.html">js 里面的键盘事件对应的键码</a></li><li><a href="https://github.com/pagekit/vue-resource">pagekit/vue-resource</a></li><li><a href="https://jingyan.baidu.com/article/a65957f4976aad24e67f9b9b.html">navicat 如何导入 sql 文件和导出 sql 文件</a></li><li><a href="https://cubic-bezier.com/#.4,-0.3,1,.33">贝塞尔在线生成器</a></li></ol><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ol><li><a href="https://www.cnblogs.com/joyho/articles/4430148.html">URL 中的 hash（井号）</a></li></ol><h2 id="在网页中会引用哪些常见的静态资源？"><a href="#在网页中会引用哪些常见的静态资源？" class="headerlink" title="在网页中会引用哪些常见的静态资源？"></a>在网页中会引用哪些常见的静态资源？</h2><ul><li>JS</li></ul><ul><li>.js .jsx .coffee .ts（TypeScript 类 C# 语言）</li></ul><ul><li>CSS</li></ul><ul><li>.css .less .sass .scss</li></ul><ul><li>Images</li></ul><ul><li>.jpg .png .gif .bmp .svg</li></ul><ul><li>字体文件（Fonts）</li></ul><ul><li>.svg .ttf .eot .woff .woff2</li></ul><ul><li>模板文件</li></ul><ul><li>.ejs .jade .vue【这是在 webpack 中定义组件的方式，推荐这么用】</li></ul><h2 id="网页中引入的静态资源多了以后有什么问题？？？"><a href="#网页中引入的静态资源多了以后有什么问题？？？" class="headerlink" title="网页中引入的静态资源多了以后有什么问题？？？"></a>网页中引入的静态资源多了以后有什么问题？？？</h2><ol><li>网页加载速度慢， 因为 我们要发起很多的二次请求；</li><li>要处理错综复杂的依赖关系</li></ol><h2 id="如何解决上述两个问题"><a href="#如何解决上述两个问题" class="headerlink" title="如何解决上述两个问题"></a>如何解决上述两个问题</h2><ol><li>合并、压缩、精灵图、图片的 Base64 编码</li><li>可以使用之前学过的 requireJS、也可以使用 webpack 可以解决各个包之间的复杂依赖关系；</li></ol><h2 id="什么是-webpack"><a href="#什么是-webpack" class="headerlink" title="什么是 webpack?"></a>什么是 webpack?</h2><p>webpack 是前端的一个项目构建工具，它是基于 Node.js 开发出来的一个前端工具；</p><h2 id="如何完美实现上述的-2-种解决方案"><a href="#如何完美实现上述的-2-种解决方案" class="headerlink" title="如何完美实现上述的 2 种解决方案"></a>如何完美实现上述的 2 种解决方案</h2><ol><li>使用 Gulp， 是基于 task 任务的；</li><li>使用 Webpack， 是基于整个项目进行构建的；</li></ol><ul><li>借助于 webpack 这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能。</li><li>根据官网的图片介绍 webpack 打包的过程</li><li><a href="https://webpack.github.io/">webpack 官网</a></li></ul><h2 id="webpack-安装的两种方式"><a href="#webpack-安装的两种方式" class="headerlink" title="webpack 安装的两种方式"></a>webpack 安装的两种方式</h2><ol><li>运行<code>npm i webpack -g</code>全局安装 webpack，这样就能在全局使用 webpack 的命令</li><li>在项目根目录中运行<code>npm i webpack --save-dev</code>安装到项目依赖中</li></ol><h2 id="初步使用-webpack-打包构建列表隔行变色案例"><a href="#初步使用-webpack-打包构建列表隔行变色案例" class="headerlink" title="初步使用 webpack 打包构建列表隔行变色案例"></a>初步使用 webpack 打包构建列表隔行变色案例</h2><ol><li>运行<code>npm init</code>初始化项目，使用 npm 管理项目中的依赖包</li><li>创建项目基本的目录结构</li><li>使用<code>cnpm i jquery --save</code>安装 jquery 类库</li><li>创建<code>main.js</code>并书写各行变色的代码逻辑：</li></ol><pre><code>    // 导入jquery类库    import $ from &#39;jquery&#39;    // 设置偶数行背景色，索引从0开始，0是偶数    $(&#39;#list li:even&#39;).css(&#39;backgroundColor&#39;,&#39;lightblue&#39;);    // 设置奇数行背景色    $(&#39;#list li:odd&#39;).css(&#39;backgroundColor&#39;,&#39;pink&#39;);</code></pre><ol start="5"><li>直接在页面上引用<code>main.js</code>会报错，因为浏览器不认识<code>import</code>这种高级的 JS 语法，需要使用 webpack 进行处理，webpack 默认会把这种高级的语法转换为低级的浏览器能识别的语法；</li><li>运行<code>webpack 入口文件路径 输出文件路径</code>对<code>main.js</code>进行处理：</li></ol><pre><code>webpack src/js/main.js dist/bundle.js</code></pre><h2 id="使用-webpack-的配置文件简化打包时候的命令"><a href="#使用-webpack-的配置文件简化打包时候的命令" class="headerlink" title="使用 webpack 的配置文件简化打包时候的命令"></a>使用 webpack 的配置文件简化打包时候的命令</h2><ol><li>在项目根目录中创建<code>webpack.dev.js</code></li><li>由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以，我们需要在<code>webpack.dev.js</code>中配置这两个路径：</li></ol><pre><code>    // 导入处理路径的模块    var path = require(&#39;path&#39;);    // 导出一个配置对象，将来webpack在启动的时候，会默认来查找webpack.config.js，并读取这个文件中导出的配置对象，来进行打包处理    module.exports = &#123;        entry: path.resolve(__dirname, &#39;src/js/main.js&#39;), // 项目入口文件        output: &#123; // 配置输出选项            path: path.resolve(__dirname, &#39;dist&#39;), // 配置输出的路径            filename: &#39;bundle.js&#39; // 配置输出的文件名        &#125;    &#125;</code></pre><h2 id="实现-webpack-的实时打包构建"><a href="#实现-webpack-的实时打包构建" class="headerlink" title="实现 webpack 的实时打包构建"></a>实现 webpack 的实时打包构建</h2><ol><li>由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用<code>webpack-dev-server</code>来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</li><li>运行<code>cnpm i webpack-dev-server --save-dev</code>安装到开发依赖</li><li>安装完成之后，在命令行直接运行<code>webpack-dev-server</code>来进行打包，发现报错，此时需要借助于<code>package.json</code>文件中的指令，来进行运行<code>webpack-dev-server</code>命令，在<code>scripts</code>节点下新增<code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>指令，发现可以进行实时打包，但是 dist 目录下并没有生成<code>bundle.js</code>文件，这是因为<code>webpack-dev-server</code>将打包好的文件放在了内存中</li></ol><ul><li>把<code>bundle.js</code>放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</li><li>这个时候访问 webpack-dev-server 启动的<code>http://localhost:8080/</code>网站，发现是一个文件夹的面板，需要点击到 src 目录下，才能打开我们的 index 首页，此时引用不到 bundle.js 文件，需要修改 index.html 中 script 的 src 属性为:<code>&lt;script src=&quot;../bundle.js&quot;&gt;&lt;/script&gt;</code></li><li>为了能在访问<code>http://localhost:8080/</code>的时候直接访问到 index 首页，可以使用<code>--contentBase src</code>指令来修改 dev 指令，指定启动的根目录：</li></ul><pre><code>&quot;dev&quot;: &quot;webpack-dev-server --contentBase src&quot;</code></pre><p>同时修改 index 页面中 script 的 src 属性为<code>&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</code></p><h2 id="使用html-webpack-plugin插件配置启动页面"><a href="#使用html-webpack-plugin插件配置启动页面" class="headerlink" title="使用html-webpack-plugin插件配置启动页面"></a>使用<code>html-webpack-plugin</code>插件配置启动页面</h2><p>由于使用<code>--contentBase</code>指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 index.html 中 script 标签的 src 属性，所以推荐大家使用<code>html-webpack-plugin</code>插件配置启动页面.</p><ol><li>运行<code>cnpm i html-webpack-plugin --save-dev</code>安装到开发依赖</li><li>修改<code>webpack.dev.js</code>配置文件如下：</li></ol><pre><code>    // 导入处理路径的模块    var path = require(&#39;path&#39;);    // 导入自动生成HTMl文件的插件    var htmlWebpackPlugin = require(&#39;html-webpack-plugin&#39;);    module.exports = &#123;        entry: path.resolve(__dirname, &#39;src/js/main.js&#39;), // 项目入口文件        output: &#123; // 配置输出选项            path: path.resolve(__dirname, &#39;dist&#39;), // 配置输出的路径            filename: &#39;bundle.js&#39; // 配置输出的文件名        &#125;,        plugins:[ // 添加plugins节点配置插件            new htmlWebpackPlugin(&#123;                template:path.resolve(__dirname, &#39;src/index.html&#39;),//模板路径                filename:&#39;index.html&#39;//自动生成的HTML文件的名称            &#125;)        ]    &#125;</code></pre><ol start="3"><li>修改<code>package.json</code>中<code>script</code>节点中的 dev 指令如下：</li></ol><pre><code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code></pre><ol start="4"><li>将 index.html 中 script 标签注释掉，因为<code>html-webpack-plugin</code>插件会自动把 bundle.js 注入到 index.html 页面中！</li></ol><h2 id="实现自动打开浏览器、热更新和配置浏览器的默认端口号"><a href="#实现自动打开浏览器、热更新和配置浏览器的默认端口号" class="headerlink" title="实现自动打开浏览器、热更新和配置浏览器的默认端口号"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h2><p><strong>注意：热更新在 JS 中表现的不明显，可以从一会儿要讲到的 CSS 身上进行介绍说明！</strong></p><h3 id="方式-1："><a href="#方式-1：" class="headerlink" title="方式 1："></a>方式 1：</h3><ul><li>修改<code>package.json</code>的 script 节点如下，其中<code>--open</code>表示自动打开浏览器，<code>--port 4321</code>表示打开的端口号为 4321，<code>--hot</code>表示启用浏览器热更新：</li></ul><pre><code>&quot;dev&quot;: &quot;webpack-dev-server --hot --port 4321 --open&quot;</code></pre><h3 id="方式-2："><a href="#方式-2：" class="headerlink" title="方式 2："></a>方式 2：</h3><ol><li>修改<code>webpack.dev.js</code>文件，新增<code>devServer</code>节点如下：</li></ol><pre><code>devServer:&#123;        hot:true,        open:true,        port:4321    &#125;</code></pre><ol start="2"><li>在头部引入<code>webpack</code>模块：</li></ol><pre><code>var webpack = require(&#39;webpack&#39;);</code></pre><ol start="3"><li>在<code>plugins</code>节点下新增：</li></ol><pre><code>new webpack.HotModuleReplacementPlugin()</code></pre><h2 id="使用-webpack-打包-css-文件"><a href="#使用-webpack-打包-css-文件" class="headerlink" title="使用 webpack 打包 css 文件"></a>使用 webpack 打包 css 文件</h2><ol><li>运行<code>cnpm i style-loader css-loader --save-dev</code></li><li>修改<code>webpack.dev.js</code>这个配置文件：</li></ol><pre><code>module: &#123; // 用来配置第三方loader模块的        rules: [ // 文件的匹配规则            &#123; test: /\.css$/, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;//处理css文件的规则        ]    &#125;</code></pre><ol start="3"><li>注意：<code>use</code>表示使用哪些模块来处理<code>test</code>所匹配到的文件；<code>use</code>中相关 loader 模块的调用顺序是从后向前调用的；</li></ol><h2 id="使用-webpack-打包-less-文件"><a href="#使用-webpack-打包-less-文件" class="headerlink" title="使用 webpack 打包 less 文件"></a>使用 webpack 打包 less 文件</h2><ol><li>运行<code>cnpm i less-loader less -D</code></li><li>修改<code>webpack.dev.js</code>这个配置文件：</li></ol><pre><code>&#123; test: /\.less$/, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;less-loader&#39;] &#125;,</code></pre><h2 id="使用-webpack-打包-sass-文件"><a href="#使用-webpack-打包-sass-文件" class="headerlink" title="使用 webpack 打包 sass 文件"></a>使用 webpack 打包 sass 文件</h2><ol><li>运行<code>cnpm i sass-loader node-sass --save-dev</code></li><li>在<code>webpack.dev.js</code>中添加处理 sass 文件的 loader 模块：</li></ol><pre><code>&#123; test: /\.scss$/, use: [&#39;style-loader&#39;, &#39;css-loader&#39;, &#39;sass-loader&#39;] &#125;</code></pre><h2 id="使用-webpack-处理-css-中的路径"><a href="#使用-webpack-处理-css-中的路径" class="headerlink" title="使用 webpack 处理 css 中的路径"></a>使用 webpack 处理 css 中的路径</h2><ol><li>运行<code>cnpm i url-loader file-loader --save-dev</code></li><li>在<code>webpack.dev.js</code>中添加处理 url 路径的 loader 模块：</li></ol><pre><code>&#123; test: /\.(png|jpg|gif)$/, use: &#39;url-loader&#39; &#125;</code></pre><ol start="3"><li>可以通过<code>limit</code>指定进行 base64 编码的图片大小；只有小于指定字节（byte）的图片才会进行 base64 编码：</li></ol><pre><code>&#123; test: /\.(png|jpg|gif)$/, use: &#39;url-loader?limit=43960&#39; &#125;,</code></pre><h2 id="使用-babel-处理高级-JS-语法"><a href="#使用-babel-处理高级-JS-语法" class="headerlink" title="使用 babel 处理高级 JS 语法"></a>使用 babel 处理高级 JS 语法</h2><ol><li>运行<code>cnpm i babel-core babel-loader babel-plugin-transform-runtime --save-dev</code>安装 babel 的相关 loader 包</li><li>运行<code>cnpm i babel-preset-es2015 babel-preset-stage-0 --save-dev</code>安装 babel 转换的语法</li><li>在<code>webpack.dev.js</code>中添加相关 loader 模块，其中需要注意的是，一定要把<code>node_modules</code>文件夹添加到排除项：</li></ol><pre><code>&#123; test: /\.js$/, use: &#39;babel-loader&#39;, exclude: /node_modules/ &#125;</code></pre><ol start="4"><li>在项目根目录中添加<code>.babelrc</code>文件，并修改这个配置文件如下：</li></ol><pre><code>&#123;    &quot;presets&quot;:[&quot;es2015&quot;, &quot;stage-0&quot;],    &quot;plugins&quot;:[&quot;transform-runtime&quot;]&#125;</code></pre><ol start="5"><li><strong>注意：语法插件<code>babel-preset-es2015</code>可以更新为<code>babel-preset-env</code>，它包含了所有的 ES 相关的语法；</strong></li></ol><h2 id="相关文章-1"><a href="#相关文章-1" class="headerlink" title="相关文章"></a>相关文章</h2><p><a href="https://segmentfault.com/p/1210000008466178">babel-preset-env：你需要的唯一 Babel 插件</a><br><a href="https://segmentfault.com/a/1190000009065987">Runtime transform 运行时编译 es6</a></p><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h2><p>有时候使用<code>npm i node-sass -D</code>装不上，这时候，就必须使用 <code>cnpm i node-sass -D</code></p><h2 id="在普通页面中使用-render-函数渲染组件"><a href="#在普通页面中使用-render-函数渲染组件" class="headerlink" title="在普通页面中使用 render 函数渲染组件"></a>在普通页面中使用 render 函数渲染组件</h2><h2 id="在-webpack-中配置-vue-组件页面的解析"><a href="#在-webpack-中配置-vue-组件页面的解析" class="headerlink" title="在 webpack 中配置.vue 组件页面的解析"></a>在 webpack 中配置.vue 组件页面的解析</h2><ol><li><p>运行<code>cnpm i vue -S</code>将 vue 安装为运行依赖；</p></li><li><p>运行<code>cnpm i vue-loader vue-template-compiler -D</code>将解析转换 vue 的包安装为开发依赖；</p></li><li><p>运行<code>cnpm i style-loader css-loader -D</code>将解析转换 CSS 的包安装为开发依赖，因为.vue 文件中会写 CSS 样式；</p></li><li><p>在<code>webpack.dev.js</code>中，添加如下<code>module</code>规则：</p></li></ol><pre><code>module: &#123;    rules: [      &#123; test: /\.css$/, use: [&#39;style-loader&#39;, &#39;css-loader&#39;] &#125;,      &#123; test: /\.vue$/, use: &#39;vue-loader&#39; &#125;    ]  &#125;</code></pre><ol start="5"><li>创建<code>App.js</code>组件页面：</li></ol><pre><code>    &lt;template&gt;      &lt;!-- 注意：在 .vue 的组件中，template 中必须有且只有唯一的根元素进行包裹，一般都用 div 当作唯一的根元素 --&gt;      &lt;div&gt;        &lt;h1&gt;这是APP组件 - &#123;&#123;msg&#125;&#125;&lt;/h1&gt;        &lt;h3&gt;我是h3&lt;/h3&gt;      &lt;/div&gt;    &lt;/template&gt;    &lt;script&gt;    // 注意：在 .vue 的组件中，通过 script 标签来定义组件的行为，需要使用 ES6 中提供的 export default 方式，导出一个vue实例对象    export default &#123;      data() &#123;        return &#123;          msg: &#39;OK&#39;        &#125;      &#125;    &#125;    &lt;/script&gt;    &lt;style scoped&gt;    h1 &#123;      color: red;    &#125;    &lt;/style&gt;</code></pre><ol start="6"><li>创建<code>main.js</code>入口文件：</li></ol><pre><code>    // 导入 Vue 组件    import Vue from &#39;vue&#39;    // 导入 App组件    import App from &#39;./components/App.vue&#39;    // 创建一个 Vue 实例，使用 render 函数，渲染指定的组件    var vm = new Vue(&#123;      el: &#39;#app&#39;,      render: c =&gt; c(App)    &#125;);</code></pre><h2 id="在使用-webpack-构建的-Vue-项目中使用模板对象？"><a href="#在使用-webpack-构建的-Vue-项目中使用模板对象？" class="headerlink" title="在使用 webpack 构建的 Vue 项目中使用模板对象？"></a>在使用 webpack 构建的 Vue 项目中使用模板对象？</h2><ol><li>在<code>webpack.dev.js</code>中添加<code>resolve</code>属性：</li></ol><pre><code>resolve: &#123;    alias: &#123;      &#39;vue$&#39;: &#39;vue/dist/vue.esm.js&#39;    &#125;  &#125;</code></pre><h2 id="ES6-中语法使用总结"><a href="#ES6-中语法使用总结" class="headerlink" title="ES6 中语法使用总结"></a>ES6 中语法使用总结</h2><ol><li><p>使用 <code>export default</code> 和 <code>export</code> 导出模块中的成员; 对应 ES5 中的 <code>module.exports</code> 和 <code>export</code></p></li><li><p>使用 <code>import ** from **</code> 和 <code>import &#39;路径&#39;</code> 还有 <code>import &#123;a, b&#125; from &#39;模块标识&#39;</code> 导入其他模块</p></li><li><p>使用箭头函数：<code>(a, b)=&gt; &#123; return a-b; &#125;</code></p></li></ol><h2 id="在-vue-组件页面中，集成-vue-router-路由模块"><a href="#在-vue-组件页面中，集成-vue-router-路由模块" class="headerlink" title="在 vue 组件页面中，集成 vue-router 路由模块"></a>在 vue 组件页面中，集成 vue-router 路由模块</h2><p><a href="https://router.vuejs.org/">vue-router 官网</a></p><ol><li>导入路由模块：</li></ol><pre><code>import VueRouter from &#39;vue-router&#39;</code></pre><ol start="2"><li>安装路由模块：</li></ol><pre><code>Vue.use(VueRouter);</code></pre><ol start="3"><li>导入需要展示的组件:</li></ol><pre><code>import login from &#39;./components/account/login.vue&#39;import register from &#39;./components/account/register.vue&#39;</code></pre><ol start="4"><li>创建路由对象:</li></ol><pre><code>var router = new VueRouter(&#123;  routes: [    &#123; path: &#39;/&#39;, redirect: &#39;/login&#39; &#125;,    &#123; path: &#39;/login&#39;, component: login &#125;,    &#123; path: &#39;/register&#39;, component: register &#125;  ]&#125;);</code></pre><ol start="5"><li>将路由对象，挂载到 Vue 实例上:</li></ol><pre><code>var vm = new Vue(&#123;  el: &#39;#app&#39;,  // render: c =&gt; &#123; return c(App) &#125;  render(c) &#123;    return c(App);  &#125;,  router // 将路由对象，挂载到 Vue 实例上&#125;);</code></pre><ol start="6"><li>改造 App.vue 组件，在 template 中，添加<code>router-link</code>和<code>router-view</code>：</li></ol><pre><code>    &lt;router-link to=&quot;/login&quot;&gt;登录&lt;/router-link&gt;    &lt;router-link to=&quot;/register&quot;&gt;注册&lt;/router-link&gt;    &lt;router-view&gt;&lt;/router-view&gt;</code></pre><h2 id="组件中的-css-作用域问题"><a href="#组件中的-css-作用域问题" class="headerlink" title="组件中的 css 作用域问题"></a>组件中的 css 作用域问题</h2><h2 id="抽离路由为单独的模块"><a href="#抽离路由为单独的模块" class="headerlink" title="抽离路由为单独的模块"></a>抽离路由为单独的模块</h2><h2 id="使用-饿了么的-MintUI-组件"><a href="#使用-饿了么的-MintUI-组件" class="headerlink" title="使用 饿了么的 MintUI 组件"></a>使用 饿了么的 MintUI 组件</h2><p><a href="https://github.com/ElemeFE/mint-ui">Github 仓储地址</a></p><p><a href="https://mint-ui.github.io/#!/zh-cn">Mint-UI 官方文档</a></p><ol><li>导入所有 MintUI 组件：</li></ol><pre><code>import MintUI from &#39;mint-ui&#39;</code></pre><ol start="2"><li>导入样式表：</li></ol><pre><code>import &#39;mint-ui/lib/style.css&#39;</code></pre><ol start="3"><li>在 vue 中使用 MintUI：</li></ol><pre><code>Vue.use(MintUI)</code></pre><ol start="4"><li>使用的例子：</li></ol><pre><code>&lt;mt-button type=&quot;primary&quot; size=&quot;large&quot;&gt;primary&lt;/mt-button&gt;</code></pre><h2 id="使用-MUI-组件"><a href="#使用-MUI-组件" class="headerlink" title="使用 MUI 组件"></a>使用 MUI 组件</h2><p><a href="https://dev.dcloud.net.cn/mui/">官网首页</a></p><p><a href="https://dev.dcloud.net.cn/mui/ui/">文档地址</a></p><ol><li>导入 MUI 的样式表：</li></ol><pre><code>import &#39;../lib/mui/css/mui.min.css&#39;</code></pre><ol start="2"><li>在<code>webpack.dev.js</code>中添加新的 loader 规则：</li></ol><pre><code>&#123; test: /\.(png|jpg|gif|ttf)$/, use: &#39;url-loader&#39; &#125;</code></pre><ol start="3"><li>根据官方提供的文档和 example，尝试使用相关的组件</li></ol><h2 id="将项目源码托管到-oschina-中"><a href="#将项目源码托管到-oschina-中" class="headerlink" title="将项目源码托管到 oschina 中"></a>将项目源码托管到 oschina 中</h2><ol><li><p>点击头像 -&gt; 修改资料 -&gt; SSH 公钥 <a href="https://git.mydoc.io/?t=154712">如何生成 SSH 公钥</a></p></li><li><p>创建自己的空仓储，使用 <code>git config --global user.name &quot;用户名&quot;</code> 和 <code>git config --global user.email ***@**.com</code> 来全局配置提交时用户的名称和邮箱</p></li><li><p>使用 <code>git init</code> 在本地初始化项目</p></li><li><p>使用 <code>touch README.md</code> 和 <code>touch .gitignore</code> 来创建项目的说明文件和忽略文件；</p></li><li><p>使用 <code>git add .</code> 将所有文件托管到 git 中</p></li><li><p>使用 <code>git commit -m &quot;init project&quot;</code> 将项目进行本地提交</p></li><li><p>使用 <code>git remote add origin 仓储地址</code>将本地项目和远程仓储连接，并使用 origin 最为远程仓储的别名</p></li><li><p>使用 <code>git push -u origin master</code> 将本地代码 push 到仓储中</p></li></ol><h2 id="App-vue-组件的基本设置"><a href="#App-vue-组件的基本设置" class="headerlink" title="App.vue 组件的基本设置"></a>App.vue 组件的基本设置</h2><ol><li><p>头部的固定导航栏使用 <code>Mint-UI</code> 的 <code>Header</code> 组件；</p></li><li><p>底部的页签使用 <code>mui</code> 的 <code>tabbar</code>;</p></li><li><p>购物车的图标，使用 <code>icons-extra</code> 中的 <code>mui-icon-extra mui-icon-extra-cart</code>，同时，应该把其依赖的字体图标文件 <code>mui-icons-extra.ttf</code>，复制到 <code>fonts</code> 目录下！</p></li><li><p>将底部的页签，改造成 <code>router-link</code> 来实现单页面的切换；</p></li><li><p>Tab Bar 路由激活时候设置高亮的两种方式：</p></li></ol><ul><li>全局设置样式如下：</li></ul><pre><code>    .router-link-active&#123;         color:#007aff !important;   &#125;</code></pre><ul><li>或者在 <code>new VueRouter</code> 的时候，通过 <code>linkActiveClass</code> 来指定高亮的类：</li></ul><pre><code>    // 创建路由对象   var router = new VueRouter(&#123;     routes: [       &#123; path: &#39;/&#39;, redirect: &#39;/home&#39; &#125;     ],     linkActiveClass: &#39;mui-active&#39;   &#125;);</code></pre><h2 id="实现-tabbar-页签不同组件页面的切换"><a href="#实现-tabbar-页签不同组件页面的切换" class="headerlink" title="实现 tabbar 页签不同组件页面的切换"></a>实现 tabbar 页签不同组件页面的切换</h2><ol><li><p>将 tabbar 改造成 <code>router-link</code> 形式，并指定每个连接的 <code>to</code> 属性；</p></li><li><p>在入口文件中导入需要展示的组件，并创建路由对象：</p></li></ol><pre><code>    // 导入需要展示的组件    import Home from &#39;./components/home/home.vue&#39;    import Member from &#39;./components/member/member.vue&#39;    import Shopcar from &#39;./components/shopcar/shopcar.vue&#39;    import Search from &#39;./components/search/search.vue&#39;    // 创建路由对象    var router = new VueRouter(&#123;      routes: [        &#123; path: &#39;/&#39;, redirect: &#39;/home&#39; &#125;,        &#123; path: &#39;/home&#39;, component: Home &#125;,        &#123; path: &#39;/member&#39;, component: Member &#125;,        &#123; path: &#39;/shopcar&#39;, component: Shopcar &#125;,        &#123; path: &#39;/search&#39;, component: Search &#125;      ],      linkActiveClass: &#39;mui-active&#39;    &#125;);</code></pre><h2 id="使用-mt-swipe-轮播图组件"><a href="#使用-mt-swipe-轮播图组件" class="headerlink" title="使用 mt-swipe 轮播图组件"></a>使用 mt-swipe 轮播图组件</h2><ol><li>假数据：</li></ol><pre><code>lunbo: [        &#39;http://www.itcast.cn/images/slidead/BEIJING/2017440109442800.jpg&#39;,        &#39;http://www.itcast.cn/images/slidead/BEIJING/2017511009514700.jpg&#39;,        &#39;http://www.itcast.cn/images/slidead/BEIJING/2017421414422600.jpg&#39;      ]</code></pre><ol start="2"><li>引入轮播图组件：</li></ol><pre><code>&lt;!-- Mint-UI 轮播图组件 --&gt;    &lt;div class=&quot;home-swipe&quot;&gt;      &lt;mt-swipe :auto=&quot;4000&quot;&gt;        &lt;mt-swipe-item v-for=&quot;(item, i) in lunbo&quot; :key=&quot;i&quot;&gt;          &lt;img :src=&quot;item&quot; alt=&quot;&quot;&gt;        &lt;/mt-swipe-item&gt;      &lt;/mt-swipe&gt;    &lt;/div&gt;  &lt;/div&gt;</code></pre><h2 id="在-vue组件中使用vue-resource获取数据"><a href="#在-vue组件中使用vue-resource获取数据" class="headerlink" title="在.vue组件中使用vue-resource获取数据"></a>在<code>.vue</code>组件中使用<code>vue-resource</code>获取数据</h2><ol><li><p>运行<code>cnpm i vue-resource -S</code>安装模块</p></li><li><p>导入 vue-resource 组件</p></li></ol><pre><code>import VueResource from &#39;vue-resource&#39;</code></pre><ol start="3"><li>在 vue 中使用 vue-resource 组件</li></ol><pre><code>Vue.use(VueResource);</code></pre><h2 id="键盘修饰符以及自定义键盘修饰符"><a href="#键盘修饰符以及自定义键盘修饰符" class="headerlink" title="键盘修饰符以及自定义键盘修饰符"></a><a href="https://cn.vuejs.org/v2/guide/events.html#%E9%94%AE%E5%80%BC%E4%BF%AE%E9%A5%B0%E7%AC%A6">键盘修饰符以及自定义键盘修饰符</a></h2><ol><li>通过<code>Vue.config.keyCodes.名称 = 按键值</code>来自定义案件修饰符的别名：</li></ol><pre><code>Vue.config.keyCodes.f2 = 113;</code></pre><ol start="2"><li>使用自定义的按键修饰符：</li></ol><pre><code>&lt;input type=&quot;text&quot; v-model=&quot;name&quot; @keyup.f2=&quot;add&quot;&gt;</code></pre><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a><a href="https://cn.vuejs.org/v2/guide/custom-directive.html">自定义指令</a></h2><ol><li>自定义全局和局部的 自定义指令：</li></ol><pre class=" language-js"><code class="language-js">    <span class="token comment" spellcheck="true">// 自定义全局指令 v-focus，为绑定的元素自动获取焦点：</span>    Vue<span class="token punctuation">.</span><span class="token function">directive</span><span class="token punctuation">(</span><span class="token string">'focus'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      inserted<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// inserted 表示被绑定元素插入父节点时调用</span>        el<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自定义局部指令 v-color 和 v-font-weight，为绑定的元素设置指定的字体颜色 和 字体粗细：</span>      directives<span class="token punctuation">:</span> <span class="token punctuation">{</span>        color<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 为元素设置指定的字体颜色</span>          <span class="token function">bind</span><span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding<span class="token punctuation">)</span> <span class="token punctuation">{</span>            el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> binding<span class="token punctuation">.</span>value<span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token string">'font-weight'</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>el<span class="token punctuation">,</span> binding2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 自定义指令的简写形式，等同于定义了 bind 和 update 两个钩子函数</span>          el<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontWeight <span class="token operator">=</span> binding2<span class="token punctuation">.</span>value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span></code></pre><ol start="2"><li>自定义指令的使用方式：</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>  <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchName<span class="token punctuation">"</span></span>  <span class="token attr-name">v-focus</span>  <span class="token attr-name">v-color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>red<span class="token punctuation">'</span><span class="token punctuation">"</span></span>  <span class="token attr-name">v-font-weight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>900<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="相关文章-2"><a href="#相关文章-2" class="headerlink" title="相关文章"></a>相关文章</h2><ol><li><a href="https://v1-cn.vuejs.org/">vue.js 1.x 文档</a></li><li><a href="https://cn.vuejs.org/">vue.js 2.x 文档</a></li><li><a href="https://www.css88.com/archives/7715">String.prototype.padStart(maxLength, fillString)</a></li><li><a href="https://www.cnblogs.com/wuhua1/p/6686237.html">js 里面的键盘事件对应的键码</a></li><li><a href="https://www.cnblogs.com/kidney/p/6052935.html">Vue.js 双向绑定的实现原理</a></li></ol><h2 id="Vue-调试工具vue-devtools的安装步骤和使用"><a href="#Vue-调试工具vue-devtools的安装步骤和使用" class="headerlink" title="Vue 调试工具vue-devtools的安装步骤和使用"></a>Vue 调试工具<code>vue-devtools</code>的安装步骤和使用</h2><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?hl=zh-CN">Vue.js devtools - 翻墙安装方式 - 推荐</a></p><h2 id="nrm的安装使用"><a href="#nrm的安装使用" class="headerlink" title="nrm的安装使用"></a><code>nrm</code>的安装使用</h2><p>作用：提供了一些最常用的 NPM 包镜像地址，能够让我们快速的切换安装包时候的服务器地址；<br>什么是镜像：原来包刚一开始是只存在于国外的 NPM 服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的 NPM 服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；</p><ol><li>运行<code>npm i nrm -g</code>全局安装<code>nrm</code>包；</li><li>使用<code>nrm ls</code>查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；</li><li>使用<code>nrm use npm</code>或<code>nrm use taobao</code>切换不同的镜像源地址；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2019/09/19/bi-ji-react/"/>
      <url>/2019/09/19/bi-ji-react/</url>
      
        <content type="html"><![CDATA[<h1 id="React"><a href="#React" class="headerlink" title="React"></a>React</h1><p><a href="https://github.com/Hojondo/reactDemo">demo 地址</a><br>React 的世界里一切皆是组件，我们使用 class 语法构建一个最基本的组件，组件的使用方式和 HTML 相同，组件的 render 函数返回页面渲染的一个 JSX，然后使用 ReactDom 渲染到页面里</p><h2 id="React-和-Vue-的对比"><a href="#React-和-Vue-的对比" class="headerlink" title="React 和 Vue 的对比"></a>React 和 Vue 的对比</h2><p>组件化方面</p><ol><li>模块化： 从代码的角度进行分析，把一些可复用的代码抽离成单个模块，便于项目维护和开发；如 Node</li><li>组件化：从 UI 界面角度进行分析，把一些可复用的 UI 元素，抽离为单独的组件。</li><li>Vue 如何实现组件化：<code>.vue</code>文件<ul><li>template 结构</li><li>script 行为</li><li>style 样式</li></ul></li><li>React 如何实现组件化：一切以 js 来表现。ES6、ES7（async 和 await…）</li></ol><p>移动 APP 开发体验方面</p><ul><li>VUE 是 结合 Week（阿里）</li><li>React, 结合 ReactNative</li></ul><h2 id="几个核心概念"><a href="#几个核心概念" class="headerlink" title="几个核心概念"></a>几个核心概念</h2><ol><li><p><strong>虚拟 DOM</strong></p><p>为了实现 DOM 元素的高效更新，性能问题，频繁操作 DOM</p><p>需要<strong>按需渲染</strong>，</p><p>获取内存中的新旧 DOM 树，对比，按需更新 DOM，浏览器中并无直接提供获取 DOM 树的 API，因此 用 js 对象模拟新旧 DOM 树的虚拟 DOM 出现了。</p></li><li><p><strong>DIFF 算法</strong></p><p>新旧 DOM 树的对比</p><ul><li>tree diff： 新旧两颗 DOM 树，逐层对比的过程</li><li>Component diff：在进行 tree diff 过程中，每一层中 组件级别的对比。</li><li>Element diff ：在进行 component diff 过程中，如果两个组件类型相同，则进行元素级别的对比。</li></ul></li></ol><p>实践步骤：</p><h3 id="webpack4-x-和-3-的简述差别"><a href="#webpack4-x-和-3-的简述差别" class="headerlink" title="webpack4.x 和 3 的简述差别"></a>webpack4.x 和 3 的简述差别</h3><p>约定大于配置，如 约定的入口路径是 src -&gt; index.js，不用再写 entry 字段</p><p>新增 mode 值</p><h2 id="项目实践流程"><a href="#项目实践流程" class="headerlink" title="项目实践流程"></a>项目实践流程</h2><ol><li><p><code>npm init -y</code></p></li><li><p>建目录 src 和 dist</p></li><li><p>安装 webpack4 及相关</p><p><code>npm i webpack webpack-cli -D</code></p><p><code>npm i webpack-dev-server -D</code></p></li><li><p>新建<code>webpack.config.js</code>，配置</p></li></ol><ol start="5"><li><p>安装 react</p><p><code>npm i react react-dom -S</code></p><p>react 包是专门用来创建组件和 js 虚拟 DOM 的，同时组件的生命周期都在这个包里</p><p>React-dom 是 专门进行 DOM 渲染和操作的，最主要的应用场景是<code>ReactDOM.render()</code></p></li><li><p>在<code>index.html</code>中 创建容器以供入口 js 调用 render</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre></li><li><p>导入包 在入口文件<code>index.js</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDom <span class="token keyword">from</span> <span class="token string">"react-dom"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建虚拟DOM元素</span><span class="token keyword">const</span> myDiv <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">"div"</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token punctuation">:</span> <span class="token string">"xx"</span><span class="token punctuation">,</span> style<span class="token punctuation">:</span> <span class="token punctuation">{</span> display<span class="token punctuation">:</span> <span class="token string">"block"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"哈哈哈"</span><span class="token punctuation">,</span>  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"p"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// const myDiv = &lt;div id="d1">第一个div元素&lt;/div>;</span><span class="token comment" spellcheck="true">// 使用ReactDom 吧虚拟DOM渲染到页面上</span><span class="token comment" spellcheck="true">// 参数1 要渲染的那个虚拟DOM元素</span><span class="token comment" spellcheck="true">// 参数2 指定页面上的一个DOM容器</span>ReactDom<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>myDiv<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><ol start="8"><li><p>安装<code>babel</code>插件</p><p><code>npm i babel-core babel-loader babel-plugin-transform-runtime -D</code></p><p>语法包 <code>npm i babel-preset-env babel-preset-stage-0 -D</code></p><p>能够识别转换 jsx 的语法包<code>npm i babel-preset-react -D</code></p></li><li><p><code>Webpack.config.js</code>中配置 babel-loader</p></li><li><p>配置<code>.babelrc</code>配置文件</p></li></ol><pre class=" language-json"><code class="language-json"><span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"env"</span><span class="token punctuation">,</span><span class="token string">"stage-0"</span><span class="token punctuation">,</span><span class="token string">"react"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre><h2 id="JSX-语法"><a href="#JSX-语法" class="headerlink" title="JSX 语法"></a>JSX 语法</h2><ul><li><p>jsx 语法的本质：并不是直接把 jsx 渲染到页面上，而是内部先转换成了 createElement 形式，再渲染的</p></li><li><p>jsx 中混合写入 js 表达式：在 jsx 语法中把 js 代码写在<code>&#123;&#125;</code>中</p><p>包括：渲染数字、字符串、布尔值、为属性绑定值、渲染 jsx 元素、渲染 jsx 元素数组、将普通字符数组转为 jsx 数组并渲染到页面上</p></li><li><p>注释</p></li><li><p>标签必须成堆出现，如果是单标签，则必须自闭合</p></li><li><p>在 jsx 中创建 DOM 的时候，所有的节点，必须有唯一的跟元素进行包裹</p></li><li><p>特殊的属性，使用<code>className</code>来代替<code>class</code>，<code>htmlFor</code>代替 label 的<code>for</code>属性</p></li><li><p>标签上写 style 的话，要用 js 对象</p></li><li><p>css 模块化</p><p><code>npm i style-loader css-loader -D</code>；</p><p>配置 webpack.config.js 的 rules</p><pre class=" language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// webpack.config.js</span> <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>                  localIdentName<span class="token punctuation">:</span> <span class="token string">'[path][name]-[local]-[hash:5]'</span>              <span class="token punctuation">}</span><span class="token punctuation">,</span>              sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">'sass-loader'</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>组件中<code>import cssobj from &#39;./demoStyle.css&#39;</code></p><p>给 css 模块化<code>use[&#39;css-loader?modules&#39;]</code>，但是模块化只针对.class 和#id 选择器，不会将标签选择器模块化</p><p>给 css 自定义生成类名格式<code>use[&#39;css-loader?localIdentName=[path][name][local][hash:6]&#39;]</code></p><p>其可选参数是：</p><ul><li>[path]表示样式表相对于项目根目录所在路径</li><li>[name]表示样式表文件名称</li><li>[local]表示样式的类名定义名称</li><li>[hash:length]表示最多 32 位的 hash 值</li></ul><p>css 可选<code>:local()</code>(开启 modules 之后默认 不用写)或者全局<code>:global(.xxclass)</code>(不会被模块化)</p><p>对于第三方的样式表，规定都以.css 结尾，这样的话 我们不会为普通的.css 启用模块化 直接 import ‘bootstrap’就好，自己的样式表都以.scss 或.less 结尾，于是 只为<code>.scss</code>或<code>.less</code>文件启用模块化</p><p>安装<code>npm i sass-loader node-sass -D</code></p></li><li><p>绑定事件<br>事件绑定机制，相对于原生，是小驼峰命名，事件值必须是函数<br><code>button onClick=&#123;function()&#123;&#125;&#125;&gt;按钮&lt;/button&gt;</code><br><code>&lt;button className=&quot;Btn&quot; onClick=&#123;() =&gt; this.myClickFn()&#125;&gt;点击&lt;/button&gt;</code></p></li></ul><h2 id="组件-创建组件的两种方式"><a href="#组件-创建组件的两种方式" class="headerlink" title="组件 - 创建组件的两种方式"></a>组件 - 创建组件的两种方式</h2><ul><li>父组件向子组件传递数据</li><li>使用{…obj}属性扩散传递数据</li><li>注意：组件的名称必须是大写</li><li>将组件封装到单独的文件中</li><li>引入时省略<code>.jsx</code>后缀名</li></ul><ol><li><p><strong>函数式组件</strong> - 使用构造函数创建组件<br>没有 state 状态，可以使用 Hooks<br>如果要接受外间传递的数据，需要在构造函数的参数列表中使用 props 来接收<br>必须向外 return 一个合法的 jsx 创建的虚拟 dom（React 元素）</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">FunctionComponent</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>date<span class="token punctuation">,</span> setDate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//相当于componentDidMount、componentWillUnmount、componentDidUpdate的集合</span>    <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>FunctionComponent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><strong>CLASS 组件</strong> - 使用 class 关键自关键组件<br>有 state 状态</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ClassComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//存储状态</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//组件挂载完成之后执行</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//更新state，不能用this.state</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        date<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//组件卸载之前执行</span>  <span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">clearInterval</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> date <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>ClassConponent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>两者的区别</p><ol><li>class 关键子创建的组件有自己的私有数据和生命周期，但是 function 创建的组件 只有 props，没有自己的私有数据和生命周期</li><li>用构造函数创建的组件：叫做“无状态组件”，无 state 和生命周期，但是运行效率较高，很少用</li><li>用 class 关键字创建出来的组件：叫做“有状态组件”</li></ol></li></ol><h3 id="Class-组件"><a href="#Class-组件" class="headerlink" title="Class 组件"></a>Class 组件</h3><h4 id="setState"><a href="#setState" class="headerlink" title="setState"></a>setState</h4><p>因为 React 是单向绑定 单向数据流(js=&gt;界面<em>例：对于 input，需要三步，1 手动监听 onChange 事件，2 在事件中拿到最新的 e.target.value，3 调用 this.setState({})</em>)，如果要为 state 中的数据重新赋值，要用 react 提供的<code>setState(updater, [callback])</code><br>将 setState() 视为请求而不是立即更新组件的命令。React 会延迟调用它，然后通过一次传递更新多个组件。React 并不会保证 state 的变更会立即生效。因为他会是将对组件 state 的更改排入队列，并通知 React 需要使用更新后的 state 重新渲染此组件及其子组件。<strong>在合成时间和生命周期中是异步的批量更新，在 setTimeout 和原生事件中和回调中是同步的</strong><br>通常第一个参数 updater 接受对象类型，如需基于之前的 state 来设置当前的 state，请将<code>updater</code>作为函数<code>(state, props) =&gt; stateChange</code>,updater 函数中接收的 state 和 props 都保证为最新。updater 的返回值会与 state 进行浅合并。</p><h4 id="react-的生命周期"><a href="#react-的生命周期" class="headerlink" title="react 的生命周期"></a>react 的生命周期</h4><p><strong>旧的生命周期：</strong></p><p><img src="https://i.loli.net/2020/06/29/YmHfXg3ie9hOQvG.png" alt="image.png"></p><ol><li>组件创建阶段，只执行一次<ul><li><code>componentWillMount</code></li><li><code>render</code></li><li><code>componentDidMount</code></li></ul></li><li>组件运行阶段，根据 props 属性或 state 状态数据的改变，有选择的执行 0 到多次<ul><li><code>componentWillReceiveProps(nextProps)</code>：<ol><li>该方法只在 props 引起的组件更新过程中，才会被调用。state 引起的组件更新并不会触发。</li><li>nextProps 是父组件传递给当前组件的新的 props</li><li>nextProps 的值可能与子组件当前 props 的值相同，因此往往需要比较他俩的值来决定是否执行 props 发生变化后的逻辑。</li><li>在该方法中调用 setState，只有 render 以及之后的方法中。this.state 指向的才是更新后的 state。在之前的 shouldComponentUpdate、componentWillUpdate 中。this.state 指向的还是更新前的 state</li></ol></li><li><code>shouldComponentUpdate</code></li><li><code>componentWillUpdate</code></li><li><code>render</code></li><li><code>componentDidupdate</code><br><em>shouldComponentUpdate 与 componentWillUpdate 中不能调用 this.setState,否则会引起循环调用问题，render 永远无法被调用，组件也永远无法渲染</em></li></ul></li><li>组件销毁阶段，只执行一次<ul><li><code>componentWillUnmount</code></li></ul></li></ol><p><strong>新的 v16.4 之后生命周期</strong></p><blockquote><p>图示<a href="https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/">来源</a></p><p><img src="https://i.loli.net/2019/12/27/ApcXH3ybk7KGd9h.png" alt="image.png"></p></blockquote><p><a href="https://juejin.im/post/5b6f1800f265da282d45a79a">生命周期详解 参考教程</a><br><a href="https://www.izhaoo.com/2020/05/17/react-lifecycle/">https://www.izhaoo.com/2020/05/17/react-lifecycle/</a></p><ol><li><p>挂载阶段</p><ul><li><p><code>constructor</code></p></li><li><p><code>static getDerivedStateFromProps(props, state)</code><em>[新增]</em> ：</p><ol><li>一个静态方法 基于 props 的派生 state，会在调用 render 方法之前调用，并且在初始挂载及后续更新时都会被调用。它应返回一个对象来更新 state，如果返回 null 则不更新任何内容。不能在此函数里面使用 this，这个函数有两个参数 props 和 state，分别指接收到的新参数和当前的 state 对象</li><li>此方法适用于罕见的用例，即 state 的值在任何时候都取决于 props。</li><li>该函数会在挂载时，接收到新的 props，调用了<code>setState</code>和<code>forceUpdate</code>时被调用,这个方法就是为了取代之前的<code>componentWillMount</code>、<code>componentWillReceiveProps</code>和<code>componentWillUpdate</code></li><li><em>getDeriveStateFromProps 被设计成一个 static 方法，就是纯粹的获取父组件 props，增量更新本组件的 state</em></li></ol></li><li><p><del><code>componentWillMount/UNSAFE_componentWillMount</code><em>[废弃]</em></del></p></li><li><p><code>render</code></p></li><li><p><code>componentDidMount</code></p><ol><li>依赖 DOM 节点的操作可以放到这个方法中。这个方法通常还用于向服务端请求数据</li></ol></li></ul></li><li><p>更新阶段<br>组件被挂载到 DOM 后，组件的 props 或 state 改变会引起组件的更新。<br>props 引起的更新，本质上是由渲染该组件的父组件引起的(也就是当父组件的 render 方法被调用时，组件会发生更新过程)，无论 props 是否改变，父组件 render 方法每一次调用，都会导致组件更新。<br>state 引起的组件更新，是通过 this.setState 修改组件的 state 触发的。</p><ul><li><p><del><code>componentWillReceiveProps/UNSAFE_componentWillReceiveProps</code><em>[废弃]</em></del></p></li><li><p><code>static getDerivedStateFromProps(props, state)</code><em>[新增]</em> ：同上</p></li><li><p><code>shouldComponentUpdate(nextProps,nextState)</code>：</p><ol><li>该方法决定组件是否继续执行更新过程。当该方法返回 true(默认值)时继续执行，返回 false 时停止执行</li><li>一般通过比较 nextProps、nextState 与组件当前的 props、state 来决定返回值。</li><li>该方法可用来减少不必要的渲染，从而优化组件的性能</li></ol></li><li><p><del><code>componentWillUpdate/UNSAFE_componentWillUpdate</code><em>[废弃]</em></del></p></li><li><p><code>render</code></p></li><li><p><code>getSnapshotBeforeUpdate(prevProps, prevState)</code><em>[新增]</em> ：</p><ol><li>这个方法在<code>render</code>之后，<code>componentDidUpdate</code>之前调用，表示之前的属性和之前的 state</li><li>这个函数有一个返回值，会作为第三个参数传给<code>componentDidUpdate</code>，如果你不想要返回值，可返回 null，不写的话控制台会 warning <strong>此方法必须配合<code>componentDidUpdate</code>方法一起使用</strong></li><li><em>此方法 为了取代之前的<code>componentWillUpdate</code></em></li></ol></li><li><p><code>componentDidUpdate(prevProps, prevState, snapshot)</code></p><ol><li>当组件更新后，可以在此处对 DOM 进行操作。如果你对更新前后的 props 进行了比较，也可以选择在此处进行网络请求。（例如，当 props 未发生变化时，则不会执行网络请求）</li></ol></li></ul></li><li><p>卸载阶段</p><ul><li><code>componentWillUnmount</code></li></ul></li></ol><h4 id="组件复合"><a href="#组件复合" class="headerlink" title="组件复合"></a>组件复合</h4><ul><li>组件通过<code>props</code>属性，传递给子组件数据。</li><li>相当于 VUE 的<code>slot</code>，React 中用<code>props.children</code>表示组件内子内容。</li></ul><h4 id="PureComponent"><a href="#PureComponent" class="headerlink" title="PureComponent"></a>PureComponent</h4><p>纯组件<br>即 定制了 shouldComponentUpdate(nextProps,nextState){<del><code>return nextState.xx!==this.state.xx || nextProps.xx!==this.props.xx</code></del>}后的 Component。比如如果赋予 React 组件相同的 props 和 state，render() 函数会渲染相同的内容，那么在某些情况下使用 React.PureComponent 可提高性能</p><ul><li>必须要用<strong>class 组件</strong>形式，⽽且要注意是<strong>浅比较</strong>，只比较一层，当 xx 是对象 重新赋值时会永远判断为相等导致子组件不会更新。<em>可使用<code>immutable对象</code>加速嵌套数据的比较</em> <em>或通过解构赋值/Object.assign 给 state 第一层属性重新赋值新 obj</em></li><li>其中定制的<code>shouldComponentUpdate(nextProps,nextState)</code>将跳过所有子组件树的 prop 更新。因此，请确保所有子组件也都是纯组件，否则即使有自定义 shouldComponentUpdate 也会被 warning&amp;忽视</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">PureComponentPage1</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">HookPage</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 声明⼀一个叫 “count” 的 state 变量量，初始化为0</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>h3<span class="token operator">></span>HookPage<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>count<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>add<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="Hook-使用规则"><a href="#Hook-使用规则" class="headerlink" title="Hook 使用规则"></a>Hook 使用规则</h4><ul><li>只能在 <strong>函数最外层</strong> 调用 Hook。不要在循环、条件判断或者子函数中调⽤。</li><li>只能在 <strong>函数组件/自定义 Hook</strong> 中调用 Hook。不要在其他普通 JavaScript 函数中调用。</li></ul><h4 id="几个-Hook-方法"><a href="#几个-Hook-方法" class="headerlink" title="几个 Hook 方法"></a><a href="https://zh-hans.reactjs.org/docs/hooks-reference.html">几个 Hook 方法</a></h4><blockquote><p><a href="https://github.com/sisterAn/blog/issues/34">Hook 方法 &amp; Class 组件生命周期关联</a> &gt; <a href="https://juejin.im/post/5dbbdbd5f265da4d4b5fe57d">几个 Hook 方法详解</a> &gt; <a href="https://juejin.im/post/5d8f478751882509563a03b3">useImperativeHandle &amp; forwardRef 用法详解</a></p></blockquote><ul><li><p><code>useState</code><br><code>const [state, setState] = useState(initialState)</code><br>返回一个 state，以及更新 state 的函数。setState(newstate | prevCount =&gt; prevCount - 1) 函数用于更新 state。它接收一个新的 state 值并将组件的一次重新渲染加入队列，如果新的 state 需要通过使用先前的 state 计算得出，那么可以将函数传递给 setState。该函数将接收先前的 state，并返回一个更新后的值</p></li><li><p><code>useEffect</code></p><pre class=" language-js"><code class="language-js"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在 componentDidMount，以及 []内变量 更改时 componentDidUpdate 执行的内容</span>  <span class="token keyword">const</span> subscription <span class="token operator">=</span> props<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 相当于 componentWillUnmount 执行的内容</span>    subscription<span class="token punctuation">.</span><span class="token function">unsubscribe</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>source<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>赋值给 useEffect 的函数会在组件渲染到屏幕之后执行<strong>与 componentDidMount 和 componentDidUpdate 相似</strong></p></li><li><p><code>useContext</code><br>useContext(MyContext) 相当于 class 组件中的 <code>static contextType = MyContext</code> 或者 <code>MyContext.Consumer</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> themes <span class="token operator">=</span> <span class="token punctuation">{</span>  light<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foreground<span class="token punctuation">:</span> <span class="token string">"#000000"</span><span class="token punctuation">,</span>    background<span class="token punctuation">:</span> <span class="token string">"#eeeeee"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  dark<span class="token punctuation">:</span> <span class="token punctuation">{</span>    foreground<span class="token punctuation">:</span> <span class="token string">"#ffffff"</span><span class="token punctuation">,</span>    background<span class="token punctuation">:</span> <span class="token string">"#222222"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>themes<span class="token punctuation">.</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>ThemeContext<span class="token punctuation">.</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span>themes<span class="token punctuation">.</span>dark<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Toolbar <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ThemeContext<span class="token punctuation">.</span>Provider<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Toolbar</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span>ThemedButton <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">ThemedButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> theme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>button style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> background<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>background<span class="token punctuation">,</span> color<span class="token punctuation">:</span> theme<span class="token punctuation">.</span>foreground <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>      I am styled by theme context<span class="token operator">!</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>useReducer</code><br><code>const [state, dispatch] = useReducer(reducer, initialArg, init)</code><br>useState 的替代方案。它接收一个形如 <code>(state, action) =&gt; newState</code> 的 reducer，并返回当前的 state 以及与其配套的 dispatch 方法。例如 state 逻辑较复杂且包含多个子值，或者下一个 state 依赖于之前的 state 等</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"increment"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"decrement"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialState<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      Count<span class="token punctuation">:</span> <span class="token punctuation">{</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"decrement"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"increment"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>惰性创建初始 state，将 init 函数作为 useReducer 的第三个参数，初始 state 将被设置为<code>init(initialArg)</code>，这么做可以将用于计算 state 的逻辑提取到 reducer 外部，这也为将来对重置 state 的 action 做处理提供了便利</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span>initialCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> initialCount <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">reducer</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"increment"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"decrement"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> count<span class="token punctuation">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"reset"</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token function">init</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Counter</span><span class="token punctuation">(</span><span class="token punctuation">{</span> initialCount <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialCount<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      Count<span class="token punctuation">:</span> <span class="token punctuation">{</span>state<span class="token punctuation">.</span>count<span class="token punctuation">}</span>      <span class="token operator">&lt;</span>button        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"reset"</span><span class="token punctuation">,</span> payload<span class="token punctuation">:</span> initialCount <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>      <span class="token operator">></span>        Reset      <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"decrement"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">-</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span> type<span class="token punctuation">:</span> <span class="token string">"increment"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li><li><p><code>useMemo</code><br><code>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b])</code><br>缓存计算数据的值<br>如下：在 a 和 b 的变量值不变的情况下，memoizedValue 的值不变。即：useMemo 函数的<strong>第一个入参函数不会被执行</strong>，从而达到节省计算量的目的</p><blockquote><p><a href="https://juejin.im/post/5dd64ae6f265da478b00e639">useMemo &amp; useCallback 对比</a></p></blockquote></li><li><p><code>useCallback</code></p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">doSomething</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>缓存函数的引用<br>如下：在 a 和 b 的变量值不变的情况下，memoizedCallback 的引用不变。即：useCallback 的<strong>第一个入参函数会被缓存</strong>，从而达到渲染性能优化的目的<br><em>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps) 。 注意依赖项数组不不会作为参数传给“创建”函数。虽然从概念上来说它表现为:所有“创建”函数中引⽤用的 值都应该出现在依赖项数组中。未来编译器器会更更加智能，届时⾃自动创建数组将成为可能</em></p></li><li><p><code>useRef</code><br><code>const refContainer = useRef(initialValue)</code><br>useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。返回的 ref 对象在组件的整个生命周期内保持不变。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">TextInputWithFocusButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> inputEl <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onButtonClick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// `current` 指向已挂载到 DOM 上的文本输入元素</span>    inputEl<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input ref<span class="token operator">=</span><span class="token punctuation">{</span>inputEl<span class="token punctuation">}</span> type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>onButtonClick<span class="token punctuation">}</span><span class="token operator">></span>Focus the input<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>请记住，当 ref 对象内容发生变化时，useRef 并不会通知你。变更 .current 属性不会引发组件重新渲染。如果想要在 React 绑定或解绑 DOM 节点的 ref 时运行某些代码，则需要使用回调 ref 来实现。</p></li><li><p><code>useImperativeHandle</code><br><code>useImperativeHandle(ref, createHandle, [deps])</code></p><blockquote><p><a href="https://stackoverflow.com/questions/57005663/when-to-use-useimperativehandle-uselayouteffect-and-usedebugvalue">when to use this Hook</a><br>useImperativeHandle 应当与 <a href="https://zh-hans.reactjs.org/docs/react-api.html#reactforwardref">forwardRef</a> 一起使用：<br>forwardRef 理解成把 useRef 实例的*指向<code>ref=&#123;xxRef&#125;</code>*向下传递给某个元素实例，目的是让父组件可以操控子组件内元素<br>而用了 useImperativeHandle 之后，useImperativeHandle 将拿到 forwardRef 传递过来的 ref，对该 ref.current 的具体实例值进行操控，</p></blockquote><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useRef<span class="token punctuation">,</span> useImperativeHandle<span class="token punctuation">,</span> forwardRef <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> parentRef<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 子组件内部自己创建 ref</span>  <span class="token keyword">let</span> focusRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> inputRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 这个函数会返回一个对象</span>  <span class="token comment" spellcheck="true">// 该对象会作为父组件 current 属性的值</span>  <span class="token comment" spellcheck="true">// 通过这种方式，父组件可以操作子组件中的多个 ref</span>  <span class="token function">useImperativeHandle</span><span class="token punctuation">(</span>parentRef<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    focusRef<span class="token punctuation">,</span>    inputRef<span class="token punctuation">,</span>    name<span class="token punctuation">:</span> <span class="token string">"计数器"</span><span class="token punctuation">,</span>    <span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      focusRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">changeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token punctuation">{</span>      inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value <span class="token operator">=</span> text<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span><span class="token operator">></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>focusRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>      <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;input ref={parentRef} type="text"/> */</span><span class="token punctuation">}</span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> FancyInputEle <span class="token operator">=</span> <span class="token function">forwardRef</span><span class="token punctuation">(</span>Child<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Home</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> parentRef <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>      <span class="token operator">&lt;</span>button        onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          parentRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parentRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>focusRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// parentRef.current.addNumber(666);// 因为子组件中没有定义这个属性，实现了保护，所以这里的代码无效</span>          parentRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">changeText</span><span class="token punctuation">(</span><span class="token string">"sd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parentRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span>      <span class="token operator">></span>        focus      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>parentRef<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>value<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FancyInputEle</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>parentRef<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FancyInputEle</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li> 写在<code>forwardRef</code>内部，<strong>限定子组件的哪些实例值可以被父组件暴漏获取/哪些属性方法可以被父组件调用,避免使用 ref 这样的命令式代码</strong>&amp;&amp;<strong>重定义事件方法使用</strong></li><li> 父组件可以操作子组件中的多个 ref</li><li> 在大多数情况下，应当避免使用 ref 这样的命令式代码。</li></ol></li><li><p><code>useLayoutEffect</code><br>其函数签名与 useEffect 相同，但它会<strong>在所有的 DOM 变更之后同步调用 effect</strong>。可以使用它来读取 DOM 布局并同步触发重渲染。在浏览器执行绘制之前，有点类似<code>componentWillMount</code>，useLayoutEffect 内部的更新计划将被同步刷新。<br><img src="https://i.loli.net/2020/07/01/fyaixejqVQI3L7E.png" alt="image.png"><br><a href="https://juejin.im/post/5dbbdbd5f265da4d4b5fe57d#heading-23">详情参考</a></p><ul><li>useEffect 在全部渲染完毕后才会执行</li><li>useLayoutEffect 会在 浏览器 layout 之后，painting 之前执行</li><li>其函数签名与 useEffect 相同，但它会在所有的 DOM 变更之后同步调用 effect</li><li>可以使用它来读取 DOM 布局并同步触发重渲染</li><li>在浏览器执行绘制之前 useLayoutEffect 内部的更新计划将被同步刷新</li><li>尽可能使用标准的 useEffect 以避免阻塞视图更新</li></ul></li><li><p><code>useDebugValue</code><br><code>useDebugValue(value, (value) =&gt; value.Fn())</code><br>在<code>自定义 hook</code>内部设置，可用于在 React 开发者工具中显示自定义 hook 的标签</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useFriendStatus</span><span class="token punctuation">(</span>friendID<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>isOnline<span class="token punctuation">,</span> setIsOnline<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span>  <span class="token comment" spellcheck="true">// 在开发者工具中的这个 Hook 旁边显示标签</span>  <span class="token comment" spellcheck="true">// e.g. "FriendStatus: Online"</span>  <span class="token function">useDebugValue</span><span class="token punctuation">(</span>isOnline <span class="token operator">?</span> <span class="token string">"Online"</span> <span class="token punctuation">:</span> <span class="token string">"Offline"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> isOnline<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接受一个格式化函数作为可选的第二个参数，该函数只有在 Hook 被检查时才会被调用。它接受 debug 值作为参数，并且会返回一个格式化的显示值。<br>例<code>useDebugValue(date, date =&gt; date.toDateString())</code></p></li></ul><h4 id="自定义-Hook"><a href="#自定义-Hook" class="headerlink" title="自定义 Hook"></a>自定义 Hook</h4><p>自定义 Hook 是⼀个函数，其名称必须以 “use” 开头，函数内部可以调⽤其他的 Hook。<br>其实就是个封装的函数</p><p>有时候我们会想要在组件之间重用一些状态逻辑。⽬前为止，有两种主流方案来解决这个问题:⾼阶组件和 render props。⾃定义 Hook 可以让你在不增加组件的情况下达到同样的目的。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">useClock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>date<span class="token punctuation">,</span> setDate<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"date effect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//只需要在didMount时候执行就可以了</span>    <span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">setDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//清除定时器，类似willUnmount</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> date<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>React-Native 的自定义 hook</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Linking<span class="token punctuation">,</span> StyleSheet<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-native"</span><span class="token punctuation">;</span><span class="token keyword">const</span> useMount <span class="token operator">=</span> <span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> useInitialURL <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>url<span class="token punctuation">,</span> setUrl<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>processing<span class="token punctuation">,</span> setProcessing<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useMount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> getUrlAsync <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Get the deep link used to open the app</span>      <span class="token keyword">const</span> initialUrl <span class="token operator">=</span> <span class="token keyword">await</span> Linking<span class="token punctuation">.</span><span class="token function">getInitialURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// The setTimeout is just for testing purpose</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setUrl</span><span class="token punctuation">(</span>initialUrl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setProcessing</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">getUrlAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> url<span class="token punctuation">,</span> processing <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> App <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> url<span class="token punctuation">:</span> initialUrl<span class="token punctuation">,</span> processing <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useInitialURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>View style<span class="token operator">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span><span class="token operator">></span>      <span class="token operator">&lt;</span>Text<span class="token operator">></span>        <span class="token punctuation">{</span>processing          <span class="token operator">?</span> <span class="token template-string"><span class="token string">`Processing the initial url from a deep link`</span></span>          <span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`The deep link is: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>initialUrl <span class="token operator">||</span> <span class="token string">"None"</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Text<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>View<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  container<span class="token punctuation">:</span> <span class="token punctuation">{</span> flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> justifyContent<span class="token punctuation">:</span> <span class="token string">"center"</span><span class="token punctuation">,</span> alignItems<span class="token punctuation">:</span> <span class="token string">"center"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><h1 id="React-router"><a href="#React-router" class="headerlink" title="React-router"></a>React-router</h1><p>react-router 包含 3 个库，react-router、react-router-dom 和 react-router-native。根据应⽤运⾏的环境选择安装 react-router-dom(在浏览器器中使用)或 react-router-native(在 rn 中使用)。react-router-dom 和 react-router-native 都依赖 react-router，所以在安装时，react-router 也会自动安装，创建 web 应⽤<br><code>npm install --save react-router-dom</code></p><h2 id="基本组件"><a href="#基本组件" class="headerlink" title="基本组件"></a>基本组件</h2><p>react-router 中奉行⼀切皆组件的思想，路由器-Router、链接-Link、路由-Route、独占-Switch、重定向-Redirect 都以组件形式存在</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Link<span class="token punctuation">,</span>Switch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">RouterPage</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>         <span class="token operator">&lt;</span>h3<span class="token operator">></span>RouterPage<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>         <span class="token operator">&lt;</span>Router<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/"</span><span class="token operator">></span>⾸首⻚页<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"/user"</span><span class="token operator">></span>⽤用户中⼼心<span class="token operator">&lt;</span><span class="token operator">/</span>Link<span class="token operator">></span>            <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 根路路由要添加exact，实现精确匹配 */</span><span class="token punctuation">}</span>            <span class="token operator">&lt;</span>Switch<span class="token operator">></span>               <span class="token operator">&lt;</span>Route                  exact                  path<span class="token operator">=</span><span class="token string">"/"</span>                  component<span class="token operator">=</span><span class="token punctuation">{</span>HomePage<span class="token punctuation">}</span>                  <span class="token comment" spellcheck="true">//children={() => &lt;div>children&lt;/div>}</span>                  <span class="token comment" spellcheck="true">//render={() => &lt;div>render&lt;/div>}</span>               <span class="token operator">/</span><span class="token operator">></span>               <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/user"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>UserPage<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>               <span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>Page404<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>         <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">HomePage</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>HomePage<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">UserPage</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>UserPage<span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Page404</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token number">404</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Route-渲染内容的三种方式"><a href="#Route-渲染内容的三种方式" class="headerlink" title="Route 渲染内容的三种方式"></a>Route 渲染内容的三种方式</h2><p>Route 渲染方式互斥，优先级:<code>children</code>&gt;<code>component</code>&gt;<code>render</code></p><ol><li><code>component=&#123;componentName&#125;</code><br>只在当 document.location 匹配的时候渲染</li><li><code>render=&#123;()=&gt;&#123;&#125;&#125;</code><br>只在当 document.location 匹配的时候渲染</li><li><code>children:&#123;()=&gt;&#123;&#125;&#125;</code><br>不管 document.location 是否匹配都会被渲染。工作方法与 render 完全一样</li></ol><h1 id="React-redux"><a href="#React-redux" class="headerlink" title="React-redux"></a>React-redux</h1><h1 id="更新重点"><a href="#更新重点" class="headerlink" title="更新重点"></a>更新重点</h1><ul><li><p>context</p><ul><li>xxContext.Provider [&amp; xxContext.Consumer] <em>Provider 的 value 值要提升到父节点的 state 变量</em></li><li>子孙组件<ul><li>class 组件： static contextType = xxContext ; const {obj} = this.context</li><li>fun 组件：const {obj} = useContext(xxContext)</li><li>两种组件都可以用：<code>&lt;xxConsumer&gt;&#123;ctx=&gt;&lt;div&gt;内部接收格式必须是函数&lt;/div&gt;&#125;&lt;/xxConsumer&gt;</code></li></ul></li></ul></li><li><p>HOC 高阶组件</p><ul><li>参数是组件，返回一个新的组件，本质上是个函数</li><li>装饰器 @xx 只能用于 class 组件</li><li>不要在 render 中（的 return 前）使用 HOC</li></ul></li><li><p>实现 fork 版 rc-field-form</p><ul><li>Form - FieldContext, FieldContext.Provider; forwardRef &amp; useImperativeHandle;</li><li>Field</li><li>useForm</li></ul></li><li><p>react-dom - Portal 传送门</p></li><li><p>reducer</p><ul><li><code>import &#123;createStore&#125; from &#39;redux&#39;</code> &amp; <code>createStore(reducerFun)</code></li><li>store.getState()</li><li>store.dispatch({type: ‘add’,payload: 100})</li><li>sotre.subscribe(()=&gt;{this.forceUpdate()})</li></ul></li><li><p>redux 中间件<br>redux 只是个纯粹的状态管理器，dispatch()参数只接收对象，默认只支持同步。为了实现异步需要中间件的支持</p><ul><li><code>createStore(reducerFn, applyMiddleware(中间件1,...中间件n))</code></li></ul><blockquote><p>tips: 函数组件中怎么实现 forceUpdate：<code>const [ignored, forceUpdate] = useReducer(x =&gt; x + 1, 0)</code><br>在 function 组件中（class 组件 setState 不会比对前后 state），因为如果前后两次的值相同，<code>useState</code>和<code>useReducer</code>都会放弃更新。而通常，不应该在 react 中修改本地 state，作为一条出路，可以用一个增长的计数器来在 state 没变的时候依然强制一次重新渲染<br>为什么函数组件需要缓存 useCallback,useMemo。<br>函数式编程的优点：自定义 hook 逻辑复用。与 UI 层脱离</p></blockquote></li></ul><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><h2 id="React-Fragment"><a href="#React-Fragment" class="headerlink" title="React.Fragment"></a>React.Fragment</h2><p><a href="https://reactjs.org/docs/fragments.html">https://reactjs.org/docs/fragments.html</a></p><h2 id="react-的父子通信"><a href="#react-的父子通信" class="headerlink" title="react 的父子通信"></a>react 的父子通信</h2><p><a href="https://segmentfault.com/a/1190000021200567">https://segmentfault.com/a/1190000021200567</a><br><a href="https://www.shuzhiduo.com/A/KE5Q3Pr0zL/">https://www.shuzhiduo.com/A/KE5Q3Pr0zL/</a><br>react 发布和订阅<br>on subcribe<br>及 与 vue 区别</p><h2 id="使用-JS-及-React-Hook-时需要注意过时闭包的坑-文中有解决方法"><a href="#使用-JS-及-React-Hook-时需要注意过时闭包的坑-文中有解决方法" class="headerlink" title="使用 JS 及 React Hook 时需要注意过时闭包的坑(文中有解决方法)"></a>使用 JS 及 React Hook 时需要注意过时闭包的坑(文中有解决方法)</h2><p><a href="https://segmentfault.com/a/1190000020805789">https://segmentfault.com/a/1190000020805789</a></p><p><a href="https://juejin.cn/post/6844903806090608647">精读《useEffect 完全指南》</a></p><ul><li><p>useEffect 中，实现 willUnmount 生命周期，当有一种情况里面包含 state 时，需要拿到最新 state 值才执行的话：<br>可以使用 useRef .current，这个值会绕过 useEffect 的 Capture Value 特性</p></li><li><p>比较 React hooks 与 React class component 的性能：<br>理论上其实就是比较 闭包与类 class 的性能，其实在现在浏览器两个差别不大。<br>如果真要吹毛求疵，hooks 可能在某些方面还有自己的优点：hooks 不需要像 class 组件一样，创建类实例、绑定事件处理器等。<br>hooks 会让你的代码结构更加简单，比如没有 hooks 之前，我们可可能更多的使用 render props、HOC、context 模式、容器组件模式等，容易导致你组件结构复杂或者嵌套，这势必对渲染有影响。<br>很多人认为 hooks 性能差， 是因为每次渲染或者更新都需要构建一个新的函数上下文来执行。<br>事实上也是这个样子，不过 React 将性能优化的方法交给了开发者来决定。比如 useCallbackuseMemo</p></li></ul><h2 id="hook-相比于-class-解决的问题"><a href="#hook-相比于-class-解决的问题" class="headerlink" title="hook 相比于 class 解决的问题"></a><a href="https://juejin.cn/post/6844904179136200712">hook 相比于 class 解决的问题</a></h2><ul><li>函数组件没有自己的 state，即无状态，都是通过 props 获取父组件的状态，hooks 提供了 useState；不能监听生命周期 -&gt; 有了 useEffect 聚合多个生命周期</li><li>hooks 写法上简洁，相关业务逻辑更聚合，使用 class 组件经常会出现一个功能出现在两个生命周期函数内的情况</li><li>计算的越少，缓存的越多，性能越好。<ol><li>纯函数 确定输入一定会确定输出，有很多优化手段，比如:虽然 fc 相比 class 每次渲染或者更新都需要构建一个新的函数上下文来执行，但是多用 useMemo,useCallback 可优化；</li><li>无副作用所以线程安全，可以使用多核(webWorker)并行计算。</li></ol></li><li>class 组件逻辑难以复用 需要使用 HOC，render props<br>想要在 class component 外部访问到 setState（ReactDispatcher），<br>class 需要利用回调函数，或者是发布订阅，比如加个 Redux，通过调用 store dispatch 间接调用到 setState。<br>而 hooks 可以使用自定义 hooks 代替 render props，如<a href="https://juejin.cn/post/6844904179136200712#heading-4">例子</a><br>所以，<br>class 组件的画风就是@connect、mapXXXToProps、subscribe、dispatch 还有各种生命周期钩子;<br>函数组件清一色的 useState，useReducer，useEffect，useXXX，setState</li></ul><h1 id="规范-amp-Reference"><a href="#规范-amp-Reference" class="headerlink" title="规范 &amp; Reference"></a>规范 &amp; Reference</h1><p>使用 JSX 隐式地依赖当前环境下有 React 这一对象，但在源码上并没有显式使用，这种情况下添加 import React from ‘react’;会造成一个没有使用的变量存在。</p><p>使用 <a href="https://www.npmjs.com/package/babel-plugin-react-require">babel-plugin-react-require</a> 插件可以很好地解决这一问题，因此无需显式地编写 import React from ‘react’;这一语句。</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eslint &amp; Tslint</title>
      <link href="/2019/09/18/bi-ji-eslint-tslint/"/>
      <url>/2019/09/18/bi-ji-eslint-tslint/</url>
      
        <content type="html"><![CDATA[<h1 id="代码检查-eslint-amp-tslint"><a href="#代码检查-eslint-amp-tslint" class="headerlink" title="代码检查 eslint &amp; tslint"></a>代码检查 eslint &amp; tslint</h1><p>目前 TypeScript 的代码检查主要有两个方案：使用 <a href="https://palantir.github.io/tslint/">TSLint</a>或使用 <a href="https://eslint.org/">ESLint</a>+ <a href="https://github.com/eslint/typescript-eslint-parser"><code>typescript-eslint-parser</code></a></p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p>如果你写自己的项目怎么折腾都没关系，但是在公司中老板希望每个人写出的代码都要符合一个统一的规则，这样别人看源码就能够看得懂，因为源码是符合统一的编码规范制定的。</p><p>那么问题来了，总不能每个人写的代码老板都要一行行代码去检查吧，这是一件很蠢的事情。凡是重复性的工作，都应该被制作成工具来节约成本。这个工具应该做两件事情：</p><ul><li>提供编码规范；</li><li>提供自动检验代码的程序，并打印检验结果：告诉你哪一个文件哪一行代码不符合哪一条编码规范，方便你去修改代码。</li></ul><p>Lint 因此而诞生。</p><h2 id="使用-Eslint"><a href="#使用-Eslint" class="headerlink" title="使用 Eslint"></a>使用 Eslint</h2><ol><li><p>确保 node npm 环境下</p></li><li><p>安装 npm 包 <code>$ npm install eslint --save-dev</code></p></li><li><p><code>package.json</code>添加<code>script</code></p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-scripts test --env=jsdom"</span><span class="token punctuation">,</span>    <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"eslint src"</span><span class="token punctuation">,</span> // 让 Lint 自动检验 src 目录下所有的 .js 文件    <span class="token property">"lint:create"</span><span class="token operator">:</span> <span class="token string">"eslint --init"</span><span class="token punctuation">}</span></code></pre></li><li><p>创建<code>.eslintrc.js/json</code> 和 <code>.eslintignore</code> 文件；或通过<code>eslint --init</code>命令初始化，在 <a href="https://eslint.cn/docs/rules/">eslint 规则表</a></p></li><li><p>编译器工具配置： <a href="https://segmentfault.com/q/1010000013857167/a-1020000013857503">webstorm 配置</a>， <a href="">vscode 配置</a></p></li></ol><p>示例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"root"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"babel-eslint"</span><span class="token punctuation">,</span>    <span class="token property">"ecmaVersion"</span><span class="token operator">:</span> <span class="token number">6</span><span class="token punctuation">,</span>    <span class="token property">"sourceType"</span><span class="token operator">:</span> <span class="token string">"module"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"browser"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"commonjs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"es6"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"eslint:recommended"</span><span class="token punctuation">,</span> <span class="token string">"google"</span><span class="token punctuation">,</span> <span class="token string">"plugin:vue/recommended"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"vue"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"comma-dangle"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"never"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"quote-props"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"error"</span><span class="token punctuation">,</span> <span class="token string">"as-needed"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"max-len"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"vue/max-attributes-per-line"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"error"</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        <span class="token property">"singleline"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token property">"multiline"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"max"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>          <span class="token property">"allowFirstLine"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"valid-jsdoc"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"linebreak-style"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li><p>eslint-loader ，用于 webpack 配置 preLoaders</p></li><li><p>结合 pre-commit，用于 git hooks，<a href="https://juejin.im/entry/58a65e6f61ff4b006c481016#%E7%BB%93%E5%90%88pre-commit%E4%BD%BF%E7%94%A8">教程</a></p></li></ul><p>…to do loading</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工程化 </tag>
            
            <tag> 代码规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小米-刷机</title>
      <link href="/2019/09/02/wan-ji-xiao-mi-shua-ji/"/>
      <url>/2019/09/02/wan-ji-xiao-mi-shua-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="小米-4-刷机"><a href="#小米-4-刷机" class="headerlink" title="小米 4 刷机"></a>小米 4 刷机</h1><p><em>最近因为旧的安卓备用机硬件瓦特了，现在二手不到 200，维修费用 70，算了，又入手一个刷机神器-小米 4，几年不碰刷机了，这次摸索花了一天时间，折腾！</em></p><h2 id="一、刷入-recovery-TWRP"><a href="#一、刷入-recovery-TWRP" class="headerlink" title="一、刷入 recovery(TWRP)"></a>一、刷入 recovery(TWRP)</h2><ul><li><p><a href="https://twrp.me/Devices/Xiaomi/">官网</a>找到自己的设备</p><p>坑：小米 4 代号是<a href="https://www.miui.com/thread-2628980-1-1.html">cancro</a>，同米 3</p></li><li><p>下载<a href="https://www.moonlol.com/adb-fastboot%E5%B7%A5%E5%85%B7%E7%B7%9A%E5%88%B7twrp-recovery-5954.html">ADB(Fastboot)工具</a>，把下载好的 twrp.img 放在该压缩包文件夹<a href="https://pan.baidu.com/s/11ATtwFH8J7o7SApJCPnOIQ">adb</a>内</p></li><li><p>手机进入 Fastboot 模式，数据线连接 Windows</p></li><li><p>在<strong>adb</strong>文件夹内运行 cmd.exe，依次输入以下<a href="https://zhuanlan.zhihu.com/p/34412300">命令</a>：</p><blockquote><pre class=" language-bash"><code class="language-bash">adb devicesadb <span class="token function">reboot</span> bootloaderfastboot flash recovery twrp.imgfastboot boot twrp.img <span class="token comment" spellcheck="true"># 此行命令可以进TWRP的rec（或者刷入TWRP后重启前按音量加减和电源键进手机rec模式）</span>fastboot <span class="token function">reboot</span></code></pre></blockquote></li><li><p>重启，刷入成功。<code>电源键</code>+<code>音量+</code>进入 recovery。</p></li></ul><h2 id="二、刷入-ROM"><a href="#二、刷入-ROM" class="headerlink" title="二、刷入 ROM"></a>二、刷入 ROM</h2><ul><li>去 miui<a href="https://miuipolska.pl/download/">波兰版官网</a>，找到自己的设备**<em>Mi 4 W/LTE</em>**，下载 ROM zip 包</li><li>手机进入 TWRP，先<code>format data</code>或<code>advanced wipe</code> <a href="https://blog.csdn.net/DXCyber409/article/details/80674946">四清</a>操作</li><li><code>Reboot system</code>重启选择<strong>重启</strong>到 Recovey（<a href="https://www.miui.com/forum.php?mod=viewthread&tid=6234383&page=1#pid160860357">重要！</a>）</li><li>手机保持开着 TWRP 模式，数据线连接电脑，文件传输复制 zip 包到手机存储空间，TWRP 点击<code>install</code>安装该 ROM</li><li>安装完成自动重启进入系统。</li></ul><h2 id="三、获取-ROOT"><a href="#三、获取-ROOT" class="headerlink" title="三、获取 ROOT"></a>三、获取 ROOT</h2><p>目前 root 不再是 superSU 的代名词(附上<a href="https://prototypez.github.io/2016/05/16/root-and-install-Xposed-framework-on-XiaoMi4-with-Android-M/">superSU 选择</a>)，随着 suerSU 原作者 chainfire 不再更新，已经不能实现一加氢氧系统安卓 8.0 和更高版本的 ROOT 了，越来越多的人转向 magisk。<a href="https://www.oneplusbbs.com/thread-4077732-1.html">教程来源</a></p><p>刷入<a href="https://sspai.com/post/53809">Magisk</a>框架之后，默认就会具备 ROOT 权限获取和管理啦，而且在 Magisk 的管理器里，还有针对指定 app 隐藏 root 权限检测的 MagiskHide，以免某些软件发现 root 了就直接自我崩溃，不给使用的情况。</p><ul><li>下载<a href="https://www.xda-developers.com/how-to-install-magisk/">magisk</a> zip 包</li><li>TWRP<code>install</code>安装</li></ul><h2 id="四、下载太极模块或-xposed-模块"><a href="#四、下载太极模块或-xposed-模块" class="headerlink" title="四、下载太极模块或 xposed 模块"></a>四、下载太极模块或 xposed 模块</h2><p><a href="https://github.com/taichi-framework/TaiChi/issues/606">注意：太极不支持 android7.0 以下系统</a></p><p>所以暂时选择<a href="https://www.oneplusbbs.com/thread-4037966-1.html">Xposed magisk 版</a></p><ul><li>下载 Xposed Installer-magisk app（magisk 模块详情中的地址已失效，在<a href="https://androidfilehost.com/?fid=5862345805528068090">androidfilehost</a>下载），在 app 内在线安装 zip 包</li><li>进入 magisk 模块下载 menu，搜索<code>Xposed framework</code>，下载安装 zip 包</li><li>重启完成</li></ul><h2 id="五、上梯子"><a href="#五、上梯子" class="headerlink" title="五、上梯子"></a>五、上梯子</h2><p>下载<a href="https://github.com/Lerist/Go-Hosts">Go Hosts</a> root 改 host 文件代替 VPN，专用源需要付费，其他源全不可用。</p>]]></content>
      
      
      <categories>
          
          <category> 玩机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2019/09/02/bi-ji-typescript/"/>
      <url>/2019/09/02/bi-ji-typescript/</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><hr><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>TypeScript 是 JavaScript 的一个超集，主要提供了<strong>类型系统</strong>和<strong>对 ES6 的支持</strong>，它由 Microsoft 开发，代码开源<a href="https://github.com/Microsoft/TypeScript">GitHub</a> 上。</p><blockquote><p>Typescript 编译原理<br><a href="https://jkchao.github.io/typescript-book-chinese/compiler/overview.html">https://jkchao.github.io/typescript-book-chinese/compiler/overview.html</a></p></blockquote><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>可以在编译阶段就发现大部分错误，这总比在运行时候出错好</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// TypeScript 中，使用 : 指定变量的类型，: 的前后有没有空格都可以。</span><span class="token keyword">function</span> <span class="token function">alertName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"My name is Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><p>JavaScript 的类型分为两种：原始数据类型（Primitive data types）和对象类型（Object types）。<br>原始数据类型包括：布尔值、数值、字符串、null、undefined 以及 ES6 中的新类型 Symbol。</p><ol><li><p>布尔值<code>boolean</code></p><p><code>let isDone: boolean = false;</code></p></li><li><p>数值<code>number</code></p><p><code>let decLiteral: number = 6;</code></p></li><li><p>字符串<code>string</code></p><p><code>let myName: string = &#39;Tom&#39;;</code></p></li><li><p>空值<code>void</code></p><blockquote><p>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 <code>void</code> 表示没有任何返回值的函数</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">alertName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"My name is Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></blockquote></li><li><p><code>null</code> 和 <code>undefined</code></p><blockquote><p>与 <code>void</code> 的区别是，<code>undefined</code> 和 <code>null</code> 是所有类型的子类型。也就是说 <code>undefined</code> 类型的变量，可以赋值给 <code>number</code> 类型的变量：</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> u<span class="token punctuation">:</span> undefined <span class="token operator">=</span> undefined<span class="token punctuation">;</span><span class="token keyword">let</span> n<span class="token punctuation">:</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这样不会报错</span><span class="token keyword">let</span> u<span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token keyword">let</span> num<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> u<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 而 void 类型的变量不能赋值给 number 类型的变量</span></code></pre></blockquote></li></ol><h3 id="Any任意值"><a href="#Any任意值" class="headerlink" title="Any任意值"></a><code>Any</code>任意值</h3><p><code>let myFavoriteNumber: any = &#39;seven&#39;;myFavoriteNumber = 7;</code></p><blockquote><ol><li>如果是一个普通类型，在赋值过程中改变类型是不被允许的，但如果是 <code>any</code> 类型，则允许被<strong>赋值</strong>为任意类型。</li><li>声明一个变量为任意值之后，对它的任何操作，返回的内容的<strong>类型</strong>都是任意值</li><li>任意值上访问任何<strong>属性</strong>都是允许，也允许调用任何<strong>方法</strong></li><li>变量如果在声明的时候，<strong>未指定</strong>其类型，那么它会被识别为任意值类型</li></ol></blockquote><h3 id="Object对象的类型-接口"><a href="#Object对象的类型-接口" class="headerlink" title="Object对象的类型 - 接口"></a><code>Object</code>对象的类型 - 接口</h3><p>在 TypeScript 中，我们使用接口（Interfaces）来定义对象的类型。</p><p><em>TypeScript 中的接口是一个非常灵活的概念，除了可用于对类的一部分行为进行抽象以外，也常用于对「对象的形状（Shape）」进行描述。</em></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义了一个接口 Person，接口一般首字母大写</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 【确定属性】</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> tom<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 定义对象变量tom，约束其形状(内部属性方法和数量)必须和接口 Person 一致，不多不少</span>  name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  readonly id<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//【只读属性】对象中的该字段 约束：只能在第一次赋值对象的时候被赋值该属性</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  age<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 【可选属性】 含义是该属性可以不存在。但仍不允许添加未定义的属性</span>  <span class="token punctuation">[</span>propName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 【任意属性】任意取 string 类型的值。并且强调：一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集,比如[propName: string]: string; 会让age 报错</span><span class="token punctuation">}</span><span class="token keyword">let</span> tom<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"Tom"</span><span class="token punctuation">,</span>  gender<span class="token punctuation">:</span> <span class="token string">"male"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="Array数组的类型"><a href="#Array数组的类型" class="headerlink" title="Array数组的类型"></a><code>Array</code>数组的类型</h3><ol><li><p>「类型 + 方括号」<code>let fibonacci: number[] = [1, 6, 2, 3, 5];</code> 不允许出现其他类型的项</p></li><li><p>数组范型（Array Generic） <code>let fibonacci: Array&lt;number&gt; = [1, 1, 2, 3, 5];</code></p></li><li><p>用接口<code>interface</code>表示数组</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">NumberArray</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 只要 index 的类型是 number，那么值的类型必须是 number</span><span class="token punctuation">}</span><span class="token keyword">let</span> fibonacci<span class="token punctuation">:</span> NumberArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li><li><p>用接口表示类数组</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，Type 'IArguments' is missing the following properties from type 'number[]': pop, push, concat, join, and 24 more；arguments 实际上是一个类数组，不能用普通的数组的方式来描述，而应该用接口</span>  <span class="token keyword">let</span> args<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>index<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>    callee<span class="token punctuation">:</span> <span class="token keyword">Function</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token operator">=</span> arguments<span class="token punctuation">;</span>  <span class="token keyword">let</span> args<span class="token punctuation">:</span> IArguments <span class="token operator">=</span> arguments<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 事实上常见的类数组都有自己的接口定义，如 `IArguments`, `NodeList`, `HTMLCollection` 等 内置对象</span><span class="token punctuation">}</span></code></pre></li><li><p>任意类型<code>any</code></p><p><code>let list:any[]=[&#39;xcatliu&#39;,25,&#123;website:&#39;https://xcatliu.com&#39;&#125;];</code></p></li></ol><h3 id="Function函数的类型"><a href="#Function函数的类型" class="headerlink" title="Function函数的类型"></a><code>Function</code>函数的类型</h3><p>两种定义函数的方式 - 函数声明 和 函数表达式</p><ol><li><p>函数声明</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 1.函数声明</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 要把输入和输出都考虑到约束数据类型</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错 入参个数必须不多不少</span></code></pre></li><li><p>函数表达式</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 2.函数表达式</span><span class="token keyword">let</span> mySum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 事实上，这样的代码只对等号右侧的匿名函数进行了类型定义，左侧是通过赋值操作进行类型推论而推断出来的</span><span class="token keyword">let</span> mySum<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 注：在 TypeScript 的类型定义中，=> 用来表示函数的定义，左边是输入类型，需要用括号括起来，右边是输出类型。不同于ES6的箭头函数</span></code></pre></li><li><p>接口 定义函数形状</p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 用接口定义函数的形状</span><span class="token keyword">interface</span> <span class="token class-name">SearchFunc</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> subString<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> mySearch<span class="token punctuation">:</span> SearchFunc<span class="token punctuation">;</span>mySearch <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>source<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> subString<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> source<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>subString<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li></ol><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 【可选参数】：用？表示【可选参数】，可选参数必须接在必需参数后面</span><span class="token comment" spellcheck="true">// 【默认值】：TypeScript 会将添加了【默认值】的参数识别为【可选参数】，不受「可选参数必须接在必需参数后面」的限制</span><span class="token comment" spellcheck="true">// 【剩余参数】：ES6 中，可以使用 ...rest 的方式获取函数中的【剩余参数】（rest 参数）,事实上，items 是一个数组。所以我们可以用数组的类型来定义它.rest 参数只能是最后一个参数</span><span class="token keyword">function</span> <span class="token function">buildName</span><span class="token punctuation">(</span>  firstName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  midName<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"cat"</span><span class="token punctuation">,</span>  array<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  lastName<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  <span class="token operator">...</span>items<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> firstName<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  items<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span>    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> tomcat <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token string">"Cat"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> tom <span class="token operator">=</span> <span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">buildName</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> underfined<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">// 【重载】：允许一个函数接受不同数量或类型的参数时，作出不同的处理</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 重复定义了多次函数 reverse，前几次都是函数定义，最后一次是函数实现</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// TypeScript 会优先从最前面的函数定义开始匹配，所以多个函数定义如果有包含关系，需要优先把精确的定义写在前面。</span></code></pre><h3 id="联合类型xx-oo"><a href="#联合类型xx-oo" class="headerlink" title="联合类型xx|oo"></a>联合类型<code>xx|oo</code></h3><p>取值可以为多种类型中的一种</p><p><code>let myFavoriteNumber: string | number;</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/*访问联合类型的属性或方法的情况：当 TypeScript 不确定一个联合类型的变量到底是哪个类型的时候，我们只能访问此联合类型的所有类型里共有的属性或方法*/</span><span class="token keyword">function</span> <span class="token function">getString</span><span class="token punctuation">(</span>something<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> something<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，因为length不是 string 和 number 的共有属性</span>  <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*联合类型的变量在被赋值的时候，会根据类型推论的规则推断出一个类型*/</span><span class="token keyword">let</span> myFavoriteNumber<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">;</span>myFavoriteNumber <span class="token operator">=</span> <span class="token string">"seven"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myFavoriteNumber<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 被推断成了 string 类型</span>myFavoriteNumber <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myFavoriteNumber<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 编译时报错，被推断成了 number 类型</span></code></pre><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><ol><li><p>如果没有明确的指定类型，那么 TypeScript 会依照类型推论（Type Inference）的规则推断出一个类型。</p><p><code>let myFavoriteNumber = &#39;seven&#39;;</code> 等价于 <code>let myFavoriteNumber: string = &#39;seven&#39;;</code></p></li><li><p>如果定义的时候没有赋值，不管之后有没有赋值，都会被推断成 <code>any</code> 类型而完全不被类型检查</p></li></ol><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>手动指定一个值的类型（通常在[联合类型中不确定哪个类型时只能访问所有类型共有的属性和方法]使用）<code>&lt;类型&gt;值</code> 或 <code>值 as 类型</code></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">getLength</span><span class="token punctuation">(</span>something<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>something<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 或 if ((something as string).length)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>something<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> something<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="声明文件"><a href="#声明文件" class="headerlink" title="声明文件"></a>声明文件</h3><p>声明语句：当我们想使用第三方库 jQuery 时，我们需要使用 <code>declare var</code>来定义它的类型，例：<code>declarevarjQuery:(selector:string)=&gt;any;</code></p><p>声明文件：通常我们会把声明语句放到一个单独的文件（<code>jQuery.d.ts</code>）中，这就是声明文件，必须以 <code>.d.ts</code>为后缀；</p><p>推荐的是使用 <code>@types</code>统一管理第三方库的声明文件，例：<code>npminstall@types/jquery --save-dev</code></p><p>手动写声明文件<a href="https://ts.xcatliu.com/basics/declaration-files">具体操作</a></p><blockquote><p>创建一个 <code>types</code>目录，专门用来管理自己写的声明文件，将 <code>foo</code>的声明文件放到 <code>types/foo/index.d.ts</code>中。这种方式需要配置下 <code>tsconfig.json</code>中的 <code>paths</code>和 <code>baseUrl</code>字段。</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"types/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p><code>Boolean</code> <code>Error</code> <code>Date</code> <code>RegExp</code></p><p><code>Document</code> <code>HTMLElement</code> <code>Event</code> <code>NodeList</code> 等 DOM、BOM 对象</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">let</span> b<span class="token punctuation">:</span> Boolean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> e<span class="token punctuation">:</span> Error <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Error occurred"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> d<span class="token punctuation">:</span> Date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> r<span class="token punctuation">:</span> RegExp <span class="token operator">=</span> <span class="token regex">/[a-z]/</span><span class="token punctuation">;</span></code></pre><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="type类型别名"><a href="#type类型别名" class="headerlink" title="type类型别名"></a><code>type</code>类型别名</h3><p>给类型 定义个变量</p><pre class=" language-typescript"><code class="language-typescript">type Name <span class="token operator">=</span> <span class="token keyword">string</span><span class="token punctuation">;</span>type NameResolver <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">string</span><span class="token punctuation">;</span>type NameOrResolver <span class="token operator">=</span> Name <span class="token operator">|</span> NameResolver<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> NameOrResolver<span class="token punctuation">)</span><span class="token punctuation">:</span> Name <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> n <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="type字符串字面量类型"><a href="#type字符串字面量类型" class="headerlink" title="type字符串字面量类型"></a><code>type</code>字符串字面量类型</h3><p>约束取值只能是某几个字符串中的一个。</p><pre class=" language-typescript"><code class="language-typescript">type EventNames <span class="token operator">=</span> <span class="token string">"click"</span> <span class="token operator">|</span> <span class="token string">"scroll"</span> <span class="token operator">|</span> <span class="token string">"mousemove"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">handleEvent</span><span class="token punctuation">(</span>ele<span class="token punctuation">:</span> Element<span class="token punctuation">,</span> event<span class="token punctuation">:</span> EventNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// do something</span><span class="token punctuation">}</span><span class="token function">handleEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"scroll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 没问题</span><span class="token function">handleEvent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"dbclick"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，event 不能为 'dbclick'</span><span class="token comment" spellcheck="true">// index.ts(7,47): error TS2345: Argument of type '"dbclick"' is not assignable to parameter of type 'EventNames'.</span></code></pre><h3 id="Tuple元组（新增"><a href="#Tuple元组（新增" class="headerlink" title="Tuple元组（新增"></a><code>Tuple</code>元组（新增</h3><p>数组合并相同类型的对象，而元组（Tuple）合并不同类型的对象，并且当添加越界的元素时，它的类型会被限制为元组中每个类型的联合类型</p><p><code>let tom:[string,number]=[&#39;Tom&#39;,25];</code></p><h3 id="enum枚举"><a href="#enum枚举" class="headerlink" title="enum枚举"></a><code>enum</code>枚举</h3><p>用于取值被限定在一定范围内的场景，比如一周只能有七天，颜色限定为红绿蓝等。枚举成员会被赋值为从 <code>0</code>开始递增的数字，同时也会对枚举值到枚举名进行反向映射</p><p><code>enumDays &#123;Sun,Mon,Tue,Wed,Thu,Fri,Sat&#125;;</code></p><p>枚举项有两种类型：<strong>常数项</strong>（constant member）和<strong>计算所得项</strong>（computed member）。<a href="https://ts.xcatliu.com/advanced/enum#chang-shu-xiang-he-ji-suan-suo-de-xiang">判断条件</a></p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>  Sun <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>  Mon <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>  Tue<span class="token punctuation">,</span>  Wed<span class="token punctuation">,</span>  Thu<span class="token punctuation">,</span>  Fri<span class="token punctuation">,</span>  Sat<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 给枚举项手动赋值； Days["Sat"] === 6</span><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>  Sun <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>  Mon<span class="token punctuation">,</span>  Tue<span class="token punctuation">,</span>  Wed<span class="token punctuation">,</span>  Thu<span class="token punctuation">,</span>  Fri<span class="token punctuation">,</span>  Sat <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token keyword">any</span><span class="token operator">></span><span class="token string">"S"</span><span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 手动赋值的枚举项可以不是数字，此时需要使用类型断言来让 tsc 无视类型检查 (编译出的 js 仍然是可用的) Days["Fri"] = 12;</span><span class="token keyword">enum</span> Days <span class="token punctuation">{</span>  Sun <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span>  Mon <span class="token operator">=</span> <span class="token number">1.5</span><span class="token punctuation">,</span>  Tue<span class="token punctuation">,</span>  Wed<span class="token punctuation">,</span>  Thu<span class="token punctuation">,</span>  Fri<span class="token punctuation">,</span>  Sat<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 手动赋值的枚举项也可以为小数或负数，此时后续未手动赋值的项的递增步长仍为1 Days["Tue"] === 2.5</span><span class="token keyword">enum</span> Color <span class="token punctuation">{</span>  Red<span class="token punctuation">,</span>  Green<span class="token punctuation">,</span>  Blue <span class="token operator">=</span> <span class="token string">"blue"</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 计算所得项</span></code></pre><ul><li><p>普通枚举</p><p>即上述例子</p></li><li><p>常数枚举<code>const enum</code></p><p>会在编译阶段被删除，并且不能包含计算成员，如果包含了计算成员会在编译阶段报错</p></li><li><p>外部枚举<code>declare enum</code></p><p>只会用于编译时的检查，编译结果中会被删除。外部枚举与声明语句一样，常出现在声明文件中</p></li><li><p>同时常数和外部也是可以的<code>declare const enum</code></p></li></ul><h3 id="class类"><a href="#class类" class="headerlink" title="class类"></a><code>class</code>类</h3><ul><li><p>类(Class)：定义了一件事物的抽象特点，包含它的属性和方法</p></li><li><p>对象（Object）：类的实例，通过 <code>new</code>生成</p></li><li><p>面向对象（OOP）的三大特性：封装、继承、多态</p></li><li><p>封装（Encapsulation）：将对数据的操作细节隐藏起来，只暴露对外的接口。外界调用端不需要（也不可能）知道细节，就能通过对外提供的接口来访问该对象，同时也保证了外界无法任意更改对象内部的数据</p></li><li><p>继承（Inheritance）：子类继承父类，子类除了拥有父类的所有特性外，还有一些更具体的特性</p></li><li><p>多态（Polymorphism）：由继承而产生了相关的不同的类，对同一个方法可以有不同的响应。比如 <code>Cat</code>和 <code>Dog</code>都继承自 <code>Animal</code>，但是分别实现了自己的 <code>eat</code>方法。此时针对某一个实例，我们无需了解它是 <code>Cat</code>还是 <code>Dog</code>，就可以直接调用 <code>eat</code>方法，程序会自动判断出来应该如何执行 <code>eat</code></p></li><li><p>存取器（getter &amp; setter）：用以改变属性的读取和赋值行为</p></li><li><p>修饰符（Modifiers）：修饰符是一些关键字，用于限定成员或类型的性质。比如 <code>public</code>表示公有属性或方法</p></li><li><p>抽象类（Abstract Class）：抽象类是供其他类继承的基类，抽象类不允许被实例化。抽象类中的抽象方法必须在子类中被实现</p></li><li><p>接口（Interfaces）：不同类之间公有的属性或方法，可以抽象成一个接口。接口可以被类实现（implements）。一个类只能继承自另一个类，但是可以实现多个接口</p></li><li><p>装饰器</p></li><li><p>mixin</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/**在原生js中*/</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用 class 定义类</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 constructor 定义构造函数</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  name <span class="token operator">=</span> <span class="token string">"Jack"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ES7 提案中 直接在类里面定义实例属性</span>  <span class="token keyword">static</span> num <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ES7 提案中 使用 static 定义一个静态属性</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*存取器*/</span>  <span class="token keyword">get</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用 getter 和 setter 可以改变属性的赋值和读取行为</span>    <span class="token keyword">return</span> <span class="token string">"Jack"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">set</span> <span class="token function">name</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"setter: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/*静态方法*/</span>  <span class="token keyword">static</span> <span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 它们不需要实例化，而是直接通过类来调用</span>    <span class="token keyword">return</span> a <span class="token keyword">instanceof</span> <span class="token class-name">Animal</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// setter: Kitty; 构造并且走set方法</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// My name is Jack</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// setter: Tom;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jack; 走get方法</span>Animal<span class="token punctuation">.</span><span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true; 走静态方法</span>a<span class="token punctuation">.</span><span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: a.isAnimal is not a function</span>Animal<span class="token punctuation">.</span><span class="token function">isAnimal</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">/* 继承 */</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用 extends 关键字实现继承</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 子类中使用 super 关键字 调用父类的构造函数constructor</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Meow, "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 使用 super 关键字 调用父类的 sayHi()</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tom</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Meow, My name is Tom</span></code></pre><h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>TypeScript 可以使用三种访问修饰符和一个关键字</p><ul><li><code>public</code> 默认，修饰的属性或方法是公有的，可以在任何地方被访问到，默认所有的属性和方法都是 <code>public</code>的</li><li><code>private</code>修饰的属性或方法是私有的，不能在声明它的类的外部访问</li><li><code>protected</code>修饰的属性或方法是受保护的，它和 <code>private</code>类似，区别是它在子类中也是允许被访问的</li><li><code>readonly</code> 只读属性关键字，相比 private 可以访问不可赋值，只允许出现在属性声明或索引签名中</li></ul><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* public constructor (public name) { // 修饰符还可以使用在构造函数参数中，等同于类中定义该属性，使代码更简洁。 */</span>  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当构造函数修饰为 private 时，该类不允许被继承或者实例化；当构造函数修饰为 protected 时，该类只允许被继承：</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jack</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Tom</span><span class="token comment" spellcheck="true">/* private */</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">private</span> name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，在子类中也是不允许访问的；而如果是用 protected 修饰，则允许在子类中访问：</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jack 虽然也报错，但是需要注意的是，TypeScript 编译之后的代码中，并没有限制 private 属性在外部的可访问性</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，不能在类外赋值</span><span class="token comment" spellcheck="true">/* readonly */</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// readonly name;</span>  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token keyword">public</span> readonly name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 当和其他访问修饰符同时存在的话，需要写在其后面</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Jack</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错</span></code></pre><h4 id="抽象类abstract-class"><a href="#抽象类abstract-class" class="headerlink" title="抽象类abstract class"></a>抽象类<code>abstract class</code></h4><ul><li>抽象类 不允许被实例化</li><li>抽象类中的抽象方法必须被子类实现</li></ul><pre class=" language-typescript"><code class="language-typescript">abstract <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> name<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> abstract <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Meow, My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="类的类型"><a href="#类的类型" class="headerlink" title="类的类型"></a>类的类型</h4><p>类加上 TypeScript 的类型，与接口类似</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> a<span class="token punctuation">:</span> Animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"Jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// My name is Jack</span></code></pre><h4 id="类实现接口"><a href="#类实现接口" class="headerlink" title="类实现接口"></a>类实现接口</h4><p>实现（implements）是面向对象中的一个重要概念。</p><p>一般来讲，一个类只能继承自另一个类，有时候不同类之间可以有一些<strong>共有的特性</strong>，这时候就可以把特性提取成接口（interfaces），用 <code>implements</code>关键字来实现。这个特性大大提高了面向对象的灵活性。</p><p>接口(interfaces)不止用于<a href="#toc-heading-6">定义对象的类型</a>，和<a href="#toc-heading-8">定义函数形状</a>，在这里还可以用于实现(implements)。</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Light</span> <span class="token punctuation">{</span>  <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">SecurityDoor</span> <span class="token keyword">extends</span> <span class="token class-name">Door</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"SecurityDoor alert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">implements</span> <span class="token class-name">Alarm</span><span class="token punctuation">,</span> Light <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 一个类可以实现多个接口</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Car alert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Car light on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Car light off"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 接口继承接口 */</span><span class="token keyword">interface</span> <span class="token class-name">LightableAlarm</span> <span class="token keyword">extends</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>  <span class="token function">lightOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">lightOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 接口继承类 */</span><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Point3d</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  z<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> point3d<span class="token punctuation">:</span> Point3d <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 接口定义函数时，函数有自己属性方法 */</span><span class="token keyword">interface</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>  <span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  interval<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> Counter <span class="token punctuation">{</span>  <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token operator">&lt;</span>Counter<span class="token operator">></span><span class="token keyword">function</span> <span class="token punctuation">(</span>start<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  counter<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>  counter<span class="token punctuation">.</span>reset <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> counter<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token function">getCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>c<span class="token punctuation">.</span>interval <span class="token operator">=</span> <span class="token number">5.0</span><span class="token punctuation">;</span></code></pre><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p><a href="https://www.typescriptlang.org/docs/handbook/2/objects.html#generic-object-types">官方文档</a><br>泛型（Generics）是指在定义函数、接口或类的时候，不预先指定具体的类型，而在使用的时候再指定类型的一种特性。给类型定参</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> createArray<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 在函数名后添加 &lt;T>，其中 T 用来指代任意输入的类型，在后面的输入 value: T 和输出 Array&lt;T> 中即可使用了。</span>  <span class="token keyword">let</span> result<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>createArray<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['x', 'x', 'x']</span><span class="token comment" spellcheck="true">/* 定义多个类型参数 */</span><span class="token comment" spellcheck="true">// function createArray&lt;T = string>(length: number, value: T): Array&lt;T> { // 可以给泛型参数指定默认类型</span><span class="token keyword">function</span> swap<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> U<span class="token operator">></span><span class="token punctuation">(</span>tuple<span class="token punctuation">:</span> <span class="token punctuation">[</span>T<span class="token punctuation">,</span> U<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>U<span class="token punctuation">,</span> T<span class="token punctuation">]</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span>tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"seven"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['seven', 7]</span></code></pre><p><strong>泛型约束</strong></p><p>在函数内部使用泛型变量的时候，由于事先不知道它是哪种类型，所以不能随意的操作它(泛型变量)的属性或方法，这时，我们可以对泛型进行约束，只允许这个函数传入那些包含 <code>length</code>属性的变量</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">Lengthwise</span> <span class="token punctuation">{</span>  length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> loggingIdentity<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">Lengthwise</span><span class="token operator">></span><span class="token punctuation">(</span>arg<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用了 extends 约束泛型 T 必须符合接口 Lengthwise 的形状，也就是必须包含 length 属性</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arg<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> arg<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 例2 多个类型参数之间也可以互相约束 */</span><span class="token keyword">function</span> copyFields<span class="token operator">&lt;</span>T <span class="token keyword">extends</span> <span class="token class-name">U</span><span class="token punctuation">,</span> U<span class="token operator">></span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> T<span class="token punctuation">,</span> source<span class="token punctuation">:</span> U<span class="token punctuation">)</span><span class="token punctuation">:</span> T <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 要求 T 继承 U，保证 U 上不会出现 T 中不存在的字段</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> id <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>    target<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>T<span class="token operator">></span>source<span class="token punctuation">)</span><span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">copyFields</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> d<span class="token punctuation">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>含有泛型的接口定义一个函数的形状</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">interface</span> <span class="token class-name">CreateArrayFunc</span> <span class="token punctuation">{</span>  <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> createArray<span class="token punctuation">:</span> CreateArrayFunc<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 把泛型参数提前到接口名上interface CreateArrayFunc&lt;T> {    (length: number, value: T): Array&lt;T>;}let createArray: CreateArrayFunc&lt;any>;*/</span>createArray <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token punctuation">(</span>length<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> T<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">Array</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> result<span class="token punctuation">:</span> T<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token function">createArray</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ['x', 'x', 'x']</span></code></pre><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>泛型也可以用于类的类型定义中</p><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">class</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>  zeroValue<span class="token punctuation">:</span> T<span class="token punctuation">;</span>  add<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token punctuation">:</span> T<span class="token punctuation">,</span> y<span class="token punctuation">:</span> T<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> T<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> myGenericNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GenericNumber</span><span class="token operator">&lt;</span><span class="token keyword">number</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>zeroValue <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>myGenericNumber<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="泛型-Alias"><a href="#泛型-Alias" class="headerlink" title="泛型 Alias"></a>泛型 Alias</h4><pre class=" language-ts"><code class="language-ts">type OrNull<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token operator">=</span> Type <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>type OneOrMany<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token operator">=</span> Type <span class="token operator">|</span> Type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>type OneOrManyOrNull<span class="token operator">&lt;</span>Type<span class="token operator">></span> <span class="token operator">=</span> OrNull<span class="token operator">&lt;</span>OneOrMany<span class="token operator">&lt;</span>Type<span class="token operator">></span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//   ^ = type OneOrManyOrNull&lt;Type> = OneOrMany&lt;Type> | null</span>type OneOrManyOrNullStrings <span class="token operator">=</span> OneOrManyOrNull<span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//   ^ = type OneOrManyOrNullStrings = OneOrMany&lt;string> | null</span></code></pre><h4 id="内置泛型"><a href="#内置泛型" class="headerlink" title="内置泛型"></a>内置泛型</h4><p><code>string[]</code> 或 <code>number[]</code>这种声明相当于<code>Array[T]</code>的应用。类似的<code>Map&lt;K, V&gt;</code> <code>Set&lt;T&gt;</code> <code>Promise&lt;T&gt;</code></p><h4 id="ReadonlyArray-lt-Type-gt"><a href="#ReadonlyArray-lt-Type-gt" class="headerlink" title="ReadonlyArray&lt;Type&gt;"></a><code>ReadonlyArray&lt;Type&gt;</code></h4><p>只读数组<br>简写形式 <code>readonly type[]</code></p><h3 id="声明合并"><a href="#声明合并" class="headerlink" title="声明合并"></a>声明合并</h3><p>如果定义了两个相同名字的函数、接口或类，那么它们会合并成一个类型</p><h4 id="函数合并-重载"><a href="#函数合并-重载" class="headerlink" title="函数合并 - 重载"></a>函数合并 - 重载</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">reverse</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">|</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">Number</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="接口合并"><a href="#接口合并" class="headerlink" title="接口合并"></a>接口合并</h4><pre class=" language-typescript"><code class="language-typescript"><span class="token comment" spellcheck="true">/* 接口中的属性在合并时会简单的合并到一个接口中 */</span><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>  price<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>  weight<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// -> 合并为</span><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>  price<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  weight<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 并且合并的重名属性的类型必须是相同的否则报错</span><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>  price<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">Alarm</span> <span class="token punctuation">{</span>  price<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 虽然重复了，但是类型都是 `number`，所以不会报错</span>  weight<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="类合并"><a href="#类合并" class="headerlink" title="类合并"></a>类合并</h4><p><em>有处矛盾，待更新</em></p><hr><h1 id="以下是二次整理，待后续整合"><a href="#以下是二次整理，待后续整合" class="headerlink" title="以下是二次整理，待后续整合"></a>以下是二次整理，待后续整合</h1><p>ts 的核心之一就是对值/数据所具有的结构进行类型检查</p><h2 id="ts-配置文件-tsconfig-json"><a href="#ts-配置文件-tsconfig-json" class="headerlink" title="ts 配置文件 tsconfig.json"></a>ts 配置文件 tsconfig.json</h2><p>例：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es3"</span><span class="token punctuation">,</span>    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./dist"</span><span class="token punctuation">,</span>    <span class="token property">"strctNullChecks"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"includes"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>ts 和 eslint 的区别：理解成<br>eslint 是语法规范，包括缩进 变量命名 大小写 单双引号 还有值限定<br>ts 是值的限定，帮助提示值/数据类型安全，比如某对象的可用属性或方法</p><h2 id="类型系统"><a href="#类型系统" class="headerlink" title="类型系统"></a>类型系统</h2><ul><li><p>类型标注（签名）格式<code>变量: 标注类型</code></p><ul><li><p>基础类型(基元)： <code>string</code>, <code>number</code>, <code>boolean</code></p></li><li><p><code>null</code> 和 <code>undefined</code></p><ol><li>默认情况下 <code>null</code> 和 <code>undefined</code> 是所有类型的子类型。即 所有类型(除了<code>null</code>和<code>undefined</code>)的值都可以被赋值为 null/undefined 值</li><li>默认一个变量声明时未赋值，则该变量值为 undefined，类型为<code>any</code></li><li>在 ts 配置文件中 添加 <code>strctNullChecks: true</code>，可以检测值可能为 null 的情况，以智能提示 对值进行容错处理，使程序更加严谨</li></ol></li><li><p>Object 类型,用接口（Interfaces）</p><ul><li>对象字面量的类型标注<pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> obj<span class="token punctuation">:</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span> y<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>内置对象类型<br><code>Date</code>, <code>Set</code>, <code>Array</code><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> d1<span class="token punctuation">:</span> Date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>包装对象<br><code>String</code>, <code>Number</code>, <code>Boolean</code>类和基础<code>string</code>类不一样<pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> Str<span class="token punctuation">:</span> String <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"sss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> st<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"sss"</span><span class="token punctuation">;</span>Str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// st.split() 错</span>Str <span class="token operator">=</span> <span class="token string">"s2"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// st = new String('s2') 错</span></code></pre>可以理解成<code>string</code>类型是<code>String</code>类型的子类</li></ul></li><li><p><code>number[]</code>或<code>string[]</code>… 数组类型 用泛型（Generics）<br>解释：在数据结构中数组的定义是：存储<strong>相同类型</strong>的<strong>有序</strong>集合，但是 js 中的 Array 并没有遵守相同类型规则<br>泛形：例<code>let a: Array&lt;number&gt; = []</code></p></li><li><p>元组 类型<br>元组概念类似数组，但是允许元素类型不唯一相同，但是保留规则：1. 初始化数据的<strong>个数</strong>和<strong>对应位置标注类型</strong>必须一致，2.越界数据必须是元组标注允许的类型之一<br>例： <code>let d: [string, number] = [&#39;xx&#39;, 2]</code><br><code>d.push(3)</code> 可以<br><code>d.push(false)</code> 错<br><em>注意：如果开启了开启 strctNullChecks 则必须在声明变量的时候就初始化值 到满足第 1 个规则，如果不开启 strctNullChecks，则会默许声明变量时可以是 undefined 并且后续 push 的值放在对应位置可以不满足第 1 条规则：相同位置一一对应，但是仍需满足第 2 条规则？：类型之一</em><br><em>例允许：let d2: [string, number];d2.push(2)</em></p></li><li><p>枚举 类型<br>枚举概念： 其作用是组织收集一组相关联数据。一般常用于定义 constants 常量.<br>格式： <code>enum NAME &#123;key1=val1, key2=val2&#125;</code><br>其中 key 的命名和变量命名规则一致，所有 value 类型必须 number 或 string 二选一，且一致(ts 并不限定两者同时用但是不建议)，不写 val1 的话默认是 0 开始的数字 number 枚举<br>如：</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">enum</span> Http_code <span class="token punctuation">{</span>  OK <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span>  NoT_FOund <span class="token operator">=</span> <span class="token number">404</span><span class="token punctuation">,</span><span class="token punctuation">}</span>Http_code<span class="token punctuation">.</span>OK<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 200</span></code></pre></li><li><p><code>void</code> （函数）无返回值类型<br>函数的默认标注类型，标注无返回值的函数</p></li><li><p><code>never</code> （函数）永远无返回值类型<br>表示一个函数永不可能执行 return，比如 throw new Error(‘xx’)结尾<br><code>never</code>类型同 null/undefined 一样也是 其他所有类型的子类；所有其他类型也都不可以赋值给 never 类型，包括 any 类型</p></li><li><p><code>any</code> 类型</p><ol><li>任何值都可以赋值给 any 类型，2.any 类型可以赋值给任意类型， 3. any 类型有任意属性和方法<pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> a<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">let</span> b<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不会报错...any类型可以赋值给其他任何类型，</span></code></pre>可以理解成 any 类型被 ts 编译器放弃了进行类型检测，同时 IDE 的智能提示也忽略<br><em>建议给 tsconfig.json 配置 noImplicitAny: true 以禁止存在隐式 any 类型</em></li></ol></li><li><p><code>unknown</code> 类型<br>ts3.0 新增，理解成安全版的 any，与 any 的区别：</p><ul><li>unknown 类型的值 只能赋值给 unknown 或 any 类型的变量，不能赋值给其他任何类型</li><li>同 any 一样谁(x)都可以赋值给 unknown 类型的变量，区别是赋值后 该变量自动类型推导变成该(x)类型</li><li>unknown 类型的值 没有任何属性和方法，只有被赋值后缩小成其他类型才可以操作 get 或 .function</li></ul></li><li><p>函数 类型<br>函数是一等公民，ts 中同 js 中一样也是一种数据。<br>格式：</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 例：</span><span class="token keyword">function</span> <span class="token function">foreach</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cb<span class="token punctuation">:</span> <span class="token punctuation">(</span>k<span class="token punctuation">:</span><span class="token keyword">number</span><span class="token punctuation">,</span> v<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token punctuation">:</span><span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>data<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">cb</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">foreach</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'sss'</span><span class="token punctuation">,</span><span class="token string">'ddd'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>kk<span class="token punctuation">,</span> vvvv<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>后续学习 函数重载和数组泛形，接口<br>todo<br><a href="https://www.typescriptlang.org/docs/handbook/type-compatibility.html#any-unknown-object-void-undefined-null-and-never-assignability">官网整理解释 Any, unknown, object, void, undefined, null, never</a></p></li></ul></li><li><p>类型检测<br>即 编译器在编译过程中根据标注的类型进行检测，使数据使用更安全，帮住减少错误，IDE 也可以提供智能提示</p><h2 id="接口-类型"><a href="#接口-类型" class="headerlink" title="接口 类型"></a>接口 类型</h2><p>对复杂的对象类型进行标注的方式之一；或者说是给其他代码定义的一种契约（比如 Class）</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  y<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以是,或;进行分隔</span>  z<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> p1<span class="token punctuation">:</span> Point <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token string">"s"</span><span class="token punctuation">,</span>  z<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token keyword">false</span><span class="token punctuation">,</span> <span class="token keyword">true</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><ul><li>可选属性<code>key?: type</code>, 该属性可有可无</li><li>只读属性<code>readonly key: type</code>，该属性只能初始化时赋值，后续不能再次被赋值</li><li>任意属性<code>[prop: key-type]: value-type</code>，<ul><li>key-type 必须是 string 或 number 二选一；<br>```ts<br>interface IAny {<br>x: number;<br>y: string;</li></ul>  [prop: string]: number;<br>}<br>let ia: IAny = {<br>  x: 1,<br>  y: “ss”,<br>  dfs: 2,<br>};<br>ia.xxsdfs = 5;<br>ia[1] = 1; // 注意这里[]内是数字可以，因为js中对象中属性key可以是number，但是[]中即使是数字也会变成字符串key，原则上说对象的所有键名都是字符串（ES6 又引入了 Symbol 值也可以作为键名），所以加不加引号都可以，只不过遇到number的话会被解释器自动转成’number’； 换句话说 key-type是string的话，对象的属性可以是string也可以是number 即ia[‘sss’]或ia[2]都可，但是key-type是number的话，只能是ia[2]<pre><code>_object 对应的 key 没有限制，只是如果是数字，取值的时候就不能用英文句号(.)，只能用中括号的方式取值。详细规定见[链接](https://www.cnblogs.com/canger/p/6382944.html)和[阮一峰博客](https://javascript.ruanyifeng.com/grammar/object.html)_- 当同时存在 key-type 是 string 和 number 时，`[prop: number]: `的`value-type`必须是`[prop: string]:`的`value-type`相同类型或者其**子类型**```tsinterface IBoth &#123;  x: number;  [prop: string]: Object;  [prop: number]: Date; // 可以&#125;interface IBoth2 &#123;  x: number;  [prop: string]: string;  [prop: number]: boolean; // 不可以&#125;</code></pre></li></ul></li></ul><h2 id="深入了解-类型"><a href="#深入了解-类型" class="headerlink" title="深入了解 类型"></a>深入了解 类型</h2><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><p>多选类型，当我们希望标注一个变量为多个类型之一时<br><code>变量: 类型1 ｜ 类型2</code></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">fn1</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">boolean</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">boolean</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>合并类型，把多种类型合并到一起成为一种新的类型，包括各个类型的特点<br><code>变量: 类型1 &amp; 类型2</code></p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">o1</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span>  y<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">o2</span> <span class="token punctuation">{</span>  z<span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> obj1<span class="token punctuation">:</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token string">"s"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj2<span class="token punctuation">:</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span> z<span class="token punctuation">:</span> <span class="token keyword">false</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> obj3<span class="token punctuation">:</span> o1 <span class="token operator">&amp;</span> o2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">.</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h3><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">setPosition</span><span class="token punctuation">(</span>els<span class="token punctuation">:</span> Element<span class="token punctuation">,</span> direction<span class="token punctuation">:</span> <span class="token string">"left"</span> <span class="token operator">|</span> <span class="token string">"right"</span> <span class="token operator">|</span> <span class="token string">"center"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// left. top, right, bottom</span><span class="token punctuation">}</span><span class="token keyword">let</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>box<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">setPosition</span><span class="token punctuation">(</span>box<span class="token punctuation">,</span> <span class="token string">"center 这里只能从3个固定值之中选一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>对于对象类型，可以用 interface 来提出来 多次多处使用，但是对于非对象类型来说可以用类型别名来复用</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 如上例子</span>type dir <span class="token operator">=</span> <span class="token string">"left"</span> <span class="token operator">|</span> <span class="token string">"right"</span> <span class="token operator">|</span> <span class="token string">"center"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">setPosition</span><span class="token punctuation">(</span>ele<span class="token punctuation">:</span> Element<span class="token punctuation">,</span> direction<span class="token punctuation">:</span> dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如上上个例子</span>  type o3 <span class="token operator">=</span> o1 <span class="token operator">&amp;</span> o2<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h3><p>基于使用情况，比如每次声明变量/函数时都要手动写一遍类型，会很累赘，所以有了类型推导机制，即 ts 编译器会自动根据上下文推导出对应的类型标注，但是这种机制只会出现在</p><ul><li>变量初始化时</li><li>函数形参 提供默认值时</li><li>函数 返回值的类型判定 也会根据函数内 return 值来推导</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">"s"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 相当于</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">number</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="类型断言-1"><a href="#类型断言-1" class="headerlink" title="类型断言"></a>类型断言</h3><p>只是一种预判，类似于类型转换，但是并非真正的转换了，强制告诉 ts 编译器说这个变量一定会是就是这个类型。<br>例：</p><pre class=" language-ts"><code class="language-ts"><span class="token comment" spellcheck="true">// 以下两种格式都可以</span><span class="token keyword">let</span> img <span class="token operator">=</span> <span class="token operator">&lt;</span>HTMLInageElment<span class="token operator">></span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> img <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span> as HTMLInageElment<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这样的话 img变量一定会有src属性了</span><span class="token keyword">if</span> <span class="token punctuation">(</span>img<span class="token punctuation">)</span> <span class="token punctuation">{</span>  img<span class="token punctuation">.</span>src<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="类型操作符"><a href="#类型操作符" class="headerlink" title="类型操作符"></a><a href="https://jkchao.github.io/typescript-book-chinese/typings/typeGuard.html">类型操作符</a></h3><ul><li><p><code>typeof</code> 获取值的类型<br>在 ts 中，typeof 可以抽取<strong>某个值</strong>的类型，作为一个变量类型<br>例。注意其后一定必须是个值 不能是类型</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">{</span>  c1<span class="token punctuation">:</span> <span class="token string">"red"</span><span class="token punctuation">,</span>  c2<span class="token punctuation">:</span> <span class="token string">"black"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">typeof</span> colors<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可能是'object', 'string'...等等</span>type b <span class="token operator">=</span> <span class="token keyword">typeof</span> colors<span class="token punctuation">;</span><span class="token keyword">let</span> data<span class="token punctuation">:</span> b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 意即 data的类型和colors的类型一致</span></code></pre></li><li><p><code>keyof</code> 抽取<strong>某个类型</strong>的 key 的集合，作为一个变量类型</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type a <span class="token operator">=</span> keyof Person<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 相当于 type a = 'name' | 'age'</span></code></pre><p>实例：</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span>type personKeys <span class="token operator">=</span> keyof Person<span class="token punctuation">;</span><span class="token keyword">let</span> p1<span class="token punctuation">:</span> Person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"ha"</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getPersonVal</span><span class="token punctuation">(</span>k<span class="token punctuation">:</span> personKeys<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> p1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">let</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  z<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getPersonVal</span><span class="token punctuation">(</span>k<span class="token punctuation">:</span> keyof <span class="token keyword">typeof</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> p1<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//</span><span class="token keyword">let</span> attr<span class="token punctuation">:</span> keyof CSSStyleDeclaration <span class="token operator">=</span> <span class="token string">"width"</span><span class="token punctuation">;</span></code></pre><ul><li><code>in</code><ul><li>针对值，判断值中是否包含指定 key，返回 boolean</li><li>针对类型，内部使用 for…in 对类型进行遍历？格式<code>k in type</code>其中 type 必须是 string 或 number 或 symbol，因为要保证 key 的类型<pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span>type keysInP <span class="token operator">=</span> keyof Persontype newPerson <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>k <span class="token keyword">in</span> keysInP<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 等同于</span>  <span class="token punctuation">[</span>k <span class="token keyword">in</span> <span class="token string">'name'</span><span class="token operator">|</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><code>extends</code> 接口的继承<pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">type1</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">type2</span> <span class="token keyword">extends</span> <span class="token class-name">type1</span> <span class="token punctuation">{</span>  y<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> t2<span class="token punctuation">:</span> type2 <span class="token operator">=</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token string">"ss"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></li><li>泛型 是指一种不确定参数类型，占位符先，给类型定参。重点是各个类型的关联关系</li></ul></li></ul><h3 id="类型保护"><a href="#类型保护" class="headerlink" title="类型保护"></a>类型保护</h3><ul><li><code>typeof / instanceof</code><br>有的时候 值得类型并不惟一，</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">stringToUpperCase</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>str<span class="token punctuation">)</span><span class="token punctuation">.</span>toUpperCase<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token operator">></span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// 等同于</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 等同于</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> s<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>自定义类型保护<br><code>variable is type</code> 返回这种类型的函数可以被 ts 识别位类型保护</li></ul><pre class=" language-ts"><code class="language-ts"><span class="token keyword">function</span> <span class="token function">canEach</span><span class="token punctuation">(</span>  data<span class="token punctuation">:</span> Element<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> NodeList <span class="token operator">|</span> Element<span class="token punctuation">)</span><span class="token punctuation">:</span> data is Element<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> NodeList <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>NodeList<span class="token operator">></span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>forEach <span class="token operator">!==</span> undefined<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">let</span> eles <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">".box"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>ele<span class="token punctuation">:</span> Element<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> NodeList <span class="token operator">|</span> Element<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">canEach</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    ele<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span>eles<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>函数</li><li>类</li><li>泛型</li></ul><h1 id="修饰器-Decorator"><a href="#修饰器-Decorator" class="headerlink" title="修饰器 Decorator"></a>修饰器 Decorator</h1><p><a href="https://www.typescriptlang.org/docs/handbook/decorators.html">官网</a><br><a href="https://www.tslang.cn/docs/handbook/decorators.html">中文</a></p><p>实例是在我们的代码运行时动态生成的，而装饰器函数则是在编译阶段就执行了。所以说装饰器函数真正能触及到的，就只有类这个层面上的对象。</p><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>根据装饰器分别被附加在不同的地方，被称为不同类型装饰器，其行形参也不一样</p><ul><li><code>class declaration</code>类声明之前，<code>decorator(constructor: Function)</code><ul><li>类装饰器应用于类构造函数，可以用来监视，修改或替换类定义；</li><li>类装饰器表达式会在运行时当作函数被调用，类的构造函数作为其唯一的参数；</li><li>如果类装饰器返回一个值，它会使用提供的构造函数来替换类的声明。</li></ul></li><li><code>method</code>方法之前，<code>decorator(target: constructor/prototype, keyName: string, desc: TypedPropertyDescriptor&lt;T&gt;)</code><ul><li>被应用到方法的 属性描述符上，可以用来监视，修改或者替换方法定义。</li><li>如果方法装饰器返回一个值，它会被用作方法的属性描述符。</li><li>方法装饰器表达式会在运行时当作函数被调用，传入 3 个参数:<ul><li>其中 target 有两种情况<ul><li>在静态方法<code>static xxx()&#123;&#125;</code>之前的话就是 constructor</li><li>在实例方法<code>xx()&#123;&#125;</code>之前就是 ClassName.prototype</li></ul></li><li>keyName 是方法名</li><li>desc 是方法的属性描述符，里面有 这些<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">key-value</a></li></ul></li></ul></li><li><code>accessor</code>访问符之前 getter，<code>decorator(target: constructor/prototype, keyName: string, desc: TypedPropertyDescriptor&lt;T&gt;)</code><ul><li>应用于访问器的 属性描述符并且可以用来监视，修改或替换一个访问器的定义。</li><li>访问器装饰器表达式会在运行时当作函数被调用，传入下列 3 个参数：<ul><li>同<code>method</code></li></ul></li><li>如果访问器装饰器返回一个值，它会被用作方法的属性描述符。</li></ul></li><li><code>property</code>属性之前，<code>decorator(target: 形参, keyName: string)</code><ul><li>属性装饰器表达式会在运行时当作函数被调用，传入下列 2 个参数：<ul><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>成员的名字。</li></ul></li></ul></li><li><code>parameter</code>（方法/getter/setter/constructor）的参数之前，<code>decorator(target: constructor/prototype, keyName: string, parameterIndex: number)</code><ul><li>参数装饰器应用于类构造函数或方法声明。</li><li>参数装饰器表达式会在运行时当作函数被调用，传入下列 3 个参数：<ul><li>对于静态成员来说是类的构造函数，对于实例成员是类的原型对象。</li><li>参数名。</li><li>参数在函数参数列表中的索引。</li></ul></li></ul></li></ul><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><pre class=" language-ts"><code class="language-ts"><span class="token keyword">import</span> <span class="token string">"reflect-metadata"</span><span class="token punctuation">;</span><span class="token keyword">const</span> requiredMetadataKey <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"required"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">required</span><span class="token punctuation">(</span>  target<span class="token punctuation">:</span> Object<span class="token punctuation">,</span>  propertyKey<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">|</span> symbol<span class="token punctuation">,</span>  parameterIndex<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> existingRequiredParameters<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>    Reflect<span class="token punctuation">.</span><span class="token function">getOwnMetadata</span><span class="token punctuation">(</span>requiredMetadataKey<span class="token punctuation">,</span> target<span class="token punctuation">,</span> propertyKey<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  existingRequiredParameters<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>parameterIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  Reflect<span class="token punctuation">.</span><span class="token function">defineMetadata</span><span class="token punctuation">(</span>    requiredMetadataKey<span class="token punctuation">,</span>    existingRequiredParameters<span class="token punctuation">,</span>    target<span class="token punctuation">,</span>    propertyKey  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span>  target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span>  propertyName<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">,</span>  descriptor<span class="token punctuation">:</span> TypedPropertyDescriptor<span class="token operator">&lt;</span><span class="token keyword">Function</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> method <span class="token operator">=</span> descriptor<span class="token punctuation">.</span>value<span class="token punctuation">;</span>  descriptor<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> requiredParameters<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">getOwnMetadata</span><span class="token punctuation">(</span>      requiredMetadataKey<span class="token punctuation">,</span>      target<span class="token punctuation">,</span>      propertyName    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>requiredParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> parameterIndex of requiredParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>          parameterIndex <span class="token operator">>=</span> arguments<span class="token punctuation">.</span>length <span class="token operator">||</span>          arguments<span class="token punctuation">[</span>parameterIndex<span class="token punctuation">]</span> <span class="token operator">===</span> undefined        <span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Missing required argument."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>  greeting<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  <span class="token keyword">constructor</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>greeting <span class="token operator">=</span> message<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @validate  <span class="token function">greet</span><span class="token punctuation">(</span>@required name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"Hello "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>greeting<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>@fcName 是个语法糖，</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Boat</span> <span class="token punctuation">{</span>  color<span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>  <span class="token keyword">get</span> <span class="token function">formattedColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`color is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  @testDecrator  <span class="token function">pilot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"swish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">testDecrator</span><span class="token punctuation">(</span>target<span class="token punctuation">:</span> <span class="token keyword">any</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">void</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> __decorate <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__decorate<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> c <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span>      r <span class="token operator">=</span>        c <span class="token operator">&lt;</span> <span class="token number">3</span>          <span class="token operator">?</span> target          <span class="token punctuation">:</span> desc <span class="token operator">===</span> <span class="token keyword">null</span>          <span class="token operator">?</span> <span class="token punctuation">(</span>desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">:</span> desc<span class="token punctuation">,</span>      d<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Reflect <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Reflect<span class="token punctuation">.</span>decorate <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span>      r <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> decorators<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">=</span> decorators<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          r <span class="token operator">=</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token punctuation">:</span> c <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">?</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">d</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> r<span class="token punctuation">;</span>    <span class="token keyword">return</span> c <span class="token operator">></span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">,</span> r<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> __metadata <span class="token operator">=</span>  <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>__metadata<span class="token punctuation">)</span> <span class="token operator">||</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> Reflect <span class="token operator">===</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> Reflect<span class="token punctuation">.</span>metadata <span class="token operator">===</span> <span class="token string">"function"</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token function">metadata</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> Boat <span class="token operator">=</span> <span class="token comment" spellcheck="true">/** @class */</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">Boat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Boat<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"formattedColor"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token string">"color is "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Boat<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>pilot <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"swish"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token function">__decorate</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span>      testDecrator<span class="token punctuation">,</span>      <span class="token function">__metadata</span><span class="token punctuation">(</span><span class="token string">"design:type"</span><span class="token punctuation">,</span> Function<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">__metadata</span><span class="token punctuation">(</span><span class="token string">"design:paramtypes"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token function">__metadata</span><span class="token punctuation">(</span><span class="token string">"design:returntype"</span><span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    Boat<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span>    <span class="token string">"pilot"</span><span class="token punctuation">,</span>    <span class="token keyword">null</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> Boat<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">testDecrator</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>重点是 __decorate 函数</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 去掉空气校验之后的简版</span><span class="token keyword">var</span> __decorate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>decorators<span class="token punctuation">,</span> target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> desc <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> decorator <span class="token keyword">of</span> decorators<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">decorator</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>[getOwnPropertyDescriptor]<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor</a></p><h2 id="常用的几个装饰器方法："><a href="#常用的几个装饰器方法：" class="headerlink" title="常用的几个装饰器方法："></a>常用的几个装饰器方法：</h2><blockquote><p><a href="https://github.com/jayphelps/core-decorators.js">core-decorators.js</a>是一个第三方模块，提供了几个常见的装饰器，通过它可以更好地理解装饰器。</p></blockquote><h1 id="reflect-metadata"><a href="#reflect-metadata" class="headerlink" title="reflect-metadata"></a>reflect-metadata</h1><blockquote><pre class=" language-ts"><code class="language-ts"><span class="token keyword">interface</span> <span class="token class-name">CustomProps</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>HTMLProps</span><span class="token operator">&lt;</span>HTMLInputElement<span class="token operator">></span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  label<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  tips<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">;</span>  autoFocus<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">boolean</span><span class="token punctuation">;</span>  registerConfig<span class="token operator">?</span><span class="token punctuation">:</span> RegisterConfigType<span class="token punctuation">;</span>  affectFields<span class="token operator">?</span><span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>ButtonProps 可以使用 React.ComponentPropsWithoutRef&lt;’button’&gt;代替 React.HTMLProps<HTMLButtonElement>。</p></blockquote><h1 id="utility-types-内置类型别名"><a href="#utility-types-内置类型别名" class="headerlink" title="utility-types 内置类型别名"></a><a href="https://www.typescriptlang.org/docs/handbook/utility-types.html">utility-types</a> 内置类型别名</h1><p><a href="https://juejin.cn/post/6865910915011706887">https://juejin.cn/post/6865910915011706887</a></p><blockquote><p>了解下<a href="https://stackoverflow.com/questions/48215950/exclude-property-from-type"><code>Omit</code></a></p></blockquote><h2 id="TypeScript-VS-Flow"><a href="#TypeScript-VS-Flow" class="headerlink" title="TypeScript VS Flow"></a>TypeScript VS Flow</h2><p>我们可以从下表中了解 TypeScript 和 Flow 之间的主要区别。</p><table><thead><tr><th></th><th><strong>TypeScript</strong> - microsoft</th><th><strong>Flow</strong> - Facebook</th></tr></thead><tbody><tr><td>Flow</td><td>它是 JavaScript 语言的一个类型化超集。它是微软推出的开源和免费的编程语言。</td><td>它是一种基于 Flow 的打字工具，而不是编程语言。它是一个 JavaScript 静态类型检查器，位于现有 JS 代码之上。流的建立是为了支持快速和精确的代码分析。</td></tr><tr><td>设计目标</td><td>它用于通过在正确性和生产力之间取得平衡来识别程序中的错误。</td><td>它用于强制类型健全/安全。</td></tr><tr><td>用例(流行的框架集成)</td><td>当我们在 Angular 2 或更高版本上工作时，它会成为一个更好的选择。</td><td>如果我们致力于 React, Flow 将成为更好的选择，因为它很容易与 babel 和现有基础设施集成。</td></tr><tr><td>好处</td><td>主要的好处是: 它使用静态类型作为一个主要优点。提供有用的工具，例如代码重构、自动完成、导航等。它有优秀的 IDE 支持。它可以很容易地与 VSCode 集成，这使得编辑器如此流行。</td><td>主要的好处是: 它使用静态类型作为一个主要优点。它提供了强有力的程序分析。它可以很容易地理解代码。它对程序进行了强大的分析和控制。</td></tr><tr><td>特性</td><td>Typescript 的主要特点是: 编译时类型检查类型注解类型擦除类型推断枚举类型接口名称空间泛型元组</td><td>Flow 的主要特征是: 精度可靠性速度高吞吐量路径敏感低延迟类型推断实时反馈易于整合容易理解的 JavaScript 模式</td></tr><tr><td>服务</td><td>除了提供静态类型之外，它还为我们提供了强大的语言服务和适当的工具，包括代码重构、导航和自动完成。</td><td>除了提供静态类型之外，Flow 还为我们提供了广泛的过程间分析，并开发了对代码的深入理解。</td></tr><tr><td>优势</td><td>TypeScript 的优点是: 流行的框架支持(Vue, React, Angular)强大的社区强大的 IDE 支持与 JavaScript 的兼容性声明文件</td><td>Flow 的优点有: 支持任何 JS 文件易于整合对 JS 模式有较强的理解实时反馈类型转换容易可读性容易修改</td></tr><tr><td>缺点</td><td>TypeScript 的缺点是: 另一种编程语言较难与现有的 JS 项目整合</td><td>Flow 的缺点有: 小社区不太关注类型更小的 IDE 支持。</td></tr><tr><td>大小</td><td>42.4 MB</td><td>68.4 MB</td></tr></tbody></table><blockquote><p><a href="https://stackoverflow.com/questions/60381643/what-does-mean-in-typescript"><code>&#123;&#125;</code>是什么 type</a><br><a href="https://stackoverflow.com/questions/50550382/how-to-get-the-type-of-t-inside-generic-method-in-typescript">typescript 有没有办法描述一个变量 比如是 &lt;除了 string 之外的任何一种类型&gt;</a> &amp; <a href="https://stackoverflow.com/questions/24613955/is-there-a-type-in-typescript-for-anything-except-functions"><code>type NotFunction&lt;T&gt; = T extends Function ? never : T;</code></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gulp</title>
      <link href="/2019/08/29/bi-ji-gulp/"/>
      <url>/2019/08/29/bi-ji-gulp/</url>
      
        <content type="html"><![CDATA[<h1 id="静态资源打包工具-Gulp"><a href="#静态资源打包工具-Gulp" class="headerlink" title="静态资源打包工具 Gulp"></a>静态资源打包工具 Gulp</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 使用gulp自动 将静态文件目录 上传到服务器</span><span class="token keyword">const</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> ftp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vinyl-ftp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"upload-ftp"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> conn <span class="token operator">=</span> ftp<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">"192.168.0.11"</span><span class="token punctuation">,</span>    user<span class="token punctuation">:</span> <span class="token string">"files"</span><span class="token punctuation">,</span>    password<span class="token punctuation">:</span> <span class="token string">"xxx"</span><span class="token punctuation">,</span>    parallel<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">21</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> gulp    <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"dist/**/*"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">newer</span><span class="token punctuation">(</span><span class="token string">"/EBM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// only upload newer files</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"/EBM"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>conn<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span><span class="token string">"/EBM/**"</span><span class="token punctuation">,</span> <span class="token string">"./dist/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>todo</p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> todo </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Service Worker</title>
      <link href="/2019/08/09/bi-ji-service-worker/"/>
      <url>/2019/08/09/bi-ji-service-worker/</url>
      
        <content type="html"><![CDATA[<p>用户对站点的体验期望值越来越高，前端工程师有时候为了几十毫秒的速度优化而费劲心思，消耗大量时间。想要让自己的产品在无数产品中脱颖而出，就必须提升产品的性能和体验。在时间成本高昂的今天，响应速度的提升是开发者不得不面对的话题。</p><p>前端工程师有很多性能优化的手段，包括 CDN、CSS Sprite、文件的合并压缩、异步加载、资源缓存等等。其实我们绝大部分情况是在干一件事情，那就是尽量<strong>降低一个页面的网络请求成本从而缩短页面加载资源的时间并降低用户可感知的延时</strong>。当然减少用户可感知的延时也不仅仅是在网络请求成本层面，还有浏览器渲染效率，代码质量等等。</p><p>基于 Web Worker 实现</p><h2 id="简介-如何让网页的用户体验做到极致"><a href="#简介-如何让网页的用户体验做到极致" class="headerlink" title="简介 - 如何让网页的用户体验做到极致"></a>简介 - 如何让网页的用户体验做到极致</h2><p>浏览器中的 javaScript 都是运行在一个单一主线程上的，在同一时间内只能做一件事情。随着 Web 业务不断复杂，我们逐渐在 js 中加了很多耗资源、耗时间的复杂运算过程，这些过程导致的性能问题在 WebApp 的复杂化过程中更加凸显出来。W3C 组织早早的洞察到了这些问题可能会造成的影响，这个时候有个叫 Web Worker 的 API 被造出来了，这个 API 的唯一目的就是解放主线程，Web Worker 是脱离在主线程之外的，将一些复杂的耗时的活交给它干，完成后通过 postMessage 方法告诉主线程，而主线程通过 onMessage 方法得到 Web Worker 的结果反馈。</p><p>一切问题好像是解决了，但 Web Worker 是临时的，每次做的事情的结果还不能被持久存下来，如果下次有同样的复杂操作，还得费时间的重新来一遍。那我们能不能有一个 Worker 是一直持久存在的，并且随时准备接受主线程的命令呢？基于这样的需求推出了最初版本的 Service Worker ，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API">Service Worker</a> 在 Web Worker 的基础上加上了持久离线缓存能力。</p><p>目前原生 App 跟 HTML5 相比具有如下优势:富离线体验、消息推送、定时默认更行等功能，这些优势决定了 HTML5 无法取代 native。service worker(以下简称 sw)就是在这样的背景下提出来的。sw 是一段运行在浏览器后端的脚本，独立于页面，是一个 worker，也可以理解为一个网络代理服务器。因此 sw 是无法与 DOM 进行交互的，但是可以与 js 主线程进行通信。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>一个独立的 worker 线程，独立于当前网页进程，有自己独立的 worker context。</li><li>一旦被 install，就永远存在，除非被手动 unregister</li><li>用到的时候可以直接唤醒，不用的时候自动睡眠</li><li>可编程拦截代理请求和返回，缓存文件，缓存的文件可以被网页进程取到（包括网络离线状态）</li><li>离线内容开发者可控</li><li>能向客户端推送消息</li><li>不能直接操作 DOM</li><li>必须在 HTTPS 环境下才能工作</li><li>异步实现，内部大都是通过 Promise 实现</li></ul><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><p><a href="https://lavas.baidu.com/pwa/offline-and-cache-loading/service-worker/how-to-use-service-worker">教程来自 lavas</a></p><p><a href="https://www.bilibili.com/video/av36315901/">lavas 视频教程 b 站</a></p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--  xx.html  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Service Worker<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token comment" spellcheck="true">// 为了防止sw.js被浏览器缓存，导致sw延迟</span>      window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> firstScript <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        script<span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token string">"text/javascript"</span><span class="token punctuation">;</span>        script<span class="token punctuation">.</span><span class="token keyword">async</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">"/sw-register.js?v="</span> <span class="token operator">+</span> Data<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        firstScript<span class="token punctuation">.</span>parentElement<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>script<span class="token punctuation">,</span> firstScript<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token comment" spellcheck="true">// service worker 更新后通知用户 对应sw内的监听activate</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"serviceWorker"</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">"sw.update"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// window.location.reload();</span>            <span class="token function">alter</span><span class="token punctuation">(</span><span class="token string">"更新资源了，请刷新页面"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token comment" spellcheck="true">/* 注册. 在 js 主线程（常规的页面里的 js ）注册 Service Worker 来启动安装，这个过程将会通知浏览器我们的 Service Worker 线程的 javaScript 文件在什么地方呆着 */</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"serviceWorker"</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断 Service Worker API 的可用情况，支持的话咱们才继续谈实现</span>        window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          navigator<span class="token punctuation">.</span>serviceWorker            <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"/sw.js"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> scope<span class="token punctuation">:</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//scope作用域，如果不指定，默认是sw.js所在文件夹（scope取值必须在sw所在文件夹下的深层路径）</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 注册成功</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>                <span class="token string">"ServiceWorker registration successful with scope: "</span><span class="token punctuation">,</span>                registration<span class="token punctuation">.</span>scope              <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment" spellcheck="true">// 注册失败</span>              console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ServiceWorker registration failed: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** sw.js **/</span><span class="token comment" spellcheck="true">/*监听 service worker 的 install 事件*/</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"install"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 如果监听到了 service worker 已经安装成功的话，就会调用 event.waitUntil 回调函数</span>  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>    <span class="token comment" spellcheck="true">// 安装成功后操作 CacheStorage 缓存，使用之前需要先通过 caches.open() 打开对应缓存空间。</span>    caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"my-test-cache-v1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 通过 cache 缓存对象的 addAll 方法添加 precache 缓存</span>      cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"dog.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"monkey.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// install 时 填充缓存</span>      <span class="token keyword">return</span> cache<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token punctuation">[</span>        <span class="token string">"/"</span><span class="token punctuation">,</span>        <span class="token string">"/index.html"</span><span class="token punctuation">,</span>        <span class="token string">"/main.css"</span><span class="token punctuation">,</span>        <span class="token string">"/main.js"</span><span class="token punctuation">,</span>        <span class="token string">"/image.jpg"</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 监听sw激活 */</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"activate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"service worker activate.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  event<span class="token punctuation">.</span><span class="token function">waitUntil</span><span class="token punctuation">(</span>    caches      <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span>        Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span>          keys<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token string">"sw-demo-precache"</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> caches<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>      <span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"service worker now ready to handle fetch events"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>clients<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>clients <span class="token operator">&amp;&amp;</span> clients<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              client<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"sw.update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** service worker 更新后通知用户 */</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"activate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  caches    <span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>cacheName<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 老缓存清除</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>clients<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>clients<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clients <span class="token operator">&amp;&amp;</span> clients<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>          clients<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>client<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 给每个已经打开的标签都postMessage</span>            client<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">"sw.update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*自定义请求响应，每次任何被 Service Worker 控制的资源被请求到时，都会触发 fetch 事件*/</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"fetch"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>  event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>    caches<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 来来来，代理可以搞一些代理的事情</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果 Service Worker 有自己的返回，就直接返回，减少一次 http 请求</span>        <span class="token keyword">return</span> response<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">// 如果 service worker 没有返回，那就得直接请求真实远程服务</span>      <span class="token keyword">var</span> request <span class="token operator">=</span> event<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 把原始请求拷过来</span>      <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>httpRes<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// http请求的返回已被抓到，可以处置了。</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>httpRes <span class="token operator">||</span> httpRes<span class="token punctuation">.</span>status <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// 请求失败了，直接返回失败的结果就好了。。</span>          <span class="token keyword">return</span> httpRes<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> responseClone <span class="token operator">=</span> httpRes<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 请求成功的话，将请求缓存起来。</span>        caches<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"my-test-cache-v1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>          cache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">,</span> responseClone<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> httpRes<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/** sw-register.js **/</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"serviceWorker"</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>  window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">getRegistrations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>regs<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> reg <span class="token keyword">of</span> regs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        reg<span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在注册前清空所有已注册的sw，防止作用域污染</span>    navigator<span class="token punctuation">.</span>serviceWorker      <span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"/sw.js"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> scope<span class="token punctuation">:</span> <span class="token string">"/"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>registration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>          <span class="token string">"ServiceWorker registration successful with scope: "</span><span class="token punctuation">,</span>          registration<span class="token punctuation">.</span>scope        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"ServiceWorker registration failed: "</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>data <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>data <span class="token operator">===</span> <span class="token string">"sw.update"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><p><img src="https://camo.githubusercontent.com/c3bff6403d8a948370384b5a3e5586a93ad4e9b5/68747470733a2f2f696d672e616c6963646e2e636f6d2f7466732f54423130795578534658585858586b5858585858585858585858582d3730322d3638352e706e67" alt="img"></p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><ul><li><a href="https://x5.tencent.com/product/service-worker.html">https://x5.tencent.com/product/service-worker.html</a></li><li><a href="https://segmentfault.com/a/1190000022103402">https://segmentfault.com/a/1190000022103402</a></li><li><a href="https://github.com/Leslie2014/blog/issues/1">github.com/Leslie2014</a></li><li><a href="https://segmentfault.com/a/1190000015350831">https://segmentfault.com/a/1190000015350831</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webAPI </tag>
            
            <tag> 性能优化 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大前端</title>
      <link href="/2019/08/08/sui-bi-da-qian-duan/"/>
      <url>/2019/08/08/sui-bi-da-qian-duan/</url>
      
        <content type="html"><![CDATA[<h1 id="当我们在谈大前端的时候，我们谈的是什么"><a href="#当我们在谈大前端的时候，我们谈的是什么" class="headerlink" title="当我们在谈大前端的时候，我们谈的是什么"></a>当我们在谈大前端的时候，我们谈的是什么</h1><p>在今天，大前端并不是一个陌生的词汇。17 年开始，大前端这个概念开始浮出水面，18 年，大前端趋势已经愈发明显，层出不穷的跨平台技术，QCon、GMTC 等一线会议开始设置大前端议题，阿里、京东、美团和去哪儿开始推出自己的跨平台实践。这些都在告诉我们，大前端要来了。</p><p>标准搜索引擎搜到的，只是 4% 的互联网数据。引以为例，希望当我们谈到“大前端”时，大家的印象不再总被“HTML、CSS、JavaScript 基础”所局限。</p><p>今天我们不聊技术，不聊具体原理，只谈谈它能做到哪些。</p><p>首先，为什么要有“跨端”这个东西呢？那就是成本，一处编写，多端运行（Write Once，Run Any Where）。与之前的为了开发一个 app 要分别招 ios 和 android 两种开发人员，写两种代码相比，统一无疑是顺应潮流的</p><p>比如前两年如日中天的跨平台 RN，写一套代码可以同时运行在 Android 和 iOS 端。再到今年的大热 Flutter 真的是把大前端和跨平台融合在一起了。Flutter 可以说真的是写一次，可以运行在任何地方。Android ？可以，iOS？可以，Windows Mac OS 也可以！</p><p>接下来介绍下有哪些跨端实现了</p><h2 id="跨端实现汇总"><a href="#跨端实现汇总" class="headerlink" title="跨端实现汇总"></a>跨端实现汇总</h2><p>目前的主流跨平台方案：Cordova 框架/phoneGap、React Native、Weex、微信小程序、PWA 和 Flutter 等，根据其原理性，可以分为四大类。</p><ul><li><p>H5+原生（Cordova、Ionic、微信小程序）混合开发</p><p>这类框架主要原理就是将 APP 的一部分需要动态变动的内容通过 H5 来实现，通过原生的网页加载控件 WebView (Android)或 WKWebView（ios）来加载，H5 部分是可以随时改变而不用发版，这样就解决了动态化的需求，同时，由于 h5 代码只需要一次开发，就能同时在 Android 和 iOS 两个平台运行，这也可以减小开发成本，我们称这种 h5+原生的开发模式为混合开发。采用混合模式开发的 APP 我们称之为混合应用或 Hybrid APP。</p><p>混合开发中，h5 代码是运行在 WebView 中，而 WebView 实质上就是一个浏览器内核，其 JavaScript 依然运行在一个权限受限的沙箱中，所以对于大多数系统能力都没有访问权限，如无法访问文件系统、不能使用蓝牙等。所以，对于 H5 不能实现的功能，都需要原生去做。而混合框架一般都会在原生代码中预先实现一些访问系统能力的 API， 然后暴露给 WebView 以供 JavaScript 调用，这样一来，WebView 就成为了 JavaScript 与原生 API 之间通信的桥梁，主要负责 JavaScript 与原生之间传递调用消息，而消息的传递必须遵守一个标准的协议，它规定了消息的格式与含义，我们把依赖于 WebView 的用于在 JavaScript 与原生之间通信并实现了某种消息传输协议的工具称之为 WebView JavaScript Bridge, 简称 JsBridge，它也是混合开发框架的核心。</p></li><li><p>JavaScript 开发+原生渲染 （React Native、Weex、快应用）</p><p>这类开源框架的代表主要是 Facebook 的 React Native、阿里的 Weex，当然也有未开源的美团的 Picasso，以及最新推出的快应用。 我们先简单了解一下快应用这个东西，稍后会继续涉及到 RN 和 Weex</p><p>快应用是华为、小米、OPPO、魅族等国内 9 大主流手机厂商共同制定的轻量级应用标准，目标直指微信小程序。它也是采用 JavaScript 语言开发，原生控件渲染，与 React Native 和 Weex 相比主要有两点不同：</p><ul><li>快应用自身不支持 Vue 或 React 语法，是采用原生 JavaScript 开发，开发框架和微信小程序很像，值得一提的是小程序目前已经可以使用 Vue 语法开发（mpvue），从原理上来讲，Vue 的语法也可以移植到快应用上。</li><li>React Native 和 Weex 的渲染/排版引擎是集成到框架中的，每一个 APP 都需要打包一份，安装包体积较大；而快应用渲染/排版引擎是集成到 ROM 中的，应用中无需打包，安装包体积小，正因如此，快应用才能在保证性能的同时做到快速分发。</li></ul></li><li><p>自绘 UI+原生(Flutter)</p><p>Flutter 是 Google 推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart 语言开发 App，一套代码同时运行在 iOS 和 Android 平台。</p><p>Flutter 既不使用 WebView，也不使用操作系统的原生控件。 相反，Flutter 使用自己的高性能渲染引擎来绘制 widget。这样不仅可以保证在 Android 和 iOS 上 UI 的一致性，而且也可以避免对原生控件依赖而带来的限制及高昂的维护成本。</p></li><li><p>增强版 Web App(PWA) Progress Web App</p><p>PWA 不属于上述跨平台开发的某一种，它是一种理念，PWA 本质上是 Web App，借助一些新技术也具备了 Native App 的一些特性，比如离线能力、本地缓存、和通知推送，兼具 Web App 和 Native App 的优点，看起来更像一个原生 App。 是一个不需要下载安装即可使用的应用。</p><p>PWA 完全使用前端技术栈，不过它需要手机和浏览器的支持，目前支持 ServiceWorker 和 Google Play Service 的 Android 手机，以及搭载 11.3 以上的 iOS 手机可以使用 PWA。由于国内手机厂商和浏览器厂商的统一性问题，PWA 在国内发展不是很好，但是在国外并没有这些问题。</p></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>过去几年，前端技术经历了爆发式的发展，这种发展最重要的推动者之一就是 NodeJS。NodeJS 为前端建立了与系统之间沟通的桥梁，从此前端技术不仅能在服务端大放异彩，还能在本地的前端开发工具与工作流上大展身手，前端从此被解放了，也因为有了 node 的出现，随之而来了的 JavaScript 统治世界的论调一度甚嚣尘上。前端同学暂时取得了一些阶段性胜利，其结果就是从后端主导的开发中脱离出来，实现前后端分离。在以前前端页面模板由后端生成，导致在页面需要频繁修改的时候效率低下，前后端分离指的是后端只提供接口，前端对页面有完整控制，同时通过中间层将前后端隔开，在这里对数据进行抽取、聚合、分发等操作。这个中间层，通常也是由前端同学负责。</p><p>从这个意义上，大前端的原始定义可以称为前端技术的扩大化，包括 NodeJS，同时对 Web 页面有更强的控制权，开发承载更多功能的页面。</p><p>而 node 可以做什么呢，稍后再详细讲一下用法。</p><p>接下来我们继续看看 js 还能做什么哈～那就是移动端 APP 的大行其道</p><h3 id="移动端-android-ios"><a href="#移动端-android-ios" class="headerlink" title="移动端 android/ios"></a>移动端 android/ios</h3><p>移动互联网时代到来之后，移动 App 成为新的主流，而 PC 浏览器的地位则逐渐降低。新的 android/ios 原生开发需求出现了，但是慢慢的发现为了做一个 APP 开发和维护的时间和资金成本都比较大，这个时候以 PhoneGap/Cordova 为代表的 Hybrid 开发，以及内嵌在 App 中的 WebView 开发，再加上微信成为主流之后的“微信 Web”，前端技术其实在移动端也有很多的使用场景，直到 17 年风靡一时的 RN 的加入，壮大了前端的技术栈，真正实现了一处编写，多端运行（Write Once，Run Any Where）的开发方式。在所有通过图形界面进行人机交互的地方都可行，在 PC、Web、移动设备甚至还未发明出的未来的种种设备上，只要系统能运行 JavaScript 引擎，理论上都可以采用类似 React Native 的开发方案。这种前端技术，开始被称为大前端。</p><p>前端的客户端渲染框架三大之二：React 和 Vue 已经覆盖了目前主流的系统平台，并且分别对应的 facebook 推出的<strong>React Native</strong>和阿里推出的<strong>Weex</strong> 框架可以进行原生开发，相较于其它技术有很强的优势。</p><h3 id="小程序"><a href="#小程序" class="headerlink" title="小程序"></a>小程序</h3><p>自从 2017 年发布微信小程序到现在，小程序平台主要是 BAT 即腾讯、阿里、百度加上头条抖音四个。对小程序定义通常为：是一种不需要下载安装即可使用的应用，用户扫一扫或者搜一下即可打开应用。</p><p>先看微信小程序，它已经初具规模，虽然很多报道说微信小程序风口已过，由于微信的社交黏性，用户长时间的使用习惯已经养成，所以微信平台肯定是目前最强的小程序平台。</p><p>再来看支付宝的小程序，只允许企业注册提交，不允许个人开发者进入，因为支付宝小程序基本是围绕钱的应用，严格准入也可以理解。支付宝小程序主要面向商业和生活服务领域，开放的核心能力主要是支付、信用借贷（花呗和芝麻信用）、会员卡等。过年集五福的小游戏也都是小程序，但游戏显然不是支付宝的重点。</p><p>百度小程序的特色在于开放各种智能能力，主要体现在提供了图像语音等识别能力，但实际业务案例还比较少。</p><p>同时还出现了一批支持小程序的组件框架。腾讯的 WePY、美团的 mpVue、还有京东的 Taro 等，暂时不讨论哈。</p><p>接下来可以简单看一个微信小程序的 demo。</p><h3 id="桌面端-Windows-Mac-OS-Linux"><a href="#桌面端-Windows-Mac-OS-Linux" class="headerlink" title="桌面端 Windows/Mac OS/Linux"></a>桌面端 Windows/Mac OS/Linux</h3><p>在国内<code>All in mobile</code>的风气下谈论桌面客户端开发似乎是个很非主流的行为，但是作为 JavaScript 在桌面端伸出的利爪，<code>Electron</code>不仅仅是快速开发跨平台桌面客户端的一个技术选型，也有着其独特的象征意义~</p><p>Electron 是由 Github 出品、维护的跨平台桌面应用开发框架。说白了就是剥离 Chromium 内核拿来写桌面应用，应用的大部分 UI 就是 web 页面，也就是我们前端熟悉的 dom. 交互逻辑全部是 js，样式还是 css 写，相当于给用户一个浏览器去渲染应用……看到这里想必读者老爷会骂娘（这不就是 web 么？要这么折腾还不如直接写个网页）</p><p>Electron 的本质目的还是利用 js 构建跨平台的桌面端应用，个人认为它的使用场景主要是一些需要原生功能支持、有离线使用需求、迭代速度较快、对下载安装不太敏感同时桌面端开发人员不足的项目。Electron 不仅仅是个“浏览器”，它也封装了一些原生系统的功能，提供给 js 开发者，比如可以简单地使用 js 定制不同系统的菜单栏、应用图标、任务栏，控制应用窗口的大小和位置，调用本地的程序等。相比 web 应用，开发者摆脱了来自浏览器的限制、并可以间接地和原生打交道。</p><p>目前基于 Electron 最著名的桌面端应用是: <code>Atom编辑器</code>、<code>VS Code编辑器</code>、<code>Slack</code>、<code>Postman桌面版</code>、<code>Wordpress桌面版</code>等等，基本上都是国外公司在使用。</p><p>接下来我们可以先上俩个 demo 简单有个印象～…</p><p>Electron 运行时分为两个进程：主进程和渲染进程。主进程是启动 app 时创建的，主要负责 app 如何调用原生、如何创建并管理新窗口（页面）以及各种和原生相关的逻辑，可粗略理解为跑了个 node；渲染进程负责所有页面的绘制（使用 Chromium 内核）、及其前端 js 的解析和运行，粗略理解为“前端”。两个进程通过 ipc（跨进程交互）通信，窗口之间可以有附属关系，也可以使用消息机制互相通信。</p><p>Electron 帮开发者完成和原生的连接，和现在 Facebook 推出的<code>React Native</code>一样，开发者所需要做的无非是阅读文档、通过 js 调用封装好的接口，无需直接和原生打交道（写原生代码）</p><h3 id="Flutter-全平台制霸"><a href="#Flutter-全平台制霸" class="headerlink" title="Flutter 全平台制霸"></a>Flutter 全平台制霸</h3><p>Flutter 是 Google 推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart 语言开发 App，一套代码同时运行在 iOS 和 Android 平台。 Flutter 提供了丰富的组件、接口，开发者可以很快地为 Flutter 添加原生扩展。</p><p>确切的说，Flutter 不属于 js 的跨段实现范围，它使用的是 dart 语言，一种类 js 语言，Flutter 既不使用 WebView，也不使用操作系统的原生控件。 相反，Flutter 使用自己的高性能渲染引擎来绘制 widget。这样不仅可以保证在 Android 和 iOS 上 UI 的一致性，而且也可以避免对原生控件依赖而带来的限制及高昂的维护成本。</p><p>目前 Flutter 已经支持了移动端/桌面端/嵌入式设备。Flutter 项目不再是一套单纯的移动框架，今年的谷歌 I/O 大会上，介绍 Flutter 在桌面系统及嵌入式设备中的应用与未来的发展，宣布 Flutter 已经在为包括 Google Home Hub 在内的多种谷歌智能显示平台提供支持，并通过 Chrome OS 迈出了桌面级应用程序支持的第一步。而将真正实现了[跨三端多平台框架]，也一度越为 19 年前端必须技术之一。但是 Flutter 也有不足之处，不支持动态下发代码和热更新。</p><p>这个可以留到下次分享会一起讨论学习。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>在客户端开发上，Native 与 HTML5 之争持续快十年，吵了人们都失去兴趣了，从现在来看，并没有谁取代谁，而是有融合的趋势，融合之后的产物就是所谓的大前端。如果说前后端分离是前端在纵向上变大，那么这种跨不同的终端的前端技术则可以说是在横向上变大。</p><h2 id="目前的缺陷"><a href="#目前的缺陷" class="headerlink" title="目前的缺陷"></a>目前的缺陷</h2><p>虽然现在已有的各种跨端和原生相比有很大的缺点。</p><p><strong>ReactNative 和 weex</strong>：Facebook 和阿里的方案，执行效率是硬伤，首页不能用 RN 已是共识，而且目前在统一 Android 和 iOS 代码方面尚存在不足。</p><p><strong>Flutter</strong>：Google 的方案，不支持线上热修复，和跨平台方案天然的动态化属性不符，目前尚在 preview 阶段。</p><p><strong>PWA</strong>：Google 的方案，用纯 web 的方式统一三端，很好的 idea。但是需要借助 Google play Service 和浏览器支持，国外大部分 Android 手机和 iOS 的新版本都可以支持 PWA，但遗憾的是，就我对国内生态的了解，国内的浏览器没法统一支持 PWA。</p><p><strong>微信小程序</strong>：腾讯的方案，属于微信内的生态闭环，注定没法成为世界统一的方案，更适合小工具和小游戏，一般都作为原生 APP 的延伸入口。而且目前仍存在不少未符合浏览器标准的坑。</p><p>很显然，跨平台技术还需要发展，这需要时间，上面的一切我总结为一句话：<br>大前端的车轮将在曲折中前进。</p><p>但是它的一个优点足以弥补现阶段的这些不足：那就是成本，一处编写，多端运行（Write Once，Run Any Where），而且也会是大势所趋。</p><p>而且随着技术的成熟，加上 5G 的到来，那些和原生相比的劣势可能会变成优势。并且，大前端工程师将会是一个拥有强大生命力的职业，因为显示终端设备的生命力会很强，毕竟人类的信息获取有 80% 以上是通过视觉，无论 Amazon Echo 这样的语音交互设备如何演化，显示终端都会有一席之地，大前端也因而不会失业。最终，大前端这个概念也许会变成一个“集浏览器，客户端，安卓/ios 开发，以及即将到来的 AR，VR 包含所有视觉呈现交互技术的集合”。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
